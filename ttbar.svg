<?xml version="1.0" encoding="UTF-8"?><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mcviz="http://mcviz.net" id="whole_document">
<rect id="background" x="0" y="0" width="101.6" height="42.9" style="fill:white;" />
<defs>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg6" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-11.90,-12.10 v27.30 c0.00,10.70,8.60,12.90,15.70,12.90 c7.60,0.00,12.00,-5.70,12.00,-12.90 v-5.30 h-4.60 v5.10 c0.00,6.70,-3.20,9.10,-6.00,9.10 c-5.80,0.00,-5.80,-6.40,-5.80,-8.70 v-27.50 h14.60 v-4.60 h-14.60 v-19.10 h-4.60 c-0.20,10.00,-5.00,19.90,-14.90,20.20 v3.50 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg-6" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><line stroke-width="3.98" x1="-18.30" x2="26.30" y1="-50.90" y2="-50.90"/><path d="M-11.90,-12.10 v27.30 c0.00,10.70,8.60,12.90,15.70,12.90 c7.60,0.00,12.00,-5.70,12.00,-12.90 v-5.30 h-4.60 v5.10 c0.00,6.70,-3.20,9.10,-6.00,9.10 c-5.80,0.00,-5.80,-6.40,-5.80,-8.70 v-27.50 h14.60 v-4.60 h-14.60 v-19.10 h-4.60 c-0.20,10.00,-5.00,19.90,-14.90,20.20 v3.50 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg24" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M14.30,-33.80 l0.00,-0.10 l0.10,-0.20 l0.00,-0.10 l0.10,-0.20 l0.00,-0.10 l0.10,-0.10 l0.10,-0.10 l0.00,-0.10 l0.10,-0.10 l0.00,-0.10 l0.10,-0.10 l0.00,0.00 l0.10,-0.10 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.20,-0.10 l0.10,0.00 l0.20,0.00 l0.10,-0.10 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,-0.10 l0.20,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.20,0.00 l0.10,-0.10 l0.10,0.00 l0.20,0.00 c2.00,-0.20,4.10,-0.20,5.70,-0.20 v-4.70 h-24.20 v4.70 c2.50,0.00,7.20,0.00,10.10,1.10 l-17.10,44.60 l-17.70,-45.70 h9.60 v-4.70 h-32.70 v4.70 h8.60 l4.10,10.60 l-13.60,35.10 l-17.60,-45.70 h9.60 v-4.70 h-32.70 v4.70 h8.60 l23.90,61.90 c0.60,1.60,1.00,2.60,3.50,2.60 c2.50,0.00,2.80,-1.00,3.40,-2.60 l17.40,-44.80 l17.30,44.80 c0.60,1.60,1.00,2.60,3.50,2.60 c2.50,0.00,2.90,-1.00,3.50,-2.60 z" fill="black" stroke-width="0"/><path d="M60.10,-28.20 h21.30 c0.90,0.00,2.60,0.00,2.60,-1.70 c0.00,-1.80,-1.60,-1.80,-2.60,-1.80 h-21.30 v-21.40 c0.00,-0.90,0.00,-2.60,-1.70,-2.60 c-1.70,0.00,-1.70,1.60,-1.70,2.60 v21.40 h-21.40 c-0.90,0.00,-2.60,0.00,-2.60,1.70 c0.00,1.80,1.60,1.80,2.60,1.80 h21.40 v21.40 c0.00,0.90,0.00,2.50,1.60,2.50 c1.80,0.00,1.80,-1.60,1.80,-2.50 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg-1" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><line stroke-width="3.98" x1="-27.80" x2="35.80" y1="-56.90" y2="-56.90"/><path d="M9.40,23.20 v4.90 l18.30,-0.60 v-4.70 c-6.20,0.00,-6.90,0.00,-6.90,-3.80 v-60.60 l-17.60,0.70 v4.70 c6.20,0.00,6.80,0.00,6.80,3.90 v19.50 c-4.90,-3.90,-10.10,-4.50,-13.40,-4.50 l1.00,3.60 c5.70,0.00,9.70,3.20,11.80,6.00 h0.00 v24.90 c-1.20,1.80,-5.40,7.30,-12.90,7.30 c-12.20,0.00,-12.20,-12.00,-12.20,-19.00 c0.00,-4.80,0.00,-10.20,2.60,-14.00 c2.90,-4.20,7.60,-5.20,10.70,-5.20 l-1.00,-3.60 c-14.50,0.00,-25.00,8.80,-25.00,22.80 c0.00,13.10,9.20,22.60,23.90,22.60 c6.10,0.00,10.90,-2.40,13.90,-4.90 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg2" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M11.40,20.30 v7.80 l17.70,-0.60 v-4.70 c-6.20,0.00,-6.90,0.00,-6.90,-3.80 v-36.30 l-18.20,0.80 v4.70 c6.10,0.00,6.80,0.00,6.80,3.80 v19.00 c0.00,8.20,-5.00,13.50,-12.30,13.50 c-7.70,0.00,-8.00,-2.50,-8.00,-7.90 v-33.90 l-18.20,0.80 v4.70 c6.20,0.00,6.90,0.00,6.90,3.80 v23.20 c0.00,10.70,8.00,12.90,17.90,12.90 c2.60,0.00,9.80,0.00,14.30,-7.80 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg-24" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M14.30,-33.80 l0.00,-0.10 l0.10,-0.20 l0.00,-0.10 l0.10,-0.20 l0.00,-0.10 l0.10,-0.10 l0.10,-0.10 l0.00,-0.10 l0.10,-0.10 l0.00,-0.10 l0.10,-0.10 l0.00,0.00 l0.10,-0.10 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.20,-0.10 l0.10,0.00 l0.20,0.00 l0.10,-0.10 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,-0.10 l0.20,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.20,0.00 l0.10,-0.10 l0.10,0.00 l0.20,0.00 c2.00,-0.20,4.10,-0.20,5.70,-0.20 v-4.70 h-24.20 v4.70 c2.50,0.00,7.20,0.00,10.10,1.10 l-17.10,44.60 l-17.70,-45.70 h9.60 v-4.70 h-32.70 v4.70 h8.60 l4.10,10.60 l-13.60,35.10 l-17.60,-45.70 h9.60 v-4.70 h-32.70 v4.70 h8.60 l23.90,61.90 c0.60,1.60,1.00,2.60,3.50,2.60 c2.50,0.00,2.80,-1.00,3.40,-2.60 l17.40,-44.80 l17.30,44.80 c0.60,1.60,1.00,2.60,3.50,2.60 c2.50,0.00,2.90,-1.00,3.50,-2.60 z" fill="black" stroke-width="0"/><path d="M79.70,-28.20 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.30,-0.10 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.20,0.00 l0.10,-0.10 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,-0.10 l0.00,-0.10 l0.10,0.00 l0.00,0.00 l0.00,-0.10 l0.10,0.00 l0.00,-0.10 l0.00,0.00 l0.10,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 l0.10,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 c0.00,-1.80,-1.60,-1.80,-2.80,-1.80 h-41.60 c-1.10,0.00,-2.80,0.00,-2.80,1.70 c0.00,1.80,1.60,1.80,2.80,1.80 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg1" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M9.40,23.20 v4.90 l18.30,-0.60 v-4.70 c-6.20,0.00,-6.90,0.00,-6.90,-3.80 v-60.60 l-17.60,0.70 v4.70 c6.20,0.00,6.80,0.00,6.80,3.90 v19.50 c-4.90,-3.90,-10.10,-4.50,-13.40,-4.50 l1.00,3.60 c5.70,0.00,9.70,3.20,11.80,6.00 h0.00 v24.90 c-1.20,1.80,-5.40,7.30,-12.90,7.30 c-12.20,0.00,-12.20,-12.00,-12.20,-19.00 c0.00,-4.80,0.00,-10.20,2.60,-14.00 c2.90,-4.20,7.60,-5.20,10.70,-5.20 l-1.00,-3.60 c-14.50,0.00,-25.00,8.80,-25.00,22.80 c0.00,13.10,9.20,22.60,23.90,22.60 c6.10,0.00,10.90,-2.40,13.90,-4.90 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg2103" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-38.60,20.30 v7.80 l17.70,-0.60 v-4.70 c-6.20,0.00,-6.90,0.00,-6.90,-3.80 v-36.30 l-18.20,0.80 v4.70 c6.10,0.00,6.80,0.00,6.80,3.80 v19.00 c0.00,8.20,-5.00,13.50,-12.30,13.50 c-7.70,0.00,-8.00,-2.50,-8.00,-7.90 v-33.90 l-18.20,0.80 v4.70 c6.20,0.00,6.90,0.00,6.90,3.80 v23.20 c0.00,10.70,8.00,12.90,17.90,12.90 c2.60,0.00,9.80,0.00,14.30,-7.80 z" fill="black" stroke-width="0"/><path d="M19.40,23.20 v4.90 l18.30,-0.60 v-4.70 c-6.20,0.00,-6.90,0.00,-6.90,-3.80 v-60.60 l-17.60,0.70 v4.70 c6.20,0.00,6.80,0.00,6.80,3.90 v19.50 c-4.90,-3.90,-10.10,-4.50,-13.40,-4.50 l1.00,3.60 c5.70,0.00,9.70,3.20,11.80,6.00 h0.00 v24.90 c-1.20,1.80,-5.40,7.30,-12.90,7.30 c-12.20,0.00,-12.20,-12.00,-12.20,-19.00 c0.00,-4.80,0.00,-10.20,2.60,-14.00 c2.90,-4.20,7.60,-5.20,10.70,-5.20 l-1.00,-3.60 c-14.50,0.00,-25.00,8.80,-25.00,22.80 c0.00,13.10,9.20,22.60,23.90,22.60 c6.10,0.00,10.90,-2.40,13.90,-4.90 z" fill="black" stroke-width="0"/><path d="M65.60,-5.80 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l-0.10,0.00 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l0.00,-0.10 l-0.10,-0.20 l0.00,-0.10 l-0.10,0.00 l-0.10,-0.10 l0.00,-0.10 l-0.10,-0.10 l-0.10,0.00 l-0.10,-0.10 l-0.10,0.00 l-0.10,-0.10 l-0.10,0.00 l-0.20,0.00 l-0.10,-0.10 l-0.20,0.00 l-0.10,0.00 l-0.20,0.00 l-0.20,0.00 l-0.10,0.00 l-0.10,0.00 l-0.10,0.00 l-0.10,0.00 l-0.10,0.00 l-0.10,0.00 l-0.10,0.00 l-0.20,0.00 l-0.10,0.00 l-0.10,0.00 l-0.20,0.00 l-0.10,0.00 c-4.30,3.40,-10.00,4.40,-15.60,4.40 h-1.70 v3.90 h1.70 c2.80,0.00,7.00,-0.40,10.00,-1.40 v34.90 h-11.10 v3.90 c3.50,-0.30,11.80,-0.30,15.60,-0.30 c2.50,0.00,5.00,0.10,7.50,0.10 c2.10,0.00,5.70,0.00,7.80,0.20 v-3.90 h-10.80 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg-4" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><line stroke-width="3.98" x1="-21.40" x2="29.50" y1="-32.00" y2="-32.00"/><path d="M13.70,-13.00 l-0.20,0.10 l-0.20,0.20 l-0.10,0.10 l-0.10,0.20 l-0.20,0.10 l-0.10,0.20 l-0.10,0.20 l-0.10,0.10 l-0.10,0.20 l-0.10,0.10 l-0.10,0.20 l-0.10,0.20 l0.00,0.10 l-0.10,0.20 l-0.10,0.10 l0.00,0.20 l-0.10,0.20 l0.00,0.10 l0.00,0.20 l-0.10,0.10 l0.00,0.10 l0.00,0.20 l-0.10,0.10 l0.00,0.20 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 c0.00,4.40,3.40,6.30,6.10,6.30 c3.10,0.00,6.30,-2.10,6.30,-6.30 c0.00,-8.50,-11.50,-9.10,-17.30,-9.10 c-17.80,0.00,-25.20,11.40,-25.20,23.00 c0.00,13.20,9.40,22.70,24.70,22.70 c16.10,0.00,19.10,-11.60,19.10,-12.20 c0.00,-1.40,-1.40,-1.40,-2.40,-1.40 c-1.80,0.00,-1.90,0.20,-2.30,1.40 c-2.70,6.30,-7.40,8.20,-12.50,8.20 c-13.90,0.00,-13.90,-14.60,-13.90,-19.20 c0.00,-5.60,0.00,-18.50,12.90,-18.50 c3.50,0.00,5.20,0.20,6.50,0.60 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg-2" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><line stroke-width="3.98" x1="-27.80" x2="35.80" y1="-32.00" y2="-32.00"/><path d="M11.40,20.30 v7.80 l17.70,-0.60 v-4.70 c-6.20,0.00,-6.90,0.00,-6.90,-3.80 v-36.30 l-18.20,0.80 v4.70 c6.10,0.00,6.80,0.00,6.80,3.80 v19.00 c0.00,8.20,-5.00,13.50,-12.30,13.50 c-7.70,0.00,-8.00,-2.50,-8.00,-7.90 v-33.90 l-18.20,0.80 v4.70 c6.20,0.00,6.90,0.00,6.90,3.80 v23.20 c0.00,10.70,8.00,12.90,17.90,12.90 c2.60,0.00,9.80,0.00,14.30,-7.80 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg4" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M13.70,-13.00 l-0.20,0.10 l-0.20,0.20 l-0.10,0.10 l-0.10,0.20 l-0.20,0.10 l-0.10,0.20 l-0.10,0.20 l-0.10,0.10 l-0.10,0.20 l-0.10,0.10 l-0.10,0.20 l-0.10,0.20 l0.00,0.10 l-0.10,0.20 l-0.10,0.10 l0.00,0.20 l-0.10,0.20 l0.00,0.10 l0.00,0.20 l-0.10,0.10 l0.00,0.10 l0.00,0.20 l-0.10,0.10 l0.00,0.20 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 l0.00,0.10 c0.00,4.40,3.40,6.30,6.10,6.30 c3.10,0.00,6.30,-2.10,6.30,-6.30 c0.00,-8.50,-11.50,-9.10,-17.30,-9.10 c-17.80,0.00,-25.20,11.40,-25.20,23.00 c0.00,13.20,9.40,22.70,24.70,22.70 c16.10,0.00,19.10,-11.60,19.10,-12.20 c0.00,-1.40,-1.40,-1.40,-2.40,-1.40 c-1.80,0.00,-1.90,0.20,-2.30,1.40 c-2.70,6.30,-7.40,8.20,-12.50,8.20 c-13.90,0.00,-13.90,-14.60,-13.90,-19.20 c0.00,-5.60,0.00,-18.50,12.90,-18.50 c3.50,0.00,5.20,0.20,6.50,0.60 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg2101" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-38.60,20.30 v7.80 l17.70,-0.60 v-4.70 c-6.20,0.00,-6.90,0.00,-6.90,-3.80 v-36.30 l-18.20,0.80 v4.70 c6.10,0.00,6.80,0.00,6.80,3.80 v19.00 c0.00,8.20,-5.00,13.50,-12.30,13.50 c-7.70,0.00,-8.00,-2.50,-8.00,-7.90 v-33.90 l-18.20,0.80 v4.70 c6.20,0.00,6.90,0.00,6.90,3.80 v23.20 c0.00,10.70,8.00,12.90,17.90,12.90 c2.60,0.00,9.80,0.00,14.30,-7.80 z" fill="black" stroke-width="0"/><path d="M19.40,23.20 v4.90 l18.30,-0.60 v-4.70 c-6.20,0.00,-6.90,0.00,-6.90,-3.80 v-60.60 l-17.60,0.70 v4.70 c6.20,0.00,6.80,0.00,6.80,3.90 v19.50 c-4.90,-3.90,-10.10,-4.50,-13.40,-4.50 l1.00,3.60 c5.70,0.00,9.70,3.20,11.80,6.00 h0.00 v24.90 c-1.20,1.80,-5.40,7.30,-12.90,7.30 c-12.20,0.00,-12.20,-12.00,-12.20,-19.00 c0.00,-4.80,0.00,-10.20,2.60,-14.00 c2.90,-4.20,7.60,-5.20,10.70,-5.20 l-1.00,-3.60 c-14.50,0.00,-25.00,8.80,-25.00,22.80 c0.00,13.10,9.20,22.60,23.90,22.60 c6.10,0.00,10.90,-2.40,13.90,-4.90 z" fill="black" stroke-width="0"/><path d="M79.10,15.30 l0.00,-0.80 l0.00,-0.90 l0.00,-0.80 l-0.10,-1.00 l0.00,-0.90 l-0.10,-0.90 l-0.10,-1.00 l-0.10,-1.00 l-0.20,-1.00 l-0.20,-0.90 l-0.20,-1.00 l-0.20,-1.00 l-0.30,-1.00 l-0.40,-0.90 l-0.40,-1.00 l-0.40,-0.90 l-0.50,-0.90 l-0.50,-0.80 l-0.60,-0.90 l-0.70,-0.70 l-0.70,-0.80 l-0.80,-0.70 l-0.90,-0.70 l-0.40,-0.30 l-0.50,-0.30 l-0.50,-0.20 l-0.50,-0.30 l-0.50,-0.30 l-0.60,-0.20 l-0.60,-0.20 l-0.60,-0.20 l-0.60,-0.20 l-0.60,-0.20 l-0.70,-0.10 l-0.70,-0.20 l-0.70,-0.10 l-0.70,-0.10 l-0.80,0.00 l-0.70,-0.10 l-0.80,0.00 l-0.90,0.00 v3.20 c2.70,0.00,7.20,1.10,8.30,5.90 c0.80,3.30,0.80,9.10,0.80,13.50 c0.00,4.90,0.00,10.00,-0.70,13.90 c-1.00,5.70,-5.80,6.80,-8.40,6.80 h0.00 c-2.20,0.00,-4.30,-0.70,-6.00,-2.20 c-1.90,-1.60,-3.00,-2.70,-3.00,-18.50 c0.00,-4.80,0.00,-10.30,0.70,-13.70 c1.20,-4.50,5.40,-5.70,8.30,-5.70 v-3.20 c-17.80,0.00,-18.70,15.00,-18.70,23.50 c0.00,8.80,1.10,23.00,18.70,23.00 c17.70,0.00,18.80,-14.10,18.80,-23.00 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg5" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-10.90,-12.50 v-29.10 l-17.60,0.70 v4.70 c6.10,0.00,6.80,0.00,6.80,3.90 v59.80 h4.70 l4.90,-5.60 c0.80,0.80,5.70,6.20,14.60,6.20 l-0.90,-3.60 c-7.00,0.00,-10.90,-5.40,-11.90,-6.80 h0.00 v-25.10 c2.70,-3.50,7.50,-6.30,13.00,-6.30 c12.10,0.00,12.10,12.00,12.10,19.00 c0.00,4.70,0.00,10.10,-2.60,14.00 c-2.80,4.10,-7.40,5.20,-10.60,5.20 l0.90,3.60 c14.80,0.00,25.10,-9.00,25.10,-22.80 c0.00,-13.30,-9.40,-22.60,-23.80,-22.60 c-7.30,0.00,-12.30,2.80,-14.70,4.80 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg-5" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><line stroke-width="3.98" x1="-27.80" x2="35.80" y1="-56.90" y2="-56.90"/><path d="M-10.90,-12.50 v-29.10 l-17.60,0.70 v4.70 c6.10,0.00,6.80,0.00,6.80,3.90 v59.80 h4.70 l4.90,-5.60 c0.80,0.80,5.70,6.20,14.60,6.20 l-0.90,-3.60 c-7.00,0.00,-10.90,-5.40,-11.90,-6.80 h0.00 v-25.10 c2.70,-3.50,7.50,-6.30,13.00,-6.30 c12.10,0.00,12.10,12.00,12.10,19.00 c0.00,4.70,0.00,10.10,-2.60,14.00 c-2.80,4.10,-7.40,5.20,-10.60,5.20 l0.90,3.60 c14.80,0.00,25.10,-9.00,25.10,-22.80 c0.00,-13.30,-9.40,-22.60,-23.80,-22.60 c-7.30,0.00,-12.30,2.80,-14.70,4.80 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg15" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-22.90,-9.70 h16.70 c1.30,0.00,4.90,0.00,4.90,-3.30 c0.00,-2.40,-2.10,-2.40,-4.00,-2.40 h-27.90 c-2.00,0.00,-5.80,0.00,-10.20,4.70 c-3.30,3.50,-6.10,8.30,-6.10,8.90 c0.00,0.10,0.00,1.00,1.20,1.00 c0.80,0.00,1.00,-0.40,1.60,-1.20 c4.90,-7.70,10.60,-7.70,12.60,-7.70 h8.30 l-9.80,32.00 c-0.40,1.20,-1.00,3.30,-1.00,3.70 c0.00,1.10,0.70,2.70,2.90,2.70 c3.30,0.00,3.80,-2.80,4.10,-4.30 z" fill="black" stroke-width="0"/><path d="M49.70,-28.20 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.30,-0.10 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.20,0.00 l0.10,-0.10 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,-0.10 l0.00,-0.10 l0.10,0.00 l0.00,0.00 l0.00,-0.10 l0.10,0.00 l0.00,-0.10 l0.00,0.00 l0.10,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 l0.10,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 c0.00,-1.80,-1.60,-1.80,-2.80,-1.80 h-41.60 c-1.10,0.00,-2.80,0.00,-2.80,1.70 c0.00,1.80,1.60,1.80,2.80,1.80 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg113" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-38.90,44.70 l0.00,0.10 l0.00,0.00 l-0.10,0.10 l0.00,0.00 l0.00,0.10 l0.00,0.00 l0.00,0.10 l0.00,0.00 l0.00,0.10 l0.00,0.00 l0.00,0.10 l0.00,0.00 l-0.10,0.00 l0.00,0.10 l0.00,0.10 l0.00,0.00 l0.00,0.10 l0.00,0.10 l0.00,0.00 l0.00,0.10 l0.00,0.00 l0.00,0.10 l-0.10,0.00 l0.00,0.00 l0.00,0.10 l0.00,0.00 l0.00,0.10 l0.00,0.00 l0.00,0.00 l0.00,0.00 l0.00,0.10 l0.00,0.00 l0.00,0.00 l0.00,0.10 l0.00,0.00 l0.00,0.00 c0.00,1.50,1.10,2.70,2.80,2.70 c2.10,0.00,3.30,-1.80,3.50,-2.10 c0.50,-0.90,3.70,-14.20,6.30,-25.00 c2.00,4.00,5.20,6.70,9.90,6.70 l-0.10,-2.20 c-7.00,0.00,-8.60,-8.00,-8.60,-8.90 c0.00,-0.30,0.50,-2.30,0.80,-3.60 c2.80,-11.20,3.80,-14.80,6.00,-18.80 c4.30,-7.30,9.30,-9.40,12.40,-9.40 c3.60,0.00,6.90,2.80,6.90,9.70 c0.00,5.50,-2.90,16.70,-5.60,21.60 c-3.30,6.20,-8.10,9.40,-11.90,9.40 h0.00 l0.10,2.20 c11.60,0.00,24.50,-14.10,24.50,-28.90 c0.00,-10.60,-6.60,-16.20,-13.80,-16.20 c-9.70,0.00,-20.10,9.90,-23.20,22.10 z" fill="black" stroke-width="0"/><path d="M49.10,-34.70 l0.00,-0.80 l0.00,-0.90 l0.00,-0.80 l-0.10,-1.00 l0.00,-0.90 l-0.10,-0.90 l-0.10,-1.00 l-0.10,-1.00 l-0.20,-1.00 l-0.20,-0.90 l-0.20,-1.00 l-0.20,-1.00 l-0.30,-1.00 l-0.40,-0.90 l-0.40,-1.00 l-0.40,-0.90 l-0.50,-0.90 l-0.50,-0.80 l-0.60,-0.90 l-0.70,-0.70 l-0.70,-0.80 l-0.80,-0.70 l-0.90,-0.70 l-0.40,-0.30 l-0.50,-0.30 l-0.50,-0.20 l-0.50,-0.30 l-0.50,-0.30 l-0.60,-0.20 l-0.60,-0.20 l-0.60,-0.20 l-0.60,-0.20 l-0.60,-0.20 l-0.70,-0.10 l-0.70,-0.20 l-0.70,-0.10 l-0.70,-0.10 l-0.80,0.00 l-0.70,-0.10 l-0.80,0.00 l-0.90,0.00 v3.20 c2.70,0.00,7.20,1.10,8.30,5.90 c0.80,3.30,0.80,9.10,0.80,13.50 c0.00,4.90,0.00,10.00,-0.70,13.90 c-1.00,5.70,-5.80,6.80,-8.40,6.80 h0.00 c-2.20,0.00,-4.30,-0.70,-6.00,-2.20 c-1.90,-1.60,-3.00,-2.70,-3.00,-18.50 c0.00,-4.80,0.00,-10.30,0.70,-13.70 c1.20,-4.50,5.40,-5.70,8.30,-5.70 v-3.20 c-17.80,0.00,-18.70,15.00,-18.70,23.50 c0.00,8.80,1.10,23.00,18.70,23.00 c17.70,0.00,18.80,-14.10,18.80,-23.00 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg-16" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><line stroke-width="3.98" x1="-48.60" x2="6.90" y1="-30.60" y2="-30.60"/><path d="M-29.90,-15.40 l0.00,0.00 l0.00,-0.10 l0.00,0.00 l0.00,0.00 l0.00,0.00 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,0.00 l0.00,0.00 l-0.10,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 l-0.10,0.00 l0.00,-0.10 l0.00,0.00 l-0.10,-0.10 l0.00,0.00 l0.00,0.00 l-0.10,0.00 l0.00,-0.10 l0.00,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l0.00,-0.10 l-0.10,0.00 l0.00,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,-0.10 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,0.00 c-2.30,0.00,-9.60,0.80,-12.10,1.00 c-0.80,0.10,-1.90,0.20,-1.90,2.00 c0.00,1.20,0.90,1.20,2.40,1.20 c4.70,0.00,4.90,0.70,4.90,1.60 c0.00,0.70,-1.10,5.40,-1.80,8.10 l-6.10,24.40 c-0.40,1.50,-1.10,4.30,-1.10,4.50 c0.00,1.10,1.00,1.20,1.60,1.20 h1.40 c6.90,-1.20,17.80,-5.10,28.10,-14.70 c13.10,-12.20,15.80,-25.70,15.80,-26.60 c0.00,-1.70,-1.20,-2.70,-2.90,-2.70 c-0.80,0.00,-3.10,0.40,-3.90,3.30 c-6.30,22.60,-21.50,33.70,-32.90,37.40 z" fill="black" stroke-width="0"/><path d="M31.70,12.20 h13.00 c0.80,0.00,3.70,0.00,3.70,-2.80 c0.00,-1.90,-1.80,-1.90,-3.00,-1.90 h-22.00 c-2.00,0.00,-4.20,0.10,-7.90,3.40 c-2.00,1.80,-4.60,5.60,-4.60,6.10 c0.00,0.80,1.00,0.80,1.20,0.80 c0.80,0.00,0.90,-0.10,1.30,-0.70 c3.50,-4.90,7.80,-4.90,9.40,-4.90 h6.20 l-6.90,22.30 c-0.40,1.10,-0.40,1.20,-0.40,1.60 c0.00,1.90,1.80,2.20,2.30,2.20 c2.70,0.00,3.20,-2.50,3.40,-3.50 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg16" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-19.90,-15.40 l0.00,0.00 l0.00,-0.10 l0.00,0.00 l0.00,0.00 l0.00,0.00 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,0.00 l0.00,0.00 l-0.10,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 l-0.10,0.00 l0.00,-0.10 l0.00,0.00 l-0.10,-0.10 l0.00,0.00 l0.00,0.00 l-0.10,0.00 l0.00,-0.10 l0.00,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l0.00,-0.10 l-0.10,0.00 l0.00,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,-0.10 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,0.00 l0.00,0.00 l-0.10,0.00 c-2.30,0.00,-9.60,0.80,-12.10,1.00 c-0.80,0.10,-1.90,0.20,-1.90,2.00 c0.00,1.20,0.90,1.20,2.40,1.20 c4.70,0.00,4.90,0.70,4.90,1.60 c0.00,0.70,-1.10,5.40,-1.80,8.10 l-6.10,24.40 c-0.40,1.50,-1.10,4.30,-1.10,4.50 c0.00,1.10,1.00,1.20,1.60,1.20 h1.40 c6.90,-1.20,17.80,-5.10,28.10,-14.70 c13.10,-12.20,15.80,-25.70,15.80,-26.60 c0.00,-1.70,-1.20,-2.70,-2.90,-2.70 c-0.80,0.00,-3.10,0.40,-3.90,3.30 c-6.30,22.60,-21.50,33.70,-32.90,37.40 z" fill="black" stroke-width="0"/><path d="M31.70,12.20 h13.00 c0.80,0.00,3.70,0.00,3.70,-2.80 c0.00,-1.90,-1.80,-1.90,-3.00,-1.90 h-22.00 c-2.00,0.00,-4.20,0.10,-7.90,3.40 c-2.00,1.80,-4.60,5.60,-4.60,6.10 c0.00,0.80,1.00,0.80,1.20,0.80 c0.80,0.00,0.90,-0.10,1.30,-0.70 c3.50,-4.90,7.80,-4.90,9.40,-4.90 h6.20 l-6.90,22.30 c-0.40,1.10,-0.40,1.20,-0.40,1.60 c0.00,1.90,1.80,2.20,2.30,2.20 c2.70,0.00,3.20,-2.50,3.40,-3.50 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg-211" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-35.80,-9.70 h11.30 c-3.30,14.80,-4.20,19.10,-4.20,25.70 c0.00,1.50,0.00,4.20,0.80,7.60 c1.00,4.40,2.10,5.00,3.60,5.00 c1.90,0.00,4.10,-1.80,4.10,-3.80 c0.00,-0.60,0.00,-0.80,-0.70,-2.20 c-2.90,-7.20,-2.90,-13.60,-2.90,-16.40 c0.00,-5.30,0.70,-10.70,1.80,-15.90 h11.40 c1.30,0.00,4.90,0.00,4.90,-3.30 c0.00,-2.40,-2.10,-2.40,-4.00,-2.40 h-33.40 c-2.10,0.00,-5.90,0.00,-10.30,4.70 c-3.50,3.80,-6.10,8.40,-6.10,8.90 c0.00,0.10,0.00,1.00,1.20,1.00 c0.80,0.00,1.00,-0.40,1.60,-1.20 c4.90,-7.70,10.60,-7.70,12.60,-7.70 h5.70 c-3.20,12.10,-8.60,24.20,-12.70,33.20 c-0.80,1.50,-0.80,1.70,-0.80,2.40 c0.00,1.90,1.60,2.70,2.90,2.70 c2.90,0.00,3.80,-2.80,4.90,-6.50 c1.40,-4.60,1.40,-4.80,2.70,-9.80 z" fill="black" stroke-width="0"/><path d="M49.70,-28.20 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.30,-0.10 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.20,0.00 l0.10,-0.10 l0.10,0.00 l0.10,0.00 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,0.00 l0.10,-0.10 l0.10,-0.10 l0.00,-0.10 l0.10,0.00 l0.00,0.00 l0.00,-0.10 l0.10,0.00 l0.00,-0.10 l0.00,0.00 l0.10,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 l0.10,-0.10 l0.00,0.00 l0.00,-0.10 l0.00,-0.10 l0.00,0.00 l0.00,-0.10 c0.00,-1.80,-1.60,-1.80,-2.80,-1.80 h-41.60 c-1.10,0.00,-2.80,0.00,-2.80,1.70 c0.00,1.80,1.60,1.80,2.80,1.80 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg211" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-35.80,-9.70 h11.30 c-3.30,14.80,-4.20,19.10,-4.20,25.70 c0.00,1.50,0.00,4.20,0.80,7.60 c1.00,4.40,2.10,5.00,3.60,5.00 c1.90,0.00,4.10,-1.80,4.10,-3.80 c0.00,-0.60,0.00,-0.80,-0.70,-2.20 c-2.90,-7.20,-2.90,-13.60,-2.90,-16.40 c0.00,-5.30,0.70,-10.70,1.80,-15.90 h11.40 c1.30,0.00,4.90,0.00,4.90,-3.30 c0.00,-2.40,-2.10,-2.40,-4.00,-2.40 h-33.40 c-2.10,0.00,-5.90,0.00,-10.30,4.70 c-3.50,3.80,-6.10,8.40,-6.10,8.90 c0.00,0.10,0.00,1.00,1.20,1.00 c0.80,0.00,1.00,-0.40,1.60,-1.20 c4.90,-7.70,10.60,-7.70,12.60,-7.70 h5.70 c-3.20,12.10,-8.60,24.20,-12.70,33.20 c-0.80,1.50,-0.80,1.70,-0.80,2.40 c0.00,1.90,1.60,2.70,2.90,2.70 c2.90,0.00,3.80,-2.80,4.90,-6.50 c1.40,-4.60,1.40,-4.80,2.70,-9.80 z" fill="black" stroke-width="0"/><path d="M30.10,-28.20 h21.30 c0.90,0.00,2.60,0.00,2.60,-1.70 c0.00,-1.80,-1.60,-1.80,-2.60,-1.80 h-21.30 v-21.40 c0.00,-0.90,0.00,-2.60,-1.70,-2.60 c-1.70,0.00,-1.70,1.60,-1.70,2.60 v21.40 h-21.40 c-0.90,0.00,-2.60,0.00,-2.60,1.70 c0.00,1.80,1.60,1.80,2.60,1.80 h21.40 v21.40 c0.00,0.90,0.00,2.50,1.60,2.50 c1.80,0.00,1.80,-1.60,1.80,-2.50 z" fill="black" stroke-width="0"/></g>
<g fill="none" fill-opacity="1" fill-rule="even-odd" font-size-adjust="none" font-stretch="normal" font-style="normal" font-variant="normal" font-weight="normal" id="pdg2212" letter-spacing="normal" stroke="black" stroke-dasharray="none" stroke-dashoffset="0" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10.433" stroke-opacity="1" text-anchor="start" transform="scale(0.009223)" word-spacing="normal" xml:space="preserve"><path d="M-40.30,23.60 l0.40,0.30 l0.40,0.40 l0.40,0.20 l0.40,0.30 l0.40,0.30 l0.40,0.20 l0.40,0.30 l0.40,0.20 l0.40,0.20 l0.50,0.20 l0.40,0.20 l0.40,0.20 l0.40,0.10 l0.40,0.20 l0.40,0.10 l0.40,0.20 l0.40,0.10 l0.40,0.10 l0.80,0.20 l0.80,0.20 l0.80,0.10 l0.80,0.10 l0.70,0.00 l0.80,0.10 l0.80,0.00 l-1.10,-3.60 c-1.40,0.00,-6.10,0.00,-10.60,-5.40 c-1.10,-1.30,-1.10,-1.40,-1.10,-3.20 v-21.20 c0.00,-1.90,0.10,-2.00,1.50,-3.40 c4.00,-4.00,9.20,-4.70,11.40,-4.70 c6.60,0.00,12.20,6.10,12.20,18.70 c0.00,14.00,-7.00,19.20,-13.40,19.20 l1.10,3.60 c14.90,0.00,25.10,-9.00,25.10,-22.80 c0.00,-13.30,-9.10,-22.60,-23.40,-22.60 c-7.50,0.00,-12.80,3.00,-15.10,4.80 v-4.80 l-17.60,0.80 v4.70 c6.10,0.00,6.80,0.00,6.80,3.80 v50.20 h-6.80 v4.60 h25.10 v-4.60 h-6.90 z" fill="black" stroke-width="0"/><path d="M40.10,-28.20 h21.30 c0.90,0.00,2.60,0.00,2.60,-1.70 c0.00,-1.80,-1.60,-1.80,-2.60,-1.80 h-21.30 v-21.40 c0.00,-0.90,0.00,-2.60,-1.70,-2.60 c-1.70,0.00,-1.70,1.60,-1.70,2.60 v21.40 h-21.40 c-0.90,0.00,-2.60,0.00,-2.60,1.70 c0.00,1.80,1.60,1.80,2.60,1.80 h21.40 v21.40 c0.00,0.90,0.00,2.50,1.60,2.50 c1.80,0.00,1.80,-1.60,1.80,-2.50 z" fill="black" stroke-width="0"/></g>
</defs>
<g id="everything">
<g fill="red" mcviz:r="P29_V24_V1039" stroke="red" stroke-linecap="round" stroke-width="0.203065606698" transform="scale(1.000)"><path d="M14.06 22.03C14.48 22.03 16.75 22.03 17.18 22.03" fill="none"/><path d="M15.86 22.03L15.38 22.17C15.43 22.10 15.43 21.96 15.38 21.88Z" stroke="none"/></g>
<use mcviz:r="P29_V24_V1039" x="15.638" y="21.474" transform="scale(1.000)" xlink:href="#pdg6" />
<g fill="blue" mcviz:r="P236_V205_V1040" stroke="blue" stroke-linecap="round" stroke-width="0.209570805296" transform="scale(1.000)"><path d="M53.93 36.57C54.56 36.57 59.61 36.57 60.23 36.57" fill="none"/><path d="M57.32 36.57L56.84 36.71C56.89 36.64 56.89 36.50 56.84 36.43Z" stroke="none"/></g>
<use mcviz:r="P236_V205_V1040" x="57.061" y="36.085" transform="scale(1.000)" xlink:href="#pdg-6" />
<g fill="magenta" mcviz:r="P1258_V1039_V1041" stroke="magenta" stroke-linecap="round" stroke-width="0.174843385917" transform="scale(1.000)"><path d="M17.30 22.04 C17.30 22.04 17.29 22.09 17.49 22.15 C17.69 22.20 17.71 22.11 17.91 22.16 C18.12 22.21 18.09 22.30 18.30 22.34 C18.50 22.39 18.52 22.29 18.72 22.33 C18.92 22.37 18.90 22.47 19.11 22.51 C19.31 22.55 19.33 22.45 19.53 22.49 C19.73 22.52 19.72 22.62 19.92 22.65 C20.13 22.69 20.14 22.59 20.35 22.63 C20.55 22.66 20.53 22.76 20.74 22.79 C20.94 22.82 20.96 22.73 21.16 22.76 C21.37 22.79 21.36 22.84 21.36 22.84" fill="none"/></g>
<use mcviz:r="P1258_V1039_V1041" x="19.367" y="21.814" transform="scale(1.000)" xlink:href="#pdg24" />
<g fill="blue" mcviz:r="P1262_V1041_V1042" stroke="blue" stroke-linecap="round" stroke-width="0.128550981188" transform="scale(1.000)"><path d="M21.45 22.90 C21.52 23.11 21.83 23.85 22.33 24.22 C23.27 24.94 24.80 25.11 25.14 25.13" fill="none"/><path d="M23.14 24.68L22.64 24.60C22.72 24.56 22.78 24.43 22.76 24.34Z" stroke="none"/></g>
<use mcviz:r="P1262_V1041_V1042" x="23.278" y="23.765" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="blue" mcviz:r="P1264_V1042_V1044" stroke="blue" stroke-linecap="round" stroke-width="0.0924877617776" transform="scale(1.000)"><path d="M25.23 25.19 C25.35 25.41 25.82 26.20 26.45 26.51 C28.43 27.50 31.32 27.12 31.78 27.05" fill="none"/><path d="M28.40 27.09L27.91 27.15C27.97 27.09 27.99 26.94 27.95 26.86Z" stroke="none"/></g>
<use mcviz:r="P1264_V1042_V1044" x="28.181" y="26.057" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="green" mcviz:r="P1268_V1044_V1052" stroke="green" stroke-linecap="round" stroke-width="0.0715723556079" transform="scale(1.000)"><path d="M31.91 27.05 C31.91 27.05 31.79 27.35 32.58 27.43 C33.37 27.50 33.25 26.86 32.99 26.84 C32.73 26.81 32.49 27.42 33.28 27.49 C34.07 27.57 33.96 26.93 33.69 26.91 C33.43 26.88 33.19 27.49 33.98 27.56 C34.77 27.64 34.66 27.00 34.39 26.97 C34.13 26.95 33.90 27.55 34.69 27.63 C35.48 27.70 35.36 27.07 35.10 27.04 C34.83 27.02 34.60 27.62 35.39 27.70 C36.18 27.77 36.06 27.13 35.80 27.11 C35.54 27.08 35.30 27.69 36.09 27.76 C36.88 27.84 36.76 27.20 36.50 27.18 C36.24 27.15 36.00 27.76 36.79 27.83 C37.58 27.91 37.47 27.27 37.20 27.24 C36.94 27.22 36.71 27.82 37.50 27.90 C38.29 27.97 38.17 27.34 37.91 27.31 C37.64 27.29 37.41 27.89 38.20 27.97 C38.99 28.04 38.87 27.40 38.61 27.38 C38.35 27.35 38.11 27.96 38.90 28.03 C39.69 28.11 39.57 27.47 39.31 27.45 C39.05 27.42 38.81 28.03 39.60 28.10 C40.39 28.18 40.28 27.54 40.01 27.51 C39.75 27.49 39.51 28.09 40.30 28.17 C41.09 28.24 40.98 27.61 40.72 27.58 C40.45 27.56 40.22 28.16 41.01 28.24 C41.80 28.31 41.74 27.99 41.74 27.99" fill="none"/></g>
<g fill="green" mcviz:r="P1286_V1056_V1052" stroke="green" stroke-linecap="round" stroke-width="0.0593799646721" transform="scale(1.000)"><path d="M37.38 27.05 C37.38 27.05 37.24 27.34 37.95 27.47 C38.66 27.59 38.61 26.95 38.37 26.91 C38.14 26.87 37.87 27.45 38.58 27.58 C39.28 27.71 39.24 27.07 39.00 27.02 C38.77 26.98 38.50 27.56 39.20 27.69 C39.91 27.83 39.87 27.19 39.63 27.14 C39.40 27.10 39.12 27.68 39.83 27.81 C40.53 27.95 40.50 27.31 40.26 27.26 C40.03 27.22 39.75 27.79 40.45 27.94 C41.15 28.09 41.12 27.45 40.89 27.40 C40.66 27.35 40.37 27.91 41.07 28.07 C41.77 28.23 41.76 27.92 41.76 27.92" fill="none"/></g>
<g fill="blue" mcviz:r="P1267_V1044_V1056" stroke="blue" stroke-linecap="round" stroke-width="0.0820250820583" transform="scale(1.000)"><path d="M31.91 27.04C32.48 27.04 36.68 27.04 37.25 27.04" fill="none"/><path d="M34.82 27.04L34.34 27.19C34.38 27.11 34.38 26.97 34.34 26.90Z" stroke="none"/></g>
<use mcviz:r="P1267_V1044_V1056" x="34.320" y="26.585" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="green" mcviz:r="P1300_V1052_V1068" stroke="green" stroke-linecap="round" stroke-width="0.0440614108205" transform="scale(1.000)"><path d="M42.74 28.14 C42.74 28.14 42.59 28.43 43.34 28.58 C44.09 28.73 44.04 28.09 43.80 28.04 C43.55 27.99 43.26 28.57 44.00 28.72 C44.75 28.87 44.71 28.22 44.46 28.17 C44.21 28.12 43.92 28.70 44.67 28.85 C45.41 29.00 45.37 28.36 45.12 28.31 C44.87 28.26 44.59 28.83 45.33 28.99 C46.08 29.14 46.04 28.49 45.79 28.44 C45.54 28.39 45.25 28.97 46.00 29.12 C46.74 29.27 46.70 28.63 46.45 28.58 C46.20 28.53 45.91 29.10 46.66 29.26 C47.41 29.41 47.39 29.08 47.39 29.08" fill="none"/></g>
<g fill="red" mcviz:r="P1263_V1041_V1070" stroke="red" stroke-linecap="round" stroke-width="0.163141628493" transform="scale(1.000)"><path d="M21.49 22.85 C21.86 22.85 23.70 22.85 25.20 22.85 C25.20 22.85 25.20 22.85 47.45 22.85 C52.89 22.85 59.53 24.31 60.24 24.47" fill="none"/><path d="M41.17 22.85L40.69 22.99C40.73 22.92 40.73 22.77 40.69 22.70Z" stroke="none"/></g>
<use mcviz:r="P1263_V1041_V1070" x="39.987" y="22.207" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="blue" mcviz:r="P1285_V1056_V1086" stroke="blue" stroke-linecap="round" stroke-width="0.0630451368654" transform="scale(1.000)"><path d="M37.38 27.03 C37.80 26.98 40.24 26.71 42.24 26.71 C42.24 26.71 42.24 26.71 53.87 26.71 C56.58 26.71 59.76 28.03 60.24 28.24" fill="none"/><path d="M49.15 26.71L48.67 26.85C48.72 26.78 48.72 26.64 48.67 26.57Z" stroke="none"/></g>
<use mcviz:r="P1285_V1056_V1086" x="47.417" y="26.251" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="magenta" mcviz:r="P1260_V1040_V1092" stroke="magenta" stroke-linecap="round" stroke-width="0.202333356768" transform="scale(1.000)"><path d="M60.34 36.53 C60.34 36.53 60.37 36.56 60.50 36.41 C60.64 36.26 60.57 36.19 60.71 36.05 C60.85 35.90 60.92 35.97 61.06 35.83 C61.20 35.69 61.14 35.62 61.28 35.48 C61.43 35.34 61.50 35.41 61.65 35.28 C61.80 35.15 61.74 35.08 61.89 34.95 C62.05 34.82 62.11 34.90 62.27 34.78 C62.43 34.65 62.37 34.58 62.54 34.46 C62.70 34.35 62.75 34.42 62.92 34.32 C63.09 34.21 63.05 34.13 63.22 34.03 C63.40 33.93 63.44 34.02 63.62 33.93 C63.80 33.84 63.77 33.75 63.95 33.68 C64.14 33.61 64.17 33.73 64.37 33.70 C64.57 33.67 64.56 33.58 64.76 33.56 C64.96 33.53 64.97 33.63 65.17 33.61 C65.37 33.59 65.36 33.50 65.56 33.48 C65.76 33.46 65.77 33.55 65.97 33.54 C66.17 33.52 66.16 33.42 66.36 33.41 C66.56 33.39 66.57 33.49 66.77 33.47 C66.97 33.45 66.97 33.36 67.17 33.34 C67.37 33.33 67.37 33.42 67.58 33.41 C67.78 33.39 67.77 33.30 67.97 33.28 C68.17 33.27 68.18 33.36 68.38 33.35 C68.58 33.33 68.57 33.24 68.77 33.22 C68.97 33.21 68.98 33.30 69.18 33.29 C69.38 33.27 69.37 33.18 69.58 33.16 C69.78 33.15 69.78 33.24 69.98 33.23 C70.18 33.22 70.18 33.12 70.38 33.11 C70.58 33.09 70.59 33.19 70.79 33.17 C70.99 33.16 70.98 33.06 71.18 33.05 C71.38 33.04 71.39 33.13 71.59 33.12 C71.79 33.11 71.78 33.01 71.98 33.00 C72.19 32.98 72.19 33.08 72.39 33.07 C72.59 33.05 72.59 32.96 72.79 32.94 C72.99 32.93 72.99 33.03 73.20 33.01 C73.40 33.00 73.39 32.90 73.59 32.89 C73.79 32.88 73.80 32.97 74.00 32.96 C74.20 32.95 74.19 32.85 74.39 32.84 C74.60 32.83 74.60 32.92 74.80 32.91 C75.00 32.90 75.00 32.80 75.20 32.79 C75.40 32.78 75.40 32.82 75.40 32.82" fill="none"/></g>
<use mcviz:r="P1260_V1040_V1092" x="68.263" y="32.496" transform="scale(1.000)" xlink:href="#pdg-24" />
<g fill="red" mcviz:r="P865_V711_V1107" stroke="red" stroke-linecap="round" stroke-width="0.0125488451089" transform="scale(1.000)"><path d="M10.79 40.02C11.20 39.88 13.52 39.12 13.93 38.98" fill="none"/><path d="M12.59 39.42L12.18 39.71C12.20 39.63 12.16 39.49 12.09 39.44Z" stroke="none"/></g>
<use mcviz:r="P865_V711_V1107" x="12.371" y="38.708" transform="scale(1.000)" xlink:href="#pdg1" />
<g fill="green" mcviz:r="P1105_V4_V1107" stroke="green" stroke-linecap="round" stroke-width="0.0200969416846" transform="scale(1.000)"><path d="M9.61 37.66 C9.61 37.66 9.56 37.96 10.24 37.91 C10.92 37.85 10.73 37.25 10.50 37.26 C10.27 37.27 10.14 37.89 10.82 37.88 C11.51 37.87 11.36 37.26 11.13 37.25 C10.90 37.25 10.72 37.85 11.41 37.89 C12.09 37.93 11.99 37.32 11.76 37.30 C11.54 37.27 11.30 37.84 11.98 37.95 C12.65 38.07 12.62 37.45 12.40 37.40 C12.17 37.35 11.88 37.88 12.53 38.08 C13.18 38.28 13.23 37.67 13.02 37.59 C12.81 37.51 12.43 37.97 13.04 38.28 C13.65 38.59 13.81 38.09 13.64 37.94 C13.47 37.79 12.97 38.07 13.40 38.59 C13.83 39.12 13.97 38.91 13.97 38.91" fill="none"/></g>
<g fill="red" mcviz:r="P1304_V1068_V1116" stroke="red" stroke-linecap="round" stroke-width="0.0201719897782" transform="scale(1.000)"><path d="M47.50 29.14 C47.72 29.33 48.71 30.16 49.67 30.54 C51.26 31.17 53.40 31.27 53.80 31.29" fill="none"/><path d="M50.67 30.86L50.17 30.87C50.23 30.81 50.27 30.67 50.24 30.59Z" stroke="none"/></g>
<use mcviz:r="P1304_V1068_V1116" x="50.663" y="30.014" transform="scale(1.000)" xlink:href="#pdg1" />
<g fill="green" mcviz:r="P1326_V1052_V1116" stroke="green" stroke-linecap="round" stroke-width="0.0151618419088" transform="scale(1.000)"><path d="M42.49 28.48 C42.49 28.48 42.16 28.64 42.68 29.25 C43.19 29.87 43.57 29.29 43.38 29.10 C43.19 28.91 42.60 29.30 43.22 29.80 C43.85 30.31 44.10 29.64 43.87 29.50 C43.64 29.36 43.17 29.83 43.87 30.22 C44.58 30.60 44.72 29.95 44.48 29.83 C44.24 29.71 43.80 30.22 44.54 30.54 C45.27 30.87 45.36 30.21 45.11 30.11 C44.86 30.01 44.46 30.54 45.22 30.82 C45.97 31.10 46.02 30.43 45.76 30.35 C45.51 30.26 45.14 30.82 45.92 31.05 C46.69 31.28 46.69 30.62 46.43 30.55 C46.17 30.48 45.84 31.05 46.62 31.24 C47.40 31.43 47.37 30.77 47.11 30.71 C46.85 30.66 46.55 31.24 47.34 31.40 C48.13 31.55 48.06 30.89 47.80 30.85 C47.53 30.80 47.26 31.40 48.05 31.52 C48.85 31.64 48.76 30.98 48.49 30.95 C48.23 30.91 47.97 31.52 48.77 31.61 C49.57 31.70 49.46 31.05 49.19 31.03 C48.93 31.00 48.69 31.62 49.50 31.68 C50.30 31.74 50.16 31.10 49.90 31.08 C49.63 31.06 49.42 31.69 50.22 31.72 C51.02 31.76 50.87 31.12 50.60 31.11 C50.33 31.10 50.14 31.73 50.95 31.74 C51.75 31.75 51.57 31.12 51.31 31.12 C51.04 31.12 50.86 31.75 51.67 31.74 C52.47 31.73 52.28 31.10 52.01 31.11 C51.74 31.12 51.59 31.76 52.39 31.72 C53.20 31.68 52.99 31.06 52.72 31.08 C52.45 31.09 52.31 31.74 53.12 31.68 C53.92 31.62 53.81 31.30 53.81 31.30" fill="none"/></g>
<g fill="red" mcviz:r="P1364_V1116_V1117" stroke="red" stroke-linecap="round" stroke-width="0.0241956571596" transform="scale(1.000)"><path d="M53.93 31.29C54.56 31.32 59.61 31.54 60.23 31.57" fill="none"/><path d="M57.32 31.44L56.84 31.56C56.89 31.49 56.89 31.35 56.85 31.28Z" stroke="none"/></g>
<use mcviz:r="P1364_V1116_V1117" x="57.093" y="30.861" transform="scale(1.000)" xlink:href="#pdg1" />
<g fill="green" mcviz:r="P1325_V1052_V1117" stroke="green" stroke-linecap="round" stroke-width="0.0308546701173" transform="scale(1.000)"><path d="M42.40 28.52 C42.40 28.52 42.03 28.59 42.42 29.36 C42.80 30.14 43.29 29.65 43.15 29.40 C43.00 29.16 42.33 29.36 42.83 30.06 C43.33 30.77 43.75 30.19 43.56 29.98 C43.37 29.76 42.74 30.13 43.39 30.69 C44.05 31.25 44.31 30.59 44.08 30.42 C43.84 30.26 43.32 30.76 44.09 31.16 C44.85 31.55 44.95 30.82 44.68 30.73 C44.41 30.64 44.05 31.28 44.90 31.43 C45.75 31.57 45.65 30.88 45.36 30.86 C45.08 30.83 44.83 31.44 45.69 31.51 C46.55 31.59 46.42 30.96 46.13 30.93 C45.85 30.90 45.57 31.46 46.43 31.60 C47.28 31.74 47.19 31.09 46.90 31.05 C46.62 31.00 46.34 31.60 47.19 31.72 C48.04 31.84 47.94 31.19 47.65 31.15 C47.37 31.11 47.10 31.72 47.96 31.82 C48.81 31.92 48.69 31.27 48.41 31.24 C48.12 31.21 47.87 31.82 48.73 31.90 C49.58 31.98 49.45 31.34 49.16 31.31 C48.88 31.29 48.63 31.90 49.49 31.97 C50.35 32.04 50.21 31.39 49.92 31.37 C49.64 31.35 49.40 31.97 50.26 32.02 C51.12 32.08 50.97 31.44 50.68 31.42 C50.40 31.41 50.17 32.02 51.03 32.07 C51.89 32.11 51.73 31.47 51.44 31.46 C51.16 31.45 50.94 32.07 51.80 32.10 C52.66 32.13 52.49 31.49 52.21 31.49 C51.92 31.48 51.71 32.10 52.57 32.12 C53.43 32.14 53.26 31.51 52.97 31.50 C52.68 31.50 52.48 32.12 53.34 32.13 C54.20 32.14 54.02 31.51 53.73 31.51 C53.44 31.51 53.25 32.14 54.11 32.14 C54.97 32.14 54.78 31.51 54.49 31.51 C54.21 31.51 54.02 32.14 54.88 32.13 C55.74 32.12 55.54 31.50 55.26 31.50 C54.97 31.51 54.79 32.14 55.65 32.12 C56.51 32.10 56.31 31.48 56.02 31.49 C55.73 31.50 55.56 32.13 56.42 32.10 C57.28 32.07 57.07 31.45 56.78 31.46 C56.50 31.47 56.33 32.11 57.19 32.07 C58.05 32.04 57.83 31.42 57.54 31.43 C57.26 31.45 57.10 32.08 57.96 32.04 C58.82 32.00 58.59 31.38 58.31 31.40 C58.02 31.41 57.87 32.05 58.73 32.00 C59.59 31.95 59.36 31.33 59.07 31.35 C58.78 31.37 58.63 32.01 59.49 31.95 C60.35 31.89 60.23 31.58 60.23 31.58" fill="none"/></g>
<g fill="green" mcviz:r="P1329_V1052_V1119" stroke="green" stroke-linecap="round" stroke-width="0.0279431047349" transform="scale(1.000)"><path d="M42.75 28.03 C42.75 28.03 42.66 28.34 43.49 28.32 C44.32 28.29 44.12 27.68 43.84 27.68 C43.57 27.69 43.40 28.32 44.23 28.30 C45.06 28.27 44.86 27.65 44.58 27.66 C44.30 27.67 44.14 28.30 44.97 28.28 C45.79 28.25 45.59 27.63 45.32 27.64 C45.04 27.65 44.87 28.28 45.70 28.25 C46.53 28.23 46.33 27.61 46.05 27.62 C45.78 27.63 45.61 28.26 46.44 28.23 C47.27 28.21 47.07 27.59 46.79 27.60 C46.51 27.61 46.35 28.24 47.18 28.21 C48.01 28.19 47.80 27.57 47.53 27.58 C47.25 27.59 47.08 28.22 47.91 28.19 C48.74 28.17 48.54 27.55 48.26 27.56 C47.99 27.57 47.82 28.19 48.65 28.17 C49.48 28.15 49.28 27.53 49.00 27.54 C48.73 27.54 48.56 28.17 49.39 28.15 C50.22 28.13 50.01 27.51 49.74 27.51 C49.46 27.52 49.30 28.15 50.13 28.13 C50.95 28.10 50.75 27.49 50.48 27.49 C50.20 27.50 50.03 28.13 50.86 28.11 C51.69 28.08 51.49 27.46 51.21 27.47 C50.94 27.48 50.77 28.11 51.60 28.09 C52.43 28.06 52.23 27.44 51.95 27.45 C51.67 27.46 51.51 28.09 52.34 28.06 C53.17 28.04 52.96 27.42 52.69 27.43 C52.41 27.44 52.24 28.07 53.07 28.04 C53.90 28.02 53.80 27.71 53.80 27.71" fill="none"/></g>
<g fill="blue" mcviz:r="P1303_V1068_V1119" stroke="blue" stroke-linecap="round" stroke-width="0.0407644972465" transform="scale(1.000)"><path d="M47.52 29.11 C47.91 29.18 50.03 29.55 51.65 29.08 C52.63 28.80 53.61 27.95 53.82 27.75" fill="none"/><path d="M51.11 29.21L50.65 29.42C50.69 29.34 50.67 29.20 50.61 29.13Z" stroke="none"/></g>
<use mcviz:r="P1303_V1068_V1119" x="50.626" y="28.626" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="red" mcviz:r="P593_V498_V1123" stroke="red" stroke-linecap="round" stroke-width="0.0204309679338" transform="scale(1.000)"><path d="M53.92 11.75 C54.17 11.60 55.23 11.00 56.10 10.54 C56.97 10.09 57.33 10.19 58.08 9.56 C58.67 9.05 60.05 6.84 60.27 6.48" fill="none"/><path d="M57.91 9.70L57.58 10.09C57.59 10.00 57.51 9.88 57.43 9.84Z" stroke="none"/></g>
<use mcviz:r="P593_V498_V1123" x="57.084" y="8.915" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="blue" mcviz:r="P798_V667_V1123" stroke="blue" stroke-linecap="round" stroke-width="0.0497409603294" transform="scale(1.000)"><path d="M53.93 6.43C54.56 6.43 59.61 6.43 60.23 6.43" fill="none"/><path d="M57.32 6.43L56.84 6.57C56.89 6.50 56.89 6.36 56.84 6.29Z" stroke="none"/></g>
<use mcviz:r="P798_V667_V1123" x="57.056" y="5.974" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="red" mcviz:r="P994_V798_V1126" stroke="red" stroke-linecap="round" stroke-width="0.0219350687081" transform="scale(1.000)"><path d="M60.33 12.94 C60.68 13.45 63.69 17.79 63.98 17.95 C64.81 18.39 71.62 17.82 72.48 18.21 C73.77 18.79 74.77 20.23 75.22 20.95" fill="none"/><path d="M67.33 18.11L66.85 18.26C66.90 18.19 66.90 18.05 66.85 17.98Z" stroke="none"/></g>
<use mcviz:r="P994_V798_V1126" x="68.223" y="17.304" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="blue" mcviz:r="P1255_V824_V1126" stroke="blue" stroke-linecap="round" stroke-width="0.0450025084046" transform="scale(1.000)"><path d="M7.45 11.85 C7.46 12.78 7.58 19.04 9.12 19.04 C9.12 19.04 9.12 19.04 19.34 19.04 C26.10 19.04 27.60 21.43 34.35 21.43 C34.35 21.43 34.35 21.43 57.09 21.43 C64.18 21.43 72.82 21.40 74.97 21.39" fill="none"/><path d="M38.31 21.43L37.83 21.57C37.88 21.50 37.88 21.36 37.83 21.29Z" stroke="none"/></g>
<use mcviz:r="P1255_V824_V1126" x="28.221" y="19.568" transform="scale(1.000)" xlink:href="#pdg2103" />
<g fill="red" mcviz:r="P312_V269_V1130" stroke="red" stroke-linecap="round" stroke-width="0.0412577104486" transform="scale(1.000)"><path d="M60.36 14.56 C61.06 14.57 67.37 14.67 72.48 14.86 C73.35 14.89 74.37 14.95 74.96 14.98" fill="none"/><path d="M67.90 14.72L67.42 14.85C67.47 14.78 67.47 14.63 67.43 14.56Z" stroke="none"/></g>
<use mcviz:r="P312_V269_V1130" x="68.232" y="14.111" transform="scale(1.000)" xlink:href="#pdg1" />
<g fill="green" mcviz:r="P602_V504_V1130" stroke="green" stroke-linecap="round" stroke-width="0.052306151307" transform="scale(1.000)"><path d="M60.36 16.13 C60.36 16.13 60.36 16.45 61.15 16.20 C61.94 15.95 61.59 15.42 61.32 15.50 C61.06 15.57 61.05 16.22 61.85 15.99 C62.65 15.77 62.31 15.22 62.04 15.29 C61.77 15.36 61.75 16.01 62.55 15.81 C63.36 15.61 63.04 15.05 62.77 15.12 C62.50 15.18 62.45 15.81 63.26 15.65 C64.07 15.48 63.78 14.92 63.51 14.97 C63.23 15.01 63.15 15.64 63.97 15.53 C64.79 15.41 64.52 14.83 64.25 14.86 C63.98 14.89 63.87 15.53 64.69 15.44 C65.51 15.34 65.26 14.75 64.99 14.78 C64.71 14.80 64.59 15.44 65.42 15.36 C66.24 15.28 66.01 14.68 65.73 14.71 C65.45 14.73 65.32 15.36 66.15 15.30 C66.97 15.24 66.75 14.63 66.47 14.65 C66.19 14.67 66.05 15.30 66.88 15.25 C67.70 15.20 67.49 14.60 67.21 14.61 C66.93 14.62 66.78 15.25 67.61 15.21 C68.44 15.18 68.23 14.57 67.95 14.58 C67.68 14.59 67.51 15.21 68.34 15.19 C69.17 15.16 68.97 14.55 68.69 14.55 C68.42 14.56 68.25 15.19 69.07 15.17 C69.90 15.15 69.71 14.54 69.43 14.54 C69.16 14.54 68.98 15.17 69.81 15.16 C70.64 15.15 70.45 14.53 70.17 14.53 C69.90 14.53 69.71 15.16 70.54 15.16 C71.37 15.16 71.19 14.54 70.91 14.54 C70.64 14.53 70.45 15.15 71.28 15.16 C72.11 15.17 71.93 14.55 71.65 14.54 C71.38 14.54 71.18 15.16 72.01 15.17 C72.84 15.19 72.67 14.57 72.39 14.56 C72.12 14.55 71.92 15.17 72.75 15.19 C73.57 15.22 73.41 14.59 73.13 14.58 C72.86 14.57 72.65 15.19 73.48 15.22 C74.31 15.25 74.15 14.62 73.87 14.61 C73.60 14.60 73.38 15.21 74.21 15.25 C75.04 15.29 74.96 14.98 74.96 14.98" fill="none"/></g>
<g fill="blue" mcviz:r="P601_V504_V1130" stroke="blue" stroke-linecap="round" stroke-width="0.0835651134667" transform="scale(1.000)"><path d="M60.33 16.20 C60.57 16.55 62.11 18.68 63.98 19.39 C64.86 19.72 71.64 19.83 72.48 19.39 C74.07 18.55 74.97 16.44 75.31 15.49" fill="none"/><path d="M68.48 19.68L68.00 19.82C68.05 19.75 68.05 19.61 68.00 19.53Z" stroke="none"/></g>
<use mcviz:r="P601_V504_V1130" x="68.192" y="18.817" transform="scale(1.000)" xlink:href="#pdg-4" />
<g fill="red" mcviz:r="P828_V687_V1135" stroke="red" stroke-linecap="round" stroke-width="0.0417592325167" transform="scale(1.000)"><path d="M60.33 24.90 C60.62 25.40 62.86 29.16 63.98 29.76 C65.64 30.67 70.82 29.42 72.48 30.32 C73.94 31.12 74.89 32.98 75.28 33.85" fill="none"/><path d="M67.70 30.07L67.23 30.23C67.27 30.16 67.27 30.02 67.22 29.95Z" stroke="none"/></g>
<use mcviz:r="P828_V687_V1135" x="68.223" y="29.124" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="green" mcviz:r="P1384_V7_V1135" stroke="green" stroke-linecap="round" stroke-width="0.0424240470316" transform="scale(1.000)"><path d="M37.81 32.28 C37.81 32.28 37.72 32.59 38.59 32.59 C39.46 32.59 39.26 31.97 38.97 31.97 C38.68 31.97 38.49 32.59 39.36 32.59 C40.23 32.59 40.04 31.97 39.75 31.97 C39.46 31.97 39.26 32.59 40.13 32.59 C41.00 32.59 40.81 31.97 40.52 31.97 C40.23 31.97 40.04 32.59 40.90 32.59 C41.77 32.59 41.58 31.97 41.29 31.97 C41.00 31.97 40.81 32.59 41.68 32.59 C42.55 32.59 42.35 31.97 42.06 31.97 C41.77 31.97 41.58 32.59 42.45 32.59 C43.32 32.59 43.13 31.97 42.84 31.97 C42.55 31.97 42.35 32.59 43.22 32.59 C44.09 32.59 43.90 31.97 43.61 31.97 C43.32 31.97 43.13 32.59 44.00 32.59 C44.87 32.59 44.67 31.97 44.38 31.97 C44.09 31.97 43.90 32.59 44.77 32.59 C45.64 32.59 45.45 31.97 45.16 31.97 C44.87 31.97 44.67 32.59 45.54 32.59 C46.41 32.59 46.22 31.97 45.93 31.97 C45.64 31.97 45.45 32.59 46.31 32.59 C47.18 32.59 46.99 31.97 46.70 31.97 C46.41 31.97 46.22 32.59 47.09 32.59 C47.96 32.59 47.76 31.97 47.47 31.97 C47.18 31.97 46.99 32.59 47.86 32.59 C48.73 32.59 48.54 31.97 48.25 31.97 C47.96 31.97 47.76 32.59 48.63 32.59 C49.50 32.59 49.31 31.97 49.02 31.97 C48.73 31.97 48.54 32.59 49.41 32.59 C50.28 32.59 50.08 31.97 49.79 31.97 C49.50 31.97 49.31 32.59 50.18 32.59 C51.05 32.59 50.86 31.97 50.57 31.97 C50.28 31.97 50.09 32.60 50.96 32.59 C51.83 32.57 51.62 31.95 51.33 31.96 C51.04 31.96 50.86 32.59 51.73 32.57 C52.60 32.55 52.39 31.93 52.10 31.94 C51.81 31.94 51.64 32.57 52.51 32.55 C53.38 32.52 53.16 31.90 52.87 31.91 C52.58 31.92 52.41 32.55 53.28 32.53 C54.15 32.50 53.94 31.88 53.65 31.89 C53.36 31.90 53.18 32.53 54.05 32.50 C54.92 32.47 54.71 31.86 54.42 31.87 C54.13 31.87 53.96 32.50 54.83 32.48 C55.69 32.45 55.48 31.83 55.19 31.84 C54.90 31.85 54.73 32.48 55.60 32.45 C56.47 32.43 56.25 31.81 55.97 31.82 C55.68 31.83 55.50 32.46 56.37 32.43 C57.24 32.40 57.03 31.78 56.74 31.79 C56.45 31.80 56.27 32.43 57.14 32.41 C58.01 32.38 57.80 31.76 57.51 31.77 C57.22 31.78 57.05 32.41 57.92 32.38 C58.78 32.36 58.57 31.74 58.28 31.75 C57.99 31.76 57.82 32.39 58.69 32.36 C59.56 32.34 59.35 31.72 59.06 31.73 C58.77 31.73 58.59 32.36 59.46 32.34 C60.33 32.32 60.12 31.70 59.83 31.71 C59.54 31.71 59.36 32.34 60.23 32.32 C61.10 32.30 60.89 31.68 60.60 31.69 C60.31 31.69 60.13 32.32 61.00 32.30 C61.87 32.28 61.67 31.66 61.38 31.67 C61.09 31.68 60.91 32.30 61.78 32.28 C62.65 32.27 62.44 31.65 62.15 31.65 C61.86 31.66 61.68 32.29 62.55 32.27 C63.42 32.25 63.21 31.63 62.92 31.64 C62.63 31.64 62.45 32.27 63.32 32.26 C64.19 32.24 63.99 31.62 63.70 31.63 C63.41 31.63 63.22 32.26 64.09 32.24 C64.96 32.23 64.76 31.61 64.47 31.61 C64.18 31.62 64.00 32.24 64.86 32.23 C65.73 32.23 65.53 31.60 65.25 31.61 C64.96 31.61 64.77 32.23 65.64 32.23 C66.51 32.22 66.31 31.60 66.02 31.60 C65.73 31.60 65.54 32.23 66.41 32.22 C67.28 32.22 67.08 31.60 66.79 31.60 C66.50 31.60 66.31 32.22 67.18 32.22 C68.05 32.23 67.86 31.60 67.57 31.60 C67.28 31.60 67.08 32.22 67.95 32.23 C68.82 32.24 68.63 31.61 68.34 31.61 C68.05 31.61 67.85 32.22 68.72 32.24 C69.59 32.26 69.41 31.63 69.12 31.62 C68.83 31.62 68.62 32.23 69.49 32.26 C70.36 32.28 70.19 31.66 69.90 31.65 C69.61 31.64 69.39 32.25 70.26 32.29 C71.13 32.33 70.96 31.70 70.68 31.68 C70.39 31.67 70.15 32.27 71.02 32.33 C71.89 32.39 71.75 31.77 71.46 31.74 C71.17 31.71 70.91 32.29 71.77 32.40 C72.64 32.51 72.54 31.90 72.25 31.85 C71.97 31.79 71.64 32.26 72.47 32.55 C73.29 32.83 73.32 32.23 73.05 32.11 C72.79 31.99 72.36 32.43 73.12 32.84 C73.89 33.25 74.02 32.65 73.77 32.50 C73.52 32.34 73.04 32.73 73.75 33.23 C74.46 33.73 74.66 33.13 74.43 32.96 C74.20 32.78 73.67 33.13 74.34 33.68 C75.01 34.24 75.11 33.96 75.11 33.96" fill="none"/></g>
<g fill="blue" mcviz:r="P563_V478_V1135" stroke="blue" stroke-linecap="round" stroke-width="0.0352695228071" transform="scale(1.000)"><path d="M60.36 34.92 C61.06 34.97 67.40 35.40 72.48 34.90 C73.37 34.82 74.39 34.59 74.98 34.44" fill="none"/><path d="M67.93 35.13L67.45 35.28C67.50 35.21 67.50 35.07 67.45 34.99Z" stroke="none"/></g>
<use mcviz:r="P563_V478_V1135" x="68.192" y="34.331" transform="scale(1.000)" xlink:href="#pdg-2" />
<g fill="red" mcviz:r="P202_V175_V1139" stroke="red" stroke-linecap="round" stroke-width="0.129800315305" transform="scale(1.000)"><path d="M47.52 24.24 C48.16 24.15 53.64 23.42 58.08 22.81 C64.43 21.93 66.14 21.02 72.48 21.97 C73.40 22.11 74.42 22.47 75.00 22.70" fill="none"/><path d="M61.52 22.27L61.07 22.49C61.10 22.41 61.08 22.27 61.02 22.21Z" stroke="none"/></g>
<use mcviz:r="P202_V175_V1139" x="57.058" y="22.167" transform="scale(1.000)" xlink:href="#pdg4" />
<g fill="green" mcviz:r="P1392_V226_V1139" stroke="green" stroke-linecap="round" stroke-width="0.0294966334886" transform="scale(1.000)"><path d="M54.35 24.12 C54.35 24.12 54.34 24.44 55.15 24.24 C55.96 24.04 55.63 23.48 55.36 23.55 C55.09 23.61 55.06 24.26 55.87 24.07 C56.69 23.87 56.36 23.31 56.09 23.37 C55.82 23.44 55.78 24.08 56.60 23.90 C57.41 23.71 57.09 23.14 56.82 23.20 C56.55 23.27 56.50 23.91 57.32 23.73 C58.14 23.55 57.82 22.98 57.55 23.04 C57.28 23.10 57.23 23.75 58.05 23.57 C58.87 23.40 58.56 22.83 58.28 22.89 C58.01 22.94 57.95 23.59 58.77 23.42 C59.59 23.26 59.29 22.68 59.02 22.74 C58.74 22.79 58.68 23.44 59.50 23.28 C60.32 23.12 60.03 22.55 59.75 22.60 C59.48 22.65 59.41 23.29 60.23 23.14 C61.06 22.99 60.76 22.42 60.49 22.46 C60.21 22.51 60.13 23.15 60.96 23.02 C61.79 22.88 61.50 22.29 61.23 22.34 C60.95 22.38 60.86 23.03 61.69 22.90 C62.52 22.77 62.25 22.18 61.97 22.23 C61.69 22.27 61.60 22.91 62.43 22.79 C63.26 22.67 62.99 22.09 62.71 22.12 C62.44 22.16 62.33 22.80 63.16 22.69 C63.99 22.59 63.74 22.00 63.46 22.03 C63.18 22.06 63.06 22.70 63.89 22.61 C64.73 22.53 64.48 21.93 64.21 21.96 C63.93 21.98 63.80 22.62 64.63 22.54 C65.47 22.47 65.23 21.86 64.95 21.89 C64.67 21.91 64.54 22.55 65.37 22.48 C66.21 22.41 65.97 21.80 65.69 21.82 C65.42 21.85 65.28 22.48 66.11 22.42 C66.95 22.36 66.72 21.75 66.44 21.77 C66.16 21.79 66.01 22.42 66.85 22.37 C67.69 22.32 67.47 21.72 67.19 21.73 C66.91 21.74 66.75 22.36 67.59 22.34 C68.43 22.31 68.23 21.70 67.95 21.71 C67.67 21.71 67.49 22.33 68.32 22.33 C69.16 22.33 68.98 21.71 68.70 21.71 C68.42 21.70 68.22 22.31 69.06 22.34 C69.90 22.37 69.74 21.75 69.46 21.73 C69.18 21.72 68.96 22.33 69.80 22.38 C70.63 22.43 70.49 21.80 70.21 21.78 C69.93 21.76 69.70 22.36 70.53 22.43 C71.37 22.49 71.23 21.86 70.96 21.84 C70.68 21.81 70.44 22.42 71.27 22.49 C72.11 22.57 71.98 21.93 71.70 21.90 C71.42 21.88 71.18 22.48 72.01 22.56 C72.85 22.64 72.72 22.00 72.45 21.98 C72.17 21.95 71.91 22.53 72.75 22.64 C73.58 22.74 73.48 22.12 73.20 22.07 C72.93 22.03 72.64 22.60 73.47 22.75 C74.29 22.90 74.22 22.26 73.95 22.21 C73.68 22.15 73.37 22.71 74.19 22.89 C75.00 23.07 74.98 22.76 74.98 22.76" fill="none"/></g>
<g fill="blue" mcviz:r="P829_V687_V1139" stroke="blue" stroke-linecap="round" stroke-width="0.04573638285" transform="scale(1.000)"><path d="M60.36 24.84 C60.52 24.82 60.94 24.75 61.28 24.67 C62.51 24.36 62.74 24.01 63.98 23.79 C67.70 23.13 68.72 23.91 72.48 23.47 C73.37 23.37 74.39 23.15 74.98 23.01" fill="none"/><path d="M67.85 23.53L67.36 23.66C67.41 23.59 67.42 23.44 67.37 23.37Z" stroke="none"/></g>
<use mcviz:r="P829_V687_V1139" x="68.192" y="22.900" transform="scale(1.000)" xlink:href="#pdg-2" />
<g fill="red" mcviz:r="P1365_V1117_V1146" stroke="red" stroke-linecap="round" stroke-width="0.0395356822414" transform="scale(1.000)"><path d="M60.36 31.57 C61.26 31.61 71.26 31.98 72.48 31.56 C73.61 31.16 74.64 30.15 75.14 29.59" fill="none"/><path d="M68.34 31.76L67.86 31.90C67.90 31.83 67.91 31.68 67.86 31.61Z" stroke="none"/></g>
<use mcviz:r="P1365_V1117_V1146" x="68.232" y="31.027" transform="scale(1.000)" xlink:href="#pdg1" />
<g fill="green" mcviz:r="P1331_V1086_V1146" stroke="green" stroke-linecap="round" stroke-width="0.0335672566758" transform="scale(1.000)"><path d="M60.36 28.25 C60.36 28.25 60.36 28.60 61.17 28.37 C61.97 28.15 61.61 27.58 61.34 27.67 C61.08 27.76 61.12 28.43 61.90 28.13 C62.68 27.82 62.26 27.29 62.00 27.41 C61.75 27.52 61.85 28.18 62.60 27.82 C63.36 27.46 62.93 26.98 62.68 27.09 C62.42 27.21 62.46 27.81 63.25 27.53 C64.04 27.26 63.69 26.76 63.42 26.83 C63.16 26.90 63.11 27.52 63.93 27.36 C64.75 27.20 64.46 26.64 64.19 26.68 C63.91 26.72 63.81 27.35 64.64 27.24 C65.47 27.14 65.21 26.55 64.94 26.58 C64.66 26.61 64.54 27.24 65.37 27.16 C66.20 27.08 65.96 26.48 65.68 26.51 C65.41 26.53 65.27 27.16 66.10 27.10 C66.94 27.04 66.71 26.43 66.43 26.45 C66.15 26.47 66.00 27.10 66.84 27.05 C67.67 27.00 67.46 26.39 67.18 26.41 C66.90 26.42 66.74 27.05 67.58 27.02 C68.41 26.98 68.21 26.37 67.93 26.38 C67.65 26.39 67.48 27.01 68.31 27.00 C69.15 26.98 68.96 26.36 68.68 26.37 C68.40 26.37 68.21 26.99 69.05 26.99 C69.89 26.99 69.71 26.37 69.43 26.37 C69.15 26.37 68.95 26.98 69.78 27.00 C70.62 27.03 70.46 26.41 70.18 26.39 C69.90 26.38 69.68 26.98 70.52 27.04 C71.35 27.09 71.21 26.47 70.93 26.44 C70.66 26.42 70.41 27.01 71.24 27.10 C72.07 27.20 71.97 26.58 71.69 26.53 C71.42 26.49 71.13 27.04 71.95 27.21 C72.77 27.38 72.73 26.77 72.46 26.70 C72.19 26.62 71.83 27.09 72.61 27.41 C73.38 27.72 73.45 27.12 73.20 26.99 C72.95 26.87 72.51 27.29 73.23 27.72 C73.95 28.14 74.11 27.54 73.88 27.39 C73.64 27.23 73.15 27.61 73.82 28.11 C74.49 28.61 74.71 28.02 74.50 27.85 C74.28 27.67 73.75 28.01 74.38 28.56 C75.00 29.12 75.12 28.84 75.12 28.84" fill="none"/></g>
<g fill="green" mcviz:r="P1399_V1052_V1146" stroke="green" stroke-linecap="round" stroke-width="0.0592010925652" transform="scale(1.000)"><path d="M42.70 28.27 C42.70 28.27 42.48 28.56 43.29 28.87 C44.11 29.18 44.14 28.50 43.87 28.41 C43.59 28.32 43.22 28.87 44.05 29.12 C44.88 29.38 44.88 28.71 44.60 28.63 C44.32 28.56 43.97 29.14 44.82 29.33 C45.67 29.53 45.61 28.85 45.33 28.80 C45.04 28.75 44.74 29.35 45.61 29.48 C46.47 29.61 46.37 28.95 46.08 28.91 C45.79 28.88 45.52 29.47 46.38 29.58 C47.25 29.69 47.13 29.04 46.84 29.01 C46.55 28.98 46.29 29.58 47.16 29.67 C48.03 29.76 47.89 29.11 47.60 29.09 C47.31 29.06 47.07 29.67 47.94 29.74 C48.81 29.81 48.66 29.17 48.37 29.15 C48.08 29.13 47.84 29.74 48.71 29.80 C49.58 29.86 49.43 29.22 49.14 29.20 C48.85 29.18 48.62 29.80 49.49 29.85 C50.36 29.90 50.20 29.27 49.91 29.25 C49.62 29.23 49.40 29.85 50.27 29.90 C51.14 29.94 50.98 29.31 50.69 29.29 C50.40 29.28 50.17 29.89 51.04 29.94 C51.91 29.98 51.75 29.35 51.46 29.33 C51.17 29.32 50.95 29.93 51.82 29.97 C52.69 30.01 52.52 29.38 52.23 29.37 C51.94 29.35 51.72 29.97 52.59 30.01 C53.47 30.04 53.30 29.41 53.01 29.40 C52.72 29.39 52.50 30.00 53.37 30.04 C54.24 30.07 54.07 29.44 53.78 29.43 C53.49 29.42 53.27 30.03 54.15 30.06 C55.02 30.09 54.84 29.46 54.55 29.45 C54.26 29.44 54.05 30.06 54.92 30.09 C55.79 30.12 55.62 29.49 55.33 29.48 C55.04 29.47 54.82 30.09 55.70 30.11 C56.57 30.14 56.39 29.51 56.10 29.50 C55.81 29.49 55.60 30.11 56.47 30.14 C57.34 30.16 57.17 29.53 56.88 29.52 C56.59 29.51 56.38 30.13 57.25 30.16 C58.12 30.18 57.94 29.55 57.65 29.54 C57.36 29.54 57.15 30.15 58.02 30.18 C58.90 30.20 58.72 29.57 58.43 29.56 C58.14 29.55 57.93 30.17 58.80 30.19 C59.67 30.21 59.49 29.59 59.20 29.58 C58.91 29.57 58.70 30.19 59.57 30.21 C60.45 30.23 60.27 29.60 59.98 29.60 C59.68 29.59 59.48 30.21 60.35 30.23 C61.22 30.25 61.04 29.62 60.75 29.61 C60.46 29.61 60.25 30.23 61.13 30.24 C62.00 30.26 61.82 29.63 61.53 29.63 C61.23 29.62 61.03 30.24 61.90 30.26 C62.77 30.28 62.59 29.65 62.30 29.64 C62.01 29.64 61.80 30.26 62.68 30.27 C63.55 30.29 63.37 29.66 63.08 29.66 C62.78 29.65 62.58 30.27 63.45 30.29 C64.32 30.30 64.14 29.68 63.85 29.67 C63.56 29.67 63.35 30.28 64.22 30.30 C65.10 30.33 64.92 29.70 64.63 29.69 C64.34 29.68 64.12 30.29 64.99 30.33 C65.87 30.36 65.70 29.73 65.41 29.72 C65.12 29.71 64.89 30.32 65.76 30.36 C66.64 30.41 66.48 29.78 66.19 29.76 C65.90 29.75 65.67 30.35 66.54 30.41 C67.41 30.46 67.25 29.83 66.96 29.81 C66.67 29.79 66.44 30.40 67.31 30.46 C68.18 30.51 68.02 29.87 67.73 29.86 C67.44 29.84 67.22 30.46 68.09 30.50 C68.96 30.54 68.79 29.90 68.50 29.89 C68.21 29.88 68.00 30.51 68.87 30.53 C69.74 30.54 69.56 29.91 69.27 29.91 C68.97 29.91 68.79 30.54 69.66 30.53 C70.53 30.51 70.32 29.88 70.03 29.89 C69.74 29.90 69.57 30.54 70.45 30.49 C71.32 30.44 71.08 29.83 70.79 29.85 C70.50 29.87 70.36 30.51 71.23 30.44 C72.10 30.36 71.84 29.75 71.55 29.78 C71.27 29.81 71.14 30.46 72.01 30.36 C72.87 30.26 72.61 29.66 72.32 29.69 C72.03 29.73 71.93 30.40 72.79 30.26 C73.65 30.12 73.35 29.51 73.06 29.57 C72.78 29.63 72.72 30.30 73.57 30.10 C74.42 29.90 74.08 29.33 73.80 29.40 C73.52 29.47 73.50 30.14 74.34 29.90 C75.18 29.66 74.99 29.37 74.99 29.37" fill="none"/></g>
<g fill="blue" mcviz:r="P1330_V1086_V1146" stroke="blue" stroke-linecap="round" stroke-width="0.055778391932" transform="scale(1.000)"><path d="M60.36 28.27 C61.25 28.27 71.20 28.37 72.48 28.53 C73.38 28.64 74.40 28.90 74.98 29.07" fill="none"/><path d="M67.94 28.37L67.46 28.50C67.51 28.43 67.51 28.29 67.47 28.22Z" stroke="none"/></g>
<use mcviz:r="P1330_V1086_V1146" x="68.195" y="27.848" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="red" mcviz:r="P1257_V825_V1153" stroke="red" stroke-linecap="round" stroke-width="0.0212048225694" transform="scale(1.000)"><path d="M7.46 36.82 C7.50 37.66 7.81 42.90 9.12 42.90 C9.12 42.90 9.12 42.90 60.30 42.90 C66.09 42.90 73.07 41.89 74.97 41.59" fill="none"/><path d="M39.03 42.90L38.55 43.05C38.60 42.97 38.60 42.83 38.55 42.76Z" stroke="none"/></g>
<use mcviz:r="P1257_V825_V1153" x="28.209" y="42.263" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="green" mcviz:r="P1412_V4_V1153" stroke="green" stroke-linecap="round" stroke-width="0.0323720077362" transform="scale(1.000)"><path d="M9.22 38.24 C9.22 38.24 8.88 38.23 9.10 39.09 C9.33 39.95 9.89 39.59 9.81 39.31 C9.73 39.02 9.06 39.02 9.33 39.86 C9.60 40.71 10.15 40.32 10.05 40.04 C9.94 39.76 9.26 39.81 9.61 40.63 C9.95 41.45 10.48 40.99 10.34 40.72 C10.20 40.46 9.49 40.68 10.02 41.39 C10.56 42.10 10.96 41.33 10.70 41.19 C10.44 41.06 10.06 41.83 10.95 41.83 C11.84 41.83 11.64 41.20 11.34 41.20 C11.05 41.20 10.85 41.83 11.74 41.83 C12.63 41.83 12.43 41.20 12.13 41.20 C11.84 41.20 11.64 41.83 12.53 41.83 C13.42 41.83 13.22 41.20 12.92 41.20 C12.63 41.20 12.43 41.83 13.32 41.83 C14.21 41.83 14.01 41.20 13.71 41.20 C13.42 41.20 13.22 41.83 14.11 41.83 C15.00 41.83 14.80 41.20 14.50 41.20 C14.21 41.20 14.01 41.83 14.90 41.83 C15.79 41.83 15.59 41.20 15.29 41.20 C15.00 41.20 14.80 41.83 15.69 41.83 C16.58 41.83 16.38 41.20 16.08 41.20 C15.79 41.20 15.59 41.83 16.48 41.83 C17.37 41.83 17.17 41.20 16.87 41.20 C16.58 41.20 16.38 41.83 17.27 41.83 C18.16 41.83 17.96 41.20 17.66 41.20 C17.37 41.20 17.17 41.83 18.06 41.83 C18.95 41.83 18.75 41.20 18.45 41.20 C18.16 41.20 17.96 41.83 18.85 41.83 C19.74 41.83 19.54 41.20 19.24 41.20 C18.95 41.20 18.75 41.83 19.64 41.83 C20.53 41.83 20.33 41.20 20.03 41.20 C19.74 41.20 19.54 41.83 20.43 41.83 C21.32 41.83 21.12 41.20 20.82 41.20 C20.53 41.20 20.33 41.83 21.22 41.83 C22.11 41.83 21.91 41.20 21.61 41.20 C21.32 41.20 21.12 41.83 22.01 41.83 C22.90 41.83 22.70 41.20 22.40 41.20 C22.11 41.20 21.91 41.83 22.80 41.83 C23.69 41.83 23.49 41.20 23.20 41.20 C22.90 41.20 22.70 41.83 23.59 41.83 C24.48 41.83 24.28 41.20 23.98 41.20 C23.69 41.20 23.49 41.83 24.38 41.83 C25.27 41.83 25.07 41.20 24.78 41.20 C24.48 41.20 24.28 41.83 25.17 41.83 C26.06 41.83 25.86 41.20 25.57 41.20 C25.27 41.20 25.07 41.83 25.96 41.83 C26.85 41.83 26.65 41.20 26.36 41.20 C26.06 41.20 25.86 41.83 26.75 41.83 C27.64 41.83 27.44 41.20 27.15 41.20 C26.85 41.20 26.65 41.83 27.54 41.83 C28.43 41.83 28.23 41.20 27.94 41.20 C27.64 41.20 27.44 41.83 28.33 41.83 C29.22 41.83 29.02 41.20 28.73 41.20 C28.43 41.20 28.23 41.83 29.12 41.83 C30.01 41.83 29.81 41.20 29.52 41.20 C29.22 41.20 29.02 41.83 29.91 41.83 C30.80 41.83 30.60 41.20 30.31 41.20 C30.01 41.20 29.81 41.83 30.70 41.83 C31.59 41.83 31.39 41.20 31.10 41.20 C30.80 41.20 30.60 41.83 31.49 41.83 C32.38 41.83 32.18 41.20 31.89 41.20 C31.59 41.20 31.39 41.83 32.28 41.83 C33.17 41.83 32.97 41.20 32.68 41.20 C32.38 41.20 32.18 41.83 33.07 41.83 C33.96 41.83 33.77 41.20 33.47 41.20 C33.17 41.20 32.97 41.83 33.86 41.83 C34.75 41.83 34.56 41.20 34.26 41.20 C33.96 41.20 33.76 41.83 34.65 41.83 C35.54 41.83 35.35 41.20 35.05 41.20 C34.75 41.20 34.55 41.83 35.44 41.83 C36.33 41.83 36.14 41.20 35.84 41.20 C35.54 41.20 35.35 41.83 36.24 41.83 C37.12 41.83 36.93 41.20 36.63 41.20 C36.33 41.20 36.14 41.83 37.03 41.83 C37.92 41.83 37.72 41.20 37.42 41.20 C37.12 41.20 36.93 41.83 37.81 41.83 C38.70 41.83 38.51 41.20 38.21 41.20 C37.91 41.20 37.72 41.83 38.60 41.83 C39.49 41.83 39.30 41.20 39.00 41.20 C38.71 41.20 38.51 41.83 39.40 41.83 C40.28 41.83 40.09 41.20 39.79 41.20 C39.49 41.20 39.30 41.83 40.19 41.83 C41.08 41.83 40.88 41.20 40.58 41.20 C40.28 41.20 40.09 41.83 40.98 41.83 C41.87 41.83 41.67 41.20 41.37 41.20 C41.08 41.20 40.88 41.83 41.77 41.83 C42.65 41.83 42.46 41.20 42.16 41.20 C41.87 41.20 41.67 41.83 42.56 41.83 C43.45 41.83 43.25 41.20 42.95 41.20 C42.65 41.20 42.46 41.83 43.35 41.83 C44.24 41.83 44.04 41.20 43.74 41.20 C43.45 41.20 43.25 41.83 44.14 41.83 C45.03 41.83 44.83 41.20 44.53 41.20 C44.24 41.20 44.04 41.83 44.93 41.83 C45.82 41.83 45.62 41.20 45.32 41.20 C45.03 41.20 44.83 41.83 45.72 41.83 C46.61 41.83 46.41 41.20 46.11 41.20 C45.82 41.20 45.62 41.83 46.51 41.83 C47.40 41.83 47.20 41.20 46.91 41.20 C46.61 41.20 46.41 41.83 47.30 41.83 C48.19 41.83 47.99 41.20 47.69 41.20 C47.40 41.20 47.20 41.83 48.09 41.83 C48.98 41.83 48.78 41.20 48.48 41.20 C48.19 41.20 47.99 41.83 48.88 41.83 C49.77 41.83 49.57 41.20 49.28 41.20 C48.98 41.20 48.78 41.83 49.67 41.83 C50.56 41.83 50.36 41.20 50.06 41.20 C49.77 41.20 49.57 41.83 50.46 41.83 C51.35 41.83 51.15 41.20 50.85 41.20 C50.56 41.20 50.36 41.83 51.25 41.83 C52.14 41.83 51.94 41.20 51.65 41.20 C51.35 41.20 51.15 41.83 52.04 41.83 C52.93 41.83 52.73 41.20 52.43 41.20 C52.14 41.20 51.94 41.83 52.83 41.83 C53.72 41.83 53.52 41.20 53.23 41.20 C52.93 41.20 52.73 41.83 53.62 41.83 C54.51 41.83 54.31 41.20 54.01 41.20 C53.72 41.20 53.52 41.83 54.41 41.83 C55.30 41.83 55.10 41.20 54.81 41.20 C54.51 41.20 54.31 41.83 55.20 41.83 C56.09 41.83 55.89 41.20 55.60 41.20 C55.30 41.20 55.10 41.83 55.99 41.83 C56.88 41.83 56.68 41.20 56.39 41.20 C56.09 41.20 55.89 41.83 56.78 41.83 C57.67 41.83 57.47 41.20 57.18 41.20 C56.88 41.20 56.68 41.83 57.57 41.83 C58.46 41.83 58.26 41.20 57.97 41.20 C57.67 41.20 57.47 41.83 58.36 41.83 C59.25 41.83 59.06 41.20 58.76 41.20 C58.46 41.20 58.26 41.83 59.15 41.83 C60.04 41.83 59.84 41.20 59.55 41.20 C59.25 41.20 59.05 41.83 59.94 41.83 C60.83 41.83 60.64 41.20 60.34 41.20 C60.04 41.20 59.85 41.83 60.74 41.83 C61.62 41.83 61.43 41.20 61.13 41.20 C60.83 41.20 60.64 41.83 61.53 41.83 C62.42 41.83 62.22 41.20 61.92 41.20 C61.62 41.20 61.43 41.83 62.32 41.83 C63.21 41.83 63.01 41.20 62.71 41.20 C62.42 41.20 62.22 41.83 63.11 41.83 C64.00 41.83 63.80 41.20 63.50 41.20 C63.21 41.20 63.01 41.83 63.90 41.83 C64.79 41.83 64.59 41.20 64.29 41.20 C64.00 41.20 63.80 41.83 64.69 41.83 C65.58 41.83 65.38 41.20 65.08 41.20 C64.79 41.20 64.59 41.83 65.48 41.83 C66.37 41.83 66.17 41.20 65.87 41.20 C65.58 41.20 65.38 41.83 66.27 41.83 C67.16 41.83 66.96 41.20 66.66 41.20 C66.37 41.20 66.17 41.83 67.06 41.83 C67.95 41.83 67.75 41.20 67.45 41.20 C67.16 41.20 66.96 41.83 67.85 41.83 C68.74 41.83 68.54 41.20 68.24 41.20 C67.95 41.20 67.75 41.83 68.64 41.83 C69.53 41.83 69.33 41.20 69.03 41.20 C68.74 41.20 68.54 41.83 69.43 41.83 C70.32 41.83 70.12 41.20 69.82 41.20 C69.53 41.20 69.33 41.83 70.22 41.83 C71.11 41.83 70.91 41.20 70.61 41.20 C70.32 41.20 70.12 41.83 71.01 41.83 C71.90 41.83 71.70 41.20 71.40 41.20 C71.11 41.20 70.91 41.83 71.80 41.83 C72.69 41.83 72.49 41.20 72.20 41.20 C71.90 41.20 71.70 41.83 72.59 41.83 C73.48 41.83 73.28 41.20 72.99 41.20 C72.69 41.20 72.49 41.83 73.38 41.83 C74.27 41.83 74.07 41.20 73.78 41.20 C73.48 41.20 73.28 41.83 74.17 41.83 C75.06 41.83 74.96 41.51 74.96 41.51" fill="none"/></g>
<g fill="blue" mcviz:r="P864_V711_V1153" stroke="blue" stroke-linecap="round" stroke-width="0.0372150790595" transform="scale(1.000)"><path d="M10.79 40.07 C11.10 40.23 12.64 40.99 13.99 40.99 C13.99 40.99 13.99 40.99 60.30 40.99 C65.71 40.99 67.07 41.07 72.48 41.32 C73.35 41.36 74.37 41.43 74.96 41.48" fill="none"/><path d="M43.04 40.99L42.56 41.13C42.61 41.06 42.61 40.91 42.56 40.84Z" stroke="none"/></g>
<use mcviz:r="P864_V711_V1153" x="34.320" y="40.529" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="red" mcviz:r="P562_V478_V1156" stroke="red" stroke-linecap="round" stroke-width="0.0240720686992" transform="scale(1.000)"><path d="M60.35 34.95 C60.68 35.12 62.43 36.05 63.98 36.38 C65.83 36.77 70.59 36.63 72.48 36.72 C73.35 36.77 74.37 36.83 74.96 36.87" fill="none"/><path d="M67.75 36.65L67.27 36.78C67.32 36.71 67.32 36.57 67.28 36.50Z" stroke="none"/></g>
<use mcviz:r="P562_V478_V1156" x="68.223" y="35.735" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="blue" mcviz:r="P1256_V825_V1156" stroke="blue" stroke-linecap="round" stroke-width="0.0397656092382" transform="scale(1.000)"><path d="M7.57 36.71 C9.71 36.79 39.76 37.87 63.98 38.18 C67.76 38.23 68.78 38.94 72.48 38.18 C73.44 37.98 74.46 37.47 75.03 37.16" fill="none"/><path d="M41.66 37.74L41.17 37.87C41.22 37.80 41.23 37.66 41.18 37.59Z" stroke="none"/></g>
<use mcviz:r="P1256_V825_V1156" x="28.209" y="36.745" transform="scale(1.000)" xlink:href="#pdg2101" />
<g fill="red" mcviz:r="P799_V667_V1166" stroke="red" stroke-linecap="round" stroke-width="0.0511057879871" transform="scale(1.000)"><path d="M53.92 6.39 C54.15 6.21 55.15 5.48 56.10 5.24 C56.95 5.02 57.20 5.23 58.08 5.24 C59.50 5.25 59.86 5.34 61.28 5.26 C62.49 5.20 62.78 5.04 63.98 4.96 C68.22 4.68 73.36 4.71 74.96 4.73" fill="none"/><path d="M64.51 4.93L64.04 5.10C64.09 5.02 64.08 4.88 64.03 4.81Z" stroke="none"/></g>
<use mcviz:r="P799_V667_V1166" x="60.302" y="4.736" transform="scale(1.000)" xlink:href="#pdg1" />
<g fill="green" mcviz:r="P1435_V58_V1166" stroke="green" stroke-linecap="round" stroke-width="0.079234699781" transform="scale(1.000)"><path d="M32.27 12.60 C32.27 12.60 32.30 12.90 33.09 12.51 C33.88 12.12 33.46 11.67 33.19 11.78 C32.92 11.89 32.96 12.53 33.79 12.22 C34.61 11.91 34.22 11.40 33.94 11.50 C33.66 11.59 33.68 12.24 34.51 11.96 C35.35 11.68 34.97 11.16 34.69 11.24 C34.41 11.33 34.40 11.97 35.25 11.73 C36.09 11.48 35.74 10.95 35.46 11.02 C35.17 11.10 35.14 11.74 35.99 11.53 C36.85 11.32 36.52 10.77 36.23 10.83 C35.94 10.90 35.88 11.54 36.74 11.36 C37.61 11.18 37.30 10.62 37.01 10.67 C36.72 10.73 36.63 11.36 37.50 11.22 C38.37 11.08 38.09 10.50 37.80 10.55 C37.51 10.59 37.39 11.22 38.27 11.11 C39.14 11.00 38.87 10.41 38.58 10.45 C38.29 10.48 38.16 11.11 39.04 11.03 C39.91 10.94 39.66 10.34 39.37 10.37 C39.08 10.39 38.93 11.03 39.81 10.96 C40.69 10.89 40.45 10.28 40.15 10.30 C39.86 10.33 39.71 10.96 40.59 10.90 C41.47 10.83 41.23 10.22 40.93 10.24 C40.64 10.27 40.50 10.91 41.38 10.83 C42.25 10.75 42.00 10.14 41.71 10.17 C41.41 10.20 41.29 10.85 42.16 10.75 C43.04 10.65 42.77 10.04 42.47 10.08 C42.18 10.12 42.08 10.78 42.95 10.64 C43.82 10.51 43.52 9.91 43.23 9.96 C42.94 10.02 42.88 10.68 43.74 10.50 C44.60 10.32 44.27 9.73 43.98 9.80 C43.70 9.87 43.67 10.54 44.52 10.31 C45.37 10.08 45.00 9.52 44.72 9.60 C44.44 9.69 44.45 10.36 45.28 10.08 C46.12 9.79 45.72 9.26 45.45 9.36 C45.17 9.46 45.22 10.13 46.04 9.80 C46.85 9.47 46.43 8.95 46.16 9.07 C45.89 9.19 45.97 9.85 46.77 9.48 C47.57 9.11 47.12 8.62 46.85 8.75 C46.59 8.88 46.70 9.54 47.48 9.13 C48.26 8.72 47.79 8.25 47.53 8.39 C47.28 8.53 47.42 9.18 48.18 8.74 C48.94 8.30 48.45 7.85 48.20 8.00 C47.95 8.16 48.24 8.87 48.89 8.27 C49.54 7.68 48.82 7.33 48.67 7.57 C48.51 7.82 48.96 8.32 49.39 7.55 C49.83 6.79 49.31 6.65 49.11 6.87 C48.92 7.09 49.08 7.57 49.81 7.09 C50.55 6.60 50.06 6.20 49.81 6.35 C49.56 6.51 49.71 7.13 50.47 6.68 C51.23 6.23 50.75 5.80 50.49 5.95 C50.24 6.09 50.36 6.72 51.14 6.30 C51.91 5.88 51.46 5.43 51.19 5.57 C50.93 5.70 51.03 6.33 51.82 5.95 C52.62 5.57 52.18 5.10 51.92 5.22 C51.65 5.34 51.70 5.98 52.52 5.64 C53.34 5.31 52.94 4.82 52.66 4.92 C52.39 5.02 52.40 5.65 53.24 5.38 C54.07 5.11 53.71 4.59 53.43 4.67 C53.14 4.75 53.11 5.38 53.97 5.17 C54.82 4.95 54.49 4.41 54.21 4.47 C53.92 4.53 53.85 5.17 54.71 5.00 C55.58 4.84 55.28 4.27 54.99 4.32 C54.70 4.37 54.60 5.01 55.47 4.88 C56.35 4.75 56.07 4.17 55.78 4.21 C55.48 4.24 55.37 4.88 56.24 4.77 C57.12 4.67 56.85 4.07 56.56 4.11 C56.27 4.14 56.14 4.78 57.02 4.68 C57.89 4.58 57.63 3.98 57.34 4.02 C57.04 4.05 56.92 4.69 57.80 4.59 C58.67 4.49 58.40 3.89 58.11 3.93 C57.82 3.96 57.70 4.61 58.58 4.50 C59.45 4.39 59.18 3.79 58.89 3.83 C58.59 3.87 58.49 4.51 59.36 4.39 C60.23 4.27 59.97 3.71 59.68 3.73 C59.39 3.75 59.21 4.33 60.09 4.34 C60.97 4.34 60.80 3.75 60.51 3.73 C60.21 3.71 59.98 4.33 60.86 4.38 C61.74 4.43 61.57 3.78 61.28 3.77 C60.98 3.76 60.77 4.38 61.65 4.40 C62.53 4.43 62.35 3.80 62.06 3.79 C61.77 3.78 61.55 4.40 62.43 4.43 C63.32 4.45 63.14 3.82 62.84 3.81 C62.55 3.80 62.34 4.42 63.22 4.45 C64.10 4.48 63.92 3.85 63.63 3.84 C63.33 3.83 63.12 4.45 64.00 4.48 C64.88 4.51 64.71 3.88 64.41 3.87 C64.12 3.86 63.90 4.47 64.78 4.50 C65.66 4.54 65.49 3.91 65.20 3.90 C64.90 3.88 64.68 4.50 65.56 4.53 C66.44 4.57 66.27 3.94 65.98 3.93 C65.69 3.92 65.46 4.53 66.34 4.57 C67.23 4.60 67.06 3.97 66.76 3.96 C66.47 3.95 66.25 4.56 67.13 4.60 C68.01 4.64 67.84 4.01 67.55 4.00 C67.25 3.98 67.03 4.60 67.91 4.64 C68.79 4.68 68.62 4.05 68.33 4.03 C68.04 4.02 67.81 4.63 68.69 4.67 C69.57 4.72 69.41 4.08 69.11 4.07 C68.82 4.05 68.59 4.67 69.47 4.71 C70.35 4.76 70.19 4.12 69.90 4.11 C69.60 4.09 69.37 4.71 70.25 4.75 C71.13 4.80 70.97 4.16 70.68 4.15 C70.38 4.13 70.16 4.75 71.04 4.79 C71.92 4.84 71.75 4.21 71.46 4.19 C71.17 4.17 70.94 4.79 71.82 4.83 C72.70 4.88 72.54 4.25 72.24 4.23 C71.95 4.22 71.72 4.83 72.60 4.88 C73.48 4.93 73.32 4.29 73.03 4.28 C72.73 4.26 72.50 4.87 73.38 4.92 C74.26 4.97 74.10 4.34 73.81 4.32 C73.52 4.31 73.28 4.92 74.16 4.97 C75.04 5.02 74.96 4.70 74.96 4.70" fill="none"/></g>
<g fill="blue" mcviz:r="P995_V798_V1166" stroke="blue" stroke-linecap="round" stroke-width="0.0412977160902" transform="scale(1.000)"><path d="M60.36 12.88 C61.28 12.82 71.95 12.09 72.48 11.71 C72.62 11.60 74.64 6.75 75.27 5.20" fill="none"/><path d="M70.20 12.08L69.74 12.27C69.78 12.20 69.77 12.05 69.71 11.99Z" stroke="none"/></g>
<use mcviz:r="P995_V798_V1166" x="68.192" y="11.136" transform="scale(1.000)" xlink:href="#pdg-2" />
<g fill="red" mcviz:r="P1306_V1070_V1183" stroke="red" stroke-linecap="round" stroke-width="0.160731758979" transform="scale(1.000)"><path d="M60.36 24.50 C60.72 24.56 62.51 24.85 63.98 24.97 C67.75 25.29 68.72 24.91 72.48 25.29 C73.36 25.38 74.38 25.57 74.97 25.69" fill="none"/><path d="M67.91 25.11L67.43 25.26C67.48 25.18 67.48 25.04 67.43 24.97Z" stroke="none"/></g>
<use mcviz:r="P1306_V1070_V1183" x="68.223" y="24.332" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="green" mcviz:r="P1265_V1042_V1183" stroke="green" stroke-linecap="round" stroke-width="0.132580591906" transform="scale(1.000)"><path d="M25.27 25.14 C25.27 25.14 25.17 25.45 26.04 25.45 C26.92 25.45 26.72 24.83 26.43 24.83 C26.14 24.83 25.95 25.45 26.82 25.45 C27.69 25.45 27.50 24.83 27.21 24.83 C26.92 24.83 26.72 25.45 27.60 25.45 C28.47 25.45 28.28 24.83 27.99 24.83 C27.69 24.83 27.50 25.45 28.37 25.45 C29.25 25.45 29.05 24.83 28.76 24.83 C28.47 24.83 28.28 25.45 29.15 25.45 C30.02 25.45 29.83 24.83 29.54 24.83 C29.25 24.83 29.05 25.45 29.93 25.45 C30.80 25.45 30.61 24.83 30.31 24.83 C30.02 24.83 29.83 25.45 30.70 25.45 C31.58 25.45 31.38 24.83 31.09 24.83 C30.80 24.83 30.61 25.45 31.48 25.45 C32.35 25.45 32.16 24.83 31.87 24.83 C31.58 24.83 31.38 25.45 32.26 25.45 C33.13 25.45 32.94 24.83 32.64 24.83 C32.35 24.83 32.16 25.45 33.03 25.45 C33.91 25.45 33.71 24.83 33.42 24.83 C33.13 24.83 32.94 25.45 33.81 25.45 C34.68 25.45 34.49 24.83 34.20 24.83 C33.91 24.83 33.71 25.45 34.59 25.45 C35.46 25.45 35.27 24.83 34.97 24.83 C34.68 24.83 34.49 25.45 35.36 25.45 C36.24 25.45 36.04 24.83 35.75 24.83 C35.46 24.83 35.27 25.45 36.14 25.45 C37.01 25.45 36.82 24.83 36.53 24.83 C36.24 24.83 36.04 25.45 36.92 25.45 C37.79 25.45 37.59 24.83 37.30 24.83 C37.01 24.83 36.82 25.45 37.69 25.45 C38.57 25.45 38.37 24.83 38.08 24.83 C37.79 24.83 37.59 25.45 38.47 25.45 C39.34 25.45 39.15 24.83 38.86 24.83 C38.57 24.83 38.37 25.45 39.24 25.45 C40.12 25.45 39.92 24.83 39.63 24.83 C39.34 24.83 39.15 25.45 40.02 25.45 C40.90 25.45 40.70 24.83 40.41 24.83 C40.12 24.83 39.92 25.45 40.80 25.45 C41.67 25.45 41.48 24.83 41.19 24.83 C40.90 24.83 40.70 25.45 41.57 25.45 C42.45 25.45 42.25 24.83 41.96 24.83 C41.67 24.83 41.48 25.45 42.35 25.45 C43.23 25.45 43.03 24.83 42.74 24.83 C42.45 24.83 42.25 25.45 43.13 25.45 C44.00 25.45 43.81 24.83 43.52 24.83 C43.22 24.83 43.03 25.45 43.90 25.45 C44.78 25.45 44.58 24.83 44.29 24.83 C44.00 24.83 43.81 25.45 44.68 25.45 C45.56 25.45 45.36 24.83 45.07 24.83 C44.78 24.83 44.58 25.45 45.46 25.45 C46.33 25.45 46.14 24.83 45.85 24.83 C45.56 24.83 45.36 25.45 46.23 25.46 C47.11 25.46 46.92 24.84 46.63 24.83 C46.33 24.83 46.14 25.45 47.01 25.46 C47.88 25.47 47.69 24.84 47.40 24.84 C47.11 24.84 46.91 25.46 47.79 25.47 C48.66 25.48 48.47 24.85 48.18 24.85 C47.89 24.84 47.69 25.46 48.56 25.48 C49.43 25.49 49.25 24.86 48.96 24.86 C48.67 24.85 48.46 25.47 49.34 25.49 C50.21 25.50 50.03 24.87 49.74 24.87 C49.44 24.86 49.24 25.48 50.11 25.50 C50.99 25.52 50.80 24.89 50.51 24.88 C50.22 24.88 50.01 25.50 50.89 25.52 C51.76 25.54 51.58 24.91 51.29 24.90 C51.00 24.90 50.79 25.51 51.66 25.54 C52.54 25.56 52.36 24.93 52.07 24.92 C51.78 24.91 51.56 25.53 52.44 25.56 C53.31 25.58 53.14 24.95 52.84 24.95 C52.55 24.94 52.34 25.55 53.21 25.58 C54.09 25.61 53.91 24.98 53.62 24.97 C53.33 24.96 53.12 25.58 53.99 25.61 C54.86 25.64 54.69 25.01 54.40 25.00 C54.11 24.99 53.89 25.60 54.76 25.63 C55.64 25.66 55.47 25.03 55.17 25.02 C54.88 25.01 54.67 25.63 55.54 25.66 C56.41 25.69 56.24 25.06 55.95 25.05 C55.66 25.04 55.44 25.66 56.32 25.69 C57.19 25.72 57.02 25.09 56.73 25.08 C56.44 25.07 56.22 25.69 57.09 25.72 C57.97 25.75 57.79 25.12 57.50 25.11 C57.21 25.10 57.00 25.71 57.87 25.74 C58.74 25.77 58.57 25.14 58.28 25.13 C57.99 25.12 57.77 25.74 58.65 25.77 C59.52 25.80 59.34 25.17 59.05 25.16 C58.76 25.15 58.55 25.77 59.42 25.79 C60.30 25.82 60.12 25.19 59.83 25.18 C59.54 25.17 59.33 25.79 60.20 25.82 C61.07 25.84 60.90 25.21 60.61 25.20 C60.31 25.20 60.10 25.81 60.98 25.84 C61.85 25.86 61.67 25.23 61.38 25.22 C61.09 25.22 60.88 25.84 61.75 25.86 C62.63 25.88 62.45 25.25 62.16 25.24 C61.87 25.24 61.66 25.86 62.53 25.88 C63.40 25.90 63.22 25.27 62.93 25.26 C62.64 25.26 62.43 25.88 63.31 25.89 C64.18 25.91 64.00 25.29 63.71 25.28 C63.42 25.27 63.21 25.89 64.08 25.91 C64.96 25.93 64.78 25.30 64.48 25.30 C64.19 25.29 63.99 25.91 64.86 25.93 C65.73 25.94 65.55 25.32 65.26 25.31 C64.97 25.30 64.76 25.92 65.64 25.94 C66.51 25.96 66.33 25.33 66.04 25.32 C65.75 25.32 65.54 25.94 66.41 25.96 C67.29 25.97 67.10 25.34 66.81 25.34 C66.52 25.33 66.32 25.95 67.19 25.97 C68.06 25.99 67.88 25.36 67.59 25.35 C67.30 25.35 67.09 25.97 67.97 25.98 C68.84 26.00 68.66 25.37 68.37 25.37 C68.08 25.36 67.87 25.98 68.74 26.00 C69.62 26.01 69.43 25.39 69.14 25.38 C68.85 25.38 68.65 26.00 69.52 26.01 C70.39 26.03 70.21 25.40 69.92 25.39 C69.63 25.39 69.42 26.01 70.30 26.02 C71.17 26.04 70.99 25.41 70.70 25.41 C70.40 25.40 70.20 26.02 71.07 26.04 C71.95 26.05 71.76 25.42 71.47 25.42 C71.18 25.41 70.98 26.03 71.85 26.05 C72.72 26.06 72.54 25.44 72.25 25.43 C71.96 25.43 71.75 26.05 72.63 26.06 C73.50 26.07 73.32 25.45 73.02 25.44 C72.73 25.44 72.53 26.06 73.40 26.07 C74.28 26.09 74.09 25.46 73.80 25.46 C73.51 25.45 73.31 26.07 74.18 26.09 C75.05 26.10 74.96 25.78 74.96 25.78" fill="none"/></g>
<g fill="green" mcviz:r="P1307_V1070_V1183" stroke="green" stroke-linecap="round" stroke-width="0.0688649397676" transform="scale(1.000)"><path d="M60.36 24.50 C60.36 24.50 60.21 24.78 61.03 24.93 C61.84 25.09 61.78 24.45 61.51 24.39 C61.24 24.34 60.93 24.89 61.73 25.08 C62.54 25.27 62.50 24.63 62.24 24.57 C61.97 24.50 61.64 25.05 62.44 25.26 C63.24 25.47 63.21 24.81 62.94 24.75 C62.68 24.68 62.36 25.27 63.17 25.44 C63.98 25.60 63.91 24.93 63.64 24.89 C63.37 24.84 63.10 25.45 63.92 25.56 C64.74 25.66 64.63 25.02 64.36 24.98 C64.09 24.95 63.83 25.55 64.65 25.65 C65.47 25.74 65.36 25.10 65.08 25.07 C64.81 25.04 64.56 25.65 65.39 25.72 C66.21 25.80 66.08 25.16 65.81 25.14 C65.53 25.11 65.30 25.73 66.13 25.79 C66.95 25.85 66.81 25.21 66.53 25.19 C66.26 25.17 66.04 25.79 66.87 25.83 C67.69 25.87 67.54 25.24 67.26 25.22 C66.99 25.21 66.78 25.84 67.61 25.86 C68.44 25.88 68.27 25.25 67.99 25.24 C67.71 25.24 67.52 25.86 68.35 25.87 C69.18 25.88 69.00 25.25 68.72 25.25 C68.45 25.25 68.26 25.87 69.09 25.88 C69.91 25.88 69.73 25.25 69.46 25.25 C69.18 25.25 68.99 25.87 69.82 25.88 C70.65 25.89 70.47 25.26 70.19 25.26 C69.92 25.26 69.73 25.87 70.55 25.89 C71.38 25.90 71.21 25.28 70.93 25.27 C70.66 25.27 70.46 25.88 71.28 25.90 C72.11 25.93 71.95 25.30 71.67 25.29 C71.39 25.28 71.19 25.90 72.01 25.93 C72.84 25.96 72.68 25.34 72.41 25.32 C72.13 25.31 71.92 25.92 72.75 25.96 C73.57 26.00 73.42 25.37 73.14 25.36 C72.87 25.35 72.65 25.96 73.48 26.00 C74.30 26.04 74.15 25.41 73.88 25.40 C73.60 25.38 73.39 26.00 74.21 26.04 C75.04 26.08 74.96 25.77 74.96 25.77" fill="none"/></g>
<g fill="green" mcviz:r="P1468_V1052_V1183" stroke="green" stroke-linecap="round" stroke-width="0.0364718153883" transform="scale(1.000)"><path d="M42.74 27.94 C42.74 27.94 42.69 28.25 43.54 28.11 C44.40 27.98 44.12 27.41 43.83 27.44 C43.55 27.48 43.44 28.12 44.30 28.01 C45.15 27.90 44.89 27.31 44.60 27.35 C44.31 27.38 44.20 28.02 45.06 27.92 C45.92 27.82 45.65 27.22 45.37 27.26 C45.08 27.29 44.96 27.93 45.82 27.83 C46.68 27.74 46.42 27.14 46.13 27.17 C45.85 27.20 45.72 27.84 46.58 27.75 C47.44 27.66 47.19 27.06 46.90 27.09 C46.61 27.12 46.49 27.76 47.35 27.67 C48.21 27.58 47.95 26.98 47.67 27.01 C47.38 27.04 47.25 27.68 48.11 27.59 C48.97 27.51 48.72 26.90 48.43 26.93 C48.15 26.96 48.01 27.60 48.88 27.52 C49.74 27.43 49.49 26.83 49.20 26.86 C48.91 26.89 48.78 27.53 49.64 27.44 C50.50 27.36 50.25 26.76 49.97 26.79 C49.68 26.81 49.55 27.45 50.41 27.37 C51.27 27.29 51.02 26.69 50.73 26.71 C50.45 26.74 50.31 27.38 51.17 27.30 C52.04 27.22 51.79 26.62 51.50 26.64 C51.21 26.67 51.08 27.31 51.94 27.23 C52.80 27.15 52.55 26.55 52.27 26.57 C51.98 26.60 51.84 27.24 52.70 27.16 C53.57 27.09 53.32 26.48 53.03 26.51 C52.75 26.53 52.61 27.17 53.47 27.10 C54.33 27.02 54.09 26.42 53.80 26.44 C53.51 26.47 53.37 27.10 54.24 27.03 C55.10 26.96 54.86 26.35 54.57 26.38 C54.28 26.40 54.14 27.04 55.00 26.97 C55.87 26.90 55.62 26.29 55.34 26.31 C55.05 26.34 54.91 26.97 55.77 26.90 C56.63 26.84 56.39 26.23 56.10 26.25 C55.82 26.28 55.67 26.91 56.54 26.84 C57.40 26.78 57.16 26.17 56.87 26.19 C56.58 26.21 56.44 26.85 57.30 26.79 C58.17 26.72 57.93 26.11 57.64 26.14 C57.35 26.16 57.21 26.79 58.07 26.73 C58.93 26.67 58.70 26.06 58.41 26.08 C58.12 26.10 57.97 26.73 58.84 26.68 C59.70 26.62 59.47 26.01 59.18 26.03 C58.89 26.05 58.74 26.68 59.60 26.63 C60.47 26.58 60.24 25.97 59.95 25.98 C59.66 26.00 59.50 26.63 60.37 26.59 C61.23 26.54 61.01 25.93 60.72 25.94 C60.43 25.96 60.27 26.59 61.13 26.55 C62.00 26.50 61.78 25.89 61.49 25.90 C61.20 25.92 61.04 26.55 61.90 26.51 C62.77 26.47 62.55 25.86 62.26 25.87 C61.97 25.88 61.80 26.51 62.67 26.48 C63.53 26.45 63.32 25.83 63.03 25.84 C62.74 25.85 62.57 26.48 63.44 26.46 C64.30 26.43 64.09 25.81 63.80 25.82 C63.51 25.83 63.34 26.45 64.20 26.44 C65.07 26.42 64.86 25.80 64.57 25.80 C64.29 25.81 64.10 26.43 64.97 26.42 C65.84 26.41 65.63 25.79 65.34 25.79 C65.06 25.79 64.87 26.42 65.74 26.41 C66.60 26.40 66.40 25.78 66.11 25.78 C65.83 25.78 65.64 26.41 66.51 26.40 C67.37 26.39 67.17 25.77 66.88 25.77 C66.60 25.77 66.41 26.40 67.28 26.39 C68.14 26.38 67.94 25.76 67.65 25.76 C67.36 25.77 67.18 26.39 68.05 26.38 C68.91 26.37 68.71 25.74 68.42 25.75 C68.13 25.75 67.95 26.38 68.82 26.37 C69.68 26.35 69.48 25.73 69.19 25.73 C68.90 25.74 68.72 26.37 69.59 26.35 C70.45 26.33 70.25 25.71 69.96 25.72 C69.67 25.72 69.49 26.35 70.36 26.33 C71.22 26.31 71.01 25.69 70.73 25.70 C70.44 25.70 70.26 26.34 71.13 26.31 C71.99 26.28 71.78 25.66 71.49 25.67 C71.20 25.68 71.03 26.31 71.90 26.28 C72.76 26.25 72.55 25.63 72.26 25.64 C71.97 25.65 71.81 26.29 72.67 26.25 C73.54 26.21 73.32 25.60 73.03 25.61 C72.74 25.62 72.58 26.26 73.44 26.21 C74.31 26.17 74.08 25.56 73.79 25.57 C73.51 25.59 73.35 26.22 74.21 26.17 C75.08 26.13 74.96 25.82 74.96 25.82" fill="none"/></g>
<g fill="blue" mcviz:r="P1367_V1119_V1183" stroke="blue" stroke-linecap="round" stroke-width="0.0500600728116" transform="scale(1.000)"><path d="M53.94 27.71 C54.48 27.75 58.27 28.01 61.28 27.51 C62.52 27.31 62.74 26.90 63.98 26.68 C67.70 26.03 68.72 26.69 72.48 26.29 C73.36 26.20 74.38 26.01 74.97 25.89" fill="none"/><path d="M64.64 26.57L64.19 26.79C64.22 26.71 64.20 26.57 64.14 26.51Z" stroke="none"/></g>
<use mcviz:r="P1367_V1119_V1183" x="60.265" y="27.057" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="red" mcviz:r="P1254_V824_V1197" stroke="red" stroke-linecap="round" stroke-width="0.0460083304805" transform="scale(1.000)"><path d="M7.46 11.62 C7.51 10.50 8.00 1.18 9.12 1.18 C9.12 1.18 9.12 1.18 60.30 1.18 C65.72 1.18 67.08 1.22 72.48 1.58 C73.36 1.64 74.37 1.76 74.96 1.83" fill="none"/><path d="M36.92 1.18L36.44 1.32C36.49 1.25 36.49 1.11 36.44 1.04Z" stroke="none"/></g>
<use mcviz:r="P1254_V824_V1197" x="28.209" y="0.541" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="green" mcviz:r="P1489_V3_V1197" stroke="green" stroke-linecap="round" stroke-width="0.0886738299858" transform="scale(1.000)"><path d="M9.16 9.86 C9.16 9.86 9.46 9.99 9.54 9.10 C9.62 8.22 8.98 8.35 8.95 8.65 C8.92 8.94 9.52 9.20 9.61 8.32 C9.70 7.43 9.06 7.57 9.03 7.86 C9.00 8.16 9.60 8.42 9.69 7.53 C9.79 6.65 9.15 6.78 9.12 7.07 C9.08 7.37 9.68 7.63 9.78 6.75 C9.89 5.87 9.25 5.99 9.21 6.29 C9.17 6.58 9.76 6.85 9.88 5.97 C10.00 5.09 9.36 5.20 9.31 5.50 C9.27 5.79 9.86 6.07 9.99 5.20 C10.12 4.32 9.48 4.42 9.43 4.71 C9.38 5.00 9.96 5.30 10.11 4.42 C10.26 3.55 9.62 3.63 9.56 3.92 C9.51 4.22 10.07 4.53 10.25 3.66 C10.43 2.78 9.79 2.85 9.73 3.14 C9.66 3.43 10.20 3.76 10.43 2.90 C10.66 2.05 10.03 2.07 9.94 2.35 C9.85 2.63 10.28 3.01 10.66 2.21 C11.04 1.41 10.65 1.33 10.42 1.51 C10.18 1.69 10.10 2.02 10.99 2.02 C11.88 2.02 11.68 1.40 11.38 1.40 C11.09 1.40 10.89 2.02 11.78 2.02 C12.67 2.02 12.47 1.40 12.17 1.40 C11.88 1.40 11.68 2.02 12.57 2.02 C13.46 2.02 13.26 1.40 12.96 1.40 C12.67 1.40 12.47 2.02 13.36 2.02 C14.24 2.02 14.05 1.40 13.75 1.40 C13.45 1.40 13.26 2.02 14.15 2.02 C15.04 2.02 14.84 1.40 14.54 1.40 C14.24 1.40 14.05 2.02 14.94 2.02 C15.83 2.02 15.63 1.40 15.33 1.40 C15.03 1.40 14.84 2.02 15.73 2.02 C16.61 2.02 16.42 1.40 16.12 1.40 C15.82 1.40 15.63 2.02 16.52 2.02 C17.40 2.02 17.21 1.40 16.91 1.40 C16.62 1.40 16.42 2.02 17.31 2.02 C18.20 2.02 18.00 1.40 17.70 1.40 C17.41 1.40 17.21 2.02 18.10 2.02 C18.98 2.02 18.79 1.40 18.49 1.40 C18.19 1.40 18.00 2.02 18.88 2.02 C19.77 2.02 19.58 1.40 19.28 1.40 C18.98 1.40 18.79 2.02 19.67 2.02 C20.56 2.02 20.37 1.40 20.07 1.40 C19.77 1.40 19.58 2.02 20.46 2.02 C21.35 2.02 21.16 1.40 20.86 1.40 C20.56 1.40 20.37 2.02 21.25 2.02 C22.14 2.02 21.94 1.40 21.65 1.40 C21.35 1.40 21.16 2.02 22.04 2.02 C22.93 2.02 22.74 1.40 22.44 1.40 C22.14 1.40 21.94 2.02 22.83 2.02 C23.72 2.02 23.52 1.40 23.23 1.40 C22.93 1.40 22.74 2.02 23.62 2.02 C24.51 2.02 24.31 1.40 24.02 1.40 C23.72 1.40 23.53 2.02 24.41 2.02 C25.30 2.02 25.10 1.40 24.81 1.40 C24.51 1.40 24.31 2.02 25.20 2.02 C26.09 2.02 25.90 1.40 25.60 1.40 C25.30 1.40 25.10 2.02 25.99 2.02 C26.88 2.02 26.68 1.40 26.39 1.40 C26.09 1.40 25.89 2.02 26.78 2.02 C27.67 2.02 27.47 1.40 27.18 1.40 C26.88 1.40 26.68 2.02 27.57 2.02 C28.46 2.02 28.26 1.40 27.97 1.40 C27.67 1.40 27.47 2.02 28.36 2.02 C29.25 2.02 29.05 1.40 28.76 1.40 C28.46 1.40 28.26 2.02 29.15 2.02 C30.04 2.02 29.84 1.40 29.55 1.40 C29.25 1.40 29.05 2.02 29.94 2.02 C30.83 2.02 30.63 1.40 30.34 1.40 C30.04 1.40 29.84 2.02 30.73 2.02 C31.62 2.02 31.42 1.40 31.13 1.40 C30.83 1.40 30.63 2.02 31.52 2.02 C32.41 2.02 32.21 1.40 31.92 1.40 C31.62 1.40 31.42 2.02 32.31 2.02 C33.20 2.02 33.00 1.40 32.71 1.40 C32.41 1.40 32.21 2.02 33.10 2.02 C33.99 2.02 33.79 1.40 33.50 1.40 C33.20 1.40 33.00 2.02 33.89 2.02 C34.78 2.02 34.58 1.40 34.29 1.40 C33.99 1.40 33.79 2.02 34.68 2.02 C35.57 2.02 35.37 1.40 35.08 1.40 C34.78 1.40 34.58 2.02 35.47 2.02 C36.36 2.02 36.16 1.40 35.86 1.40 C35.57 1.40 35.37 2.02 36.26 2.02 C37.15 2.02 36.95 1.40 36.65 1.40 C36.36 1.40 36.16 2.02 37.05 2.02 C37.94 2.02 37.74 1.40 37.44 1.40 C37.15 1.40 36.95 2.02 37.84 2.02 C38.73 2.02 38.53 1.40 38.23 1.40 C37.94 1.40 37.74 2.02 38.63 2.02 C39.52 2.02 39.32 1.40 39.03 1.40 C38.73 1.40 38.53 2.02 39.42 2.02 C40.31 2.02 40.11 1.40 39.81 1.40 C39.52 1.40 39.32 2.02 40.21 2.02 C41.10 2.02 40.90 1.40 40.60 1.40 C40.31 1.40 40.11 2.02 41.00 2.02 C41.89 2.02 41.69 1.40 41.39 1.40 C41.10 1.40 40.90 2.02 41.79 2.02 C42.68 2.02 42.48 1.40 42.18 1.40 C41.89 1.40 41.69 2.02 42.58 2.02 C43.47 2.02 43.27 1.40 42.97 1.40 C42.68 1.40 42.48 2.02 43.37 2.02 C44.26 2.02 44.06 1.40 43.76 1.40 C43.47 1.40 43.27 2.02 44.16 2.02 C45.05 2.02 44.85 1.40 44.55 1.40 C44.26 1.40 44.06 2.02 44.95 2.02 C45.84 2.02 45.64 1.40 45.34 1.40 C45.05 1.40 44.85 2.02 45.74 2.02 C46.63 2.02 46.43 1.40 46.13 1.40 C45.84 1.40 45.64 2.02 46.53 2.02 C47.42 2.02 47.22 1.40 46.92 1.40 C46.63 1.40 46.43 2.02 47.32 2.02 C48.20 2.02 48.01 1.40 47.71 1.40 C47.41 1.40 47.22 2.02 48.11 2.02 C49.00 2.02 48.80 1.40 48.50 1.40 C48.20 1.40 48.01 2.02 48.90 2.02 C49.78 2.02 49.59 1.40 49.29 1.40 C49.00 1.40 48.80 2.02 49.69 2.02 C50.57 2.02 50.38 1.40 50.08 1.40 C49.78 1.40 49.59 2.02 50.48 2.02 C51.37 2.02 51.17 1.40 50.87 1.40 C50.57 1.40 50.38 2.02 51.26 2.02 C52.15 2.02 51.96 1.40 51.66 1.40 C51.36 1.40 51.17 2.02 52.06 2.02 C52.94 2.02 52.75 1.40 52.45 1.40 C52.15 1.40 51.96 2.02 52.84 2.02 C53.73 2.02 53.54 1.40 53.24 1.40 C52.95 1.40 52.75 2.02 53.63 2.02 C54.52 2.02 54.33 1.40 54.03 1.40 C53.73 1.40 53.54 2.02 54.43 2.02 C55.31 2.02 55.12 1.40 54.82 1.40 C54.52 1.40 54.33 2.02 55.21 2.02 C56.10 2.02 55.91 1.40 55.61 1.40 C55.31 1.40 55.12 2.02 56.01 2.02 C56.90 2.02 56.69 1.40 56.40 1.40 C56.10 1.40 55.90 2.02 56.79 2.02 C57.68 2.02 57.49 1.40 57.19 1.40 C56.89 1.40 56.70 2.02 57.58 2.02 C58.47 2.02 58.27 1.40 57.98 1.40 C57.68 1.40 57.48 2.02 58.37 2.02 C59.26 2.02 59.07 1.40 58.77 1.40 C58.47 1.40 58.28 2.02 59.16 2.02 C60.05 2.02 59.85 1.40 59.56 1.40 C59.26 1.40 59.06 2.02 59.95 2.02 C60.84 2.02 60.65 1.40 60.35 1.40 C60.05 1.40 59.86 2.02 60.75 2.02 C61.63 2.02 61.44 1.40 61.14 1.40 C60.85 1.40 60.65 2.02 61.53 2.02 C62.42 2.03 62.23 1.40 61.93 1.40 C61.64 1.40 61.44 2.02 62.32 2.03 C63.21 2.03 63.02 1.41 62.72 1.40 C62.43 1.40 62.22 2.02 63.11 2.03 C64.00 2.04 63.81 1.41 63.51 1.41 C63.22 1.41 63.01 2.03 63.90 2.04 C64.79 2.04 64.60 1.42 64.30 1.41 C64.01 1.41 63.80 2.03 64.69 2.04 C65.58 2.05 65.39 1.42 65.09 1.42 C64.80 1.42 64.59 2.04 65.48 2.05 C66.37 2.06 66.18 1.43 65.88 1.43 C65.59 1.43 65.38 2.05 66.27 2.06 C67.16 2.07 66.97 1.44 66.67 1.44 C66.38 1.43 66.17 2.06 67.06 2.07 C67.95 2.08 67.76 1.45 67.46 1.45 C67.17 1.44 66.96 2.06 67.85 2.08 C68.74 2.09 68.55 1.46 68.25 1.46 C67.96 1.45 67.75 2.07 68.64 2.09 C69.53 2.10 69.34 1.47 69.04 1.47 C68.75 1.46 68.54 2.08 69.43 2.10 C70.32 2.11 70.13 1.48 69.83 1.48 C69.54 1.47 69.33 2.09 70.22 2.11 C71.11 2.12 70.92 1.49 70.62 1.49 C70.33 1.49 70.12 2.11 71.01 2.12 C71.90 2.13 71.71 1.51 71.41 1.50 C71.12 1.50 70.91 2.12 71.80 2.13 C72.69 2.15 72.50 1.52 72.20 1.52 C71.91 1.51 71.70 2.13 72.59 2.15 C73.48 2.16 73.29 1.53 72.99 1.53 C72.70 1.52 72.49 2.14 73.38 2.16 C74.26 2.18 74.08 1.55 73.78 1.54 C73.49 1.54 73.28 2.16 74.17 2.18 C75.05 2.19 74.96 1.88 74.96 1.88" fill="none"/></g>
<g fill="green" mcviz:r="P835_V691_V1197" stroke="green" stroke-linecap="round" stroke-width="0.0915099739778" transform="scale(1.000)"><path d="M60.36 3.42 C60.36 3.42 60.38 3.73 61.16 3.42 C61.93 3.12 61.54 2.61 61.28 2.71 C61.02 2.81 61.06 3.45 61.84 3.17 C62.62 2.89 62.25 2.37 61.99 2.46 C61.72 2.55 61.74 3.19 62.53 2.94 C63.33 2.69 62.97 2.15 62.70 2.23 C62.44 2.31 62.42 2.95 63.23 2.74 C64.03 2.52 63.71 1.98 63.44 2.04 C63.17 2.10 63.11 2.73 63.93 2.58 C64.75 2.42 64.47 1.86 64.19 1.90 C63.92 1.94 63.81 2.57 64.64 2.47 C65.47 2.38 65.22 1.79 64.94 1.82 C64.67 1.84 64.53 2.47 65.36 2.41 C66.20 2.34 65.97 1.74 65.69 1.76 C65.41 1.78 65.27 2.41 66.10 2.36 C66.93 2.31 66.71 1.70 66.43 1.72 C66.16 1.73 66.00 2.36 66.83 2.32 C67.67 2.28 67.45 1.67 67.18 1.68 C66.90 1.69 66.74 2.32 67.57 2.29 C68.40 2.26 68.20 1.65 67.92 1.65 C67.64 1.66 67.48 2.29 68.31 2.27 C69.14 2.24 68.94 1.63 68.66 1.63 C68.38 1.64 68.21 2.27 69.05 2.25 C69.88 2.23 69.68 1.61 69.40 1.61 C69.13 1.62 68.95 2.25 69.79 2.23 C70.62 2.22 70.42 1.60 70.14 1.60 C69.87 1.61 69.69 2.23 70.52 2.22 C71.36 2.21 71.16 1.59 70.89 1.59 C70.61 1.59 70.43 2.22 71.26 2.21 C72.10 2.20 71.91 1.58 71.63 1.58 C71.35 1.58 71.17 2.21 72.00 2.20 C72.84 2.20 72.65 1.57 72.37 1.58 C72.09 1.58 71.91 2.20 72.74 2.20 C73.58 2.19 73.39 1.57 73.11 1.57 C72.83 1.57 72.65 2.20 73.48 2.20 C74.32 2.19 74.13 1.57 73.85 1.57 C73.57 1.57 73.39 2.19 74.22 2.20 C75.06 2.20 74.96 1.89 74.96 1.89" fill="none"/></g>
<g fill="blue" mcviz:r="P834_V691_V1197" stroke="blue" stroke-linecap="round" stroke-width="0.0421319791987" transform="scale(1.000)"><path d="M60.36 3.45 C61.26 3.48 71.22 3.80 72.48 3.49 C73.48 3.23 74.51 2.58 75.06 2.19" fill="none"/><path d="M68.12 3.62L67.63 3.76C67.68 3.69 67.68 3.54 67.64 3.47Z" stroke="none"/></g>
<use mcviz:r="P834_V691_V1197" x="68.192" y="2.914" transform="scale(1.000)" xlink:href="#pdg-2" />
<g fill="red" mcviz:r="P1259_V1039_V1231" stroke="red" stroke-linecap="round" stroke-width="0.177680260103" transform="scale(1.000)"><path d="M17.28 21.98 C17.39 21.81 17.76 21.30 18.21 21.10 C19.52 20.52 20.00 20.90 21.42 20.90 C21.42 20.90 21.42 20.90 34.35 20.90 C37.22 20.90 37.93 21.06 40.80 21.01 C42.44 20.99 42.85 20.90 44.49 20.90 C44.49 20.90 44.49 20.90 60.30 20.90 C65.71 20.90 67.12 21.47 72.48 20.71 C73.39 20.58 74.41 20.26 74.99 20.06" fill="none"/><path d="M46.22 20.90L45.74 21.05C45.79 20.97 45.79 20.83 45.74 20.76Z" stroke="none"/></g>
<use mcviz:r="P1259_V1039_V1231" x="39.997" y="20.486" transform="scale(1.000)" xlink:href="#pdg5" />
<g fill="green" mcviz:r="P1533_V3_V1231" stroke="green" stroke-linecap="round" stroke-width="0.0601393897208" transform="scale(1.000)"><path d="M9.53 10.66 C9.53 10.66 9.29 11.03 10.14 11.30 C10.99 11.57 10.94 10.79 10.65 10.77 C10.35 10.75 10.13 11.40 11.02 11.40 C11.91 11.40 11.71 10.77 11.41 10.77 C11.12 10.77 10.92 11.40 11.81 11.40 C12.69 11.40 12.50 10.77 12.20 10.77 C11.91 10.77 11.71 11.40 12.60 11.40 C13.48 11.40 13.29 10.77 12.99 10.77 C12.69 10.77 12.50 11.40 13.39 11.40 C14.27 11.40 14.08 10.77 13.78 10.77 C13.48 10.77 13.29 11.40 14.18 11.40 C15.06 11.40 14.87 10.77 14.57 10.77 C14.27 10.77 14.08 11.40 14.97 11.40 C15.85 11.40 15.66 10.77 15.36 10.77 C15.06 10.77 14.86 11.39 15.75 11.40 C16.64 11.41 16.46 10.80 16.17 10.79 C15.87 10.77 15.63 11.36 16.52 11.43 C17.40 11.51 17.27 10.90 16.98 10.86 C16.68 10.82 16.40 11.38 17.27 11.54 C18.14 11.70 18.07 11.08 17.79 11.01 C17.50 10.94 17.15 11.46 18.01 11.71 C18.86 11.97 18.85 11.34 18.57 11.24 C18.30 11.14 17.90 11.62 18.72 11.97 C19.53 12.31 19.60 11.69 19.33 11.56 C19.07 11.43 18.62 11.87 19.40 12.30 C20.17 12.73 20.30 12.11 20.05 11.96 C19.80 11.80 19.31 12.20 20.05 12.70 C20.79 13.19 20.97 12.58 20.73 12.41 C20.49 12.24 19.97 12.61 20.68 13.15 C21.39 13.68 21.60 13.07 21.37 12.89 C21.13 12.71 20.60 13.08 21.30 13.62 C22.00 14.17 22.23 13.55 21.99 13.37 C21.76 13.19 21.22 13.57 21.93 14.11 C22.63 14.65 22.85 14.02 22.62 13.84 C22.38 13.67 21.85 14.07 22.57 14.58 C23.30 15.09 23.50 14.45 23.25 14.29 C23.00 14.12 22.49 14.56 23.25 15.03 C24.01 15.49 24.16 14.84 23.91 14.69 C23.65 14.54 23.17 15.02 23.95 15.43 C24.74 15.84 24.85 15.17 24.59 15.04 C24.32 14.92 23.87 15.43 24.69 15.78 C25.51 16.13 25.57 15.45 25.29 15.35 C25.01 15.24 24.61 15.78 25.45 16.07 C26.29 16.36 26.30 15.68 26.02 15.60 C25.73 15.51 25.36 16.07 26.22 16.30 C27.08 16.54 27.05 15.87 26.76 15.80 C26.47 15.73 26.13 16.30 27.00 16.50 C27.87 16.70 27.81 16.04 27.52 15.97 C27.23 15.91 26.91 16.49 27.78 16.66 C28.66 16.83 28.58 16.17 28.29 16.12 C27.99 16.07 27.70 16.67 28.57 16.80 C29.45 16.94 29.35 16.28 29.05 16.24 C28.76 16.20 28.49 16.81 29.37 16.91 C30.25 17.00 30.12 16.35 29.82 16.32 C29.53 16.30 29.29 16.92 30.17 16.97 C31.06 17.03 30.89 16.38 30.60 16.37 C30.30 16.36 30.09 16.99 30.97 17.00 C31.86 17.02 31.67 16.38 31.38 16.38 C31.08 16.38 30.88 17.02 31.77 17.01 C32.66 17.00 32.46 16.37 32.16 16.38 C31.86 16.38 31.68 17.01 32.57 16.99 C33.45 16.98 33.24 16.36 32.95 16.36 C32.65 16.37 32.46 16.99 33.35 16.98 C34.24 16.97 34.04 16.35 33.74 16.35 C33.45 16.36 33.25 16.97 34.14 16.98 C35.03 16.98 34.83 16.36 34.54 16.36 C34.24 16.35 34.03 16.97 34.92 16.99 C35.81 17.01 35.63 16.39 35.33 16.38 C35.04 16.37 34.82 16.97 35.70 17.02 C36.59 17.06 36.43 16.43 36.13 16.41 C35.83 16.40 35.60 17.00 36.49 17.06 C37.37 17.12 37.22 16.48 36.92 16.47 C36.63 16.45 36.39 17.06 37.27 17.11 C38.16 17.17 38.00 16.53 37.71 16.52 C37.41 16.50 37.18 17.11 38.06 17.16 C38.95 17.21 38.79 16.58 38.49 16.56 C38.20 16.54 37.97 17.16 38.85 17.21 C39.74 17.25 39.58 16.62 39.28 16.60 C38.99 16.59 38.76 17.20 39.64 17.25 C40.53 17.29 40.36 16.66 40.07 16.64 C39.77 16.63 39.55 17.24 40.44 17.28 C41.32 17.32 41.15 16.69 40.86 16.68 C40.56 16.66 40.34 17.28 41.22 17.32 C42.11 17.36 41.94 16.72 41.65 16.71 C41.35 16.70 41.13 17.31 42.01 17.35 C42.90 17.39 42.73 16.76 42.44 16.75 C42.14 16.73 41.91 17.34 42.80 17.39 C43.69 17.43 43.52 16.80 43.23 16.79 C42.93 16.77 42.70 17.38 43.59 17.43 C44.47 17.48 44.31 16.85 44.02 16.83 C43.72 16.81 43.48 17.42 44.37 17.48 C45.26 17.54 45.10 16.91 44.81 16.89 C44.51 16.87 44.27 17.47 45.16 17.54 C46.04 17.61 45.89 16.97 45.60 16.95 C45.30 16.92 45.05 17.53 45.94 17.60 C46.82 17.68 46.68 17.05 46.39 17.02 C46.09 16.99 45.84 17.59 46.72 17.68 C47.61 17.76 47.47 17.12 47.18 17.09 C46.88 17.06 46.62 17.66 47.51 17.76 C48.39 17.85 48.26 17.21 47.97 17.18 C47.67 17.14 47.41 17.74 48.29 17.84 C49.17 17.94 49.05 17.30 48.75 17.26 C48.46 17.23 48.19 17.82 49.07 17.93 C49.95 18.04 49.83 17.40 49.54 17.36 C49.25 17.32 48.97 17.91 49.85 18.03 C50.73 18.14 50.62 17.50 50.33 17.46 C50.03 17.42 49.75 18.01 50.63 18.14 C51.51 18.26 51.41 17.62 51.11 17.58 C50.82 17.53 50.53 18.11 51.41 18.25 C52.29 18.39 52.19 17.75 51.90 17.70 C51.60 17.65 51.31 18.23 52.18 18.38 C53.06 18.53 52.97 17.88 52.68 17.83 C52.39 17.78 52.08 18.36 52.96 18.52 C53.83 18.68 53.75 18.03 53.46 17.98 C53.17 17.92 52.86 18.49 53.73 18.66 C54.60 18.83 54.53 18.18 54.24 18.13 C53.95 18.07 53.63 18.64 54.50 18.82 C55.37 18.99 55.30 18.34 55.01 18.28 C54.72 18.22 54.40 18.79 55.27 18.98 C56.14 19.16 56.08 18.51 55.79 18.45 C55.50 18.38 55.18 18.96 56.05 19.14 C56.92 19.32 56.85 18.67 56.56 18.61 C56.27 18.55 55.95 19.12 56.82 19.30 C57.69 19.47 57.62 18.82 57.33 18.76 C57.04 18.71 56.73 19.28 57.60 19.45 C58.47 19.62 58.40 18.97 58.10 18.91 C57.81 18.86 57.51 19.44 58.38 19.60 C59.25 19.75 59.17 19.10 58.88 19.05 C58.59 19.00 58.29 19.59 59.16 19.73 C60.04 19.88 59.94 19.22 59.65 19.18 C59.36 19.13 59.07 19.72 59.95 19.85 C60.83 19.98 60.72 19.33 60.43 19.29 C60.13 19.25 59.85 19.85 60.73 19.96 C61.62 20.08 61.50 19.43 61.21 19.40 C60.91 19.36 60.64 19.96 61.52 20.06 C62.41 20.17 62.28 19.52 61.99 19.49 C61.69 19.45 61.43 20.06 62.31 20.15 C63.20 20.24 63.06 19.60 62.77 19.57 C62.47 19.54 62.22 20.15 63.10 20.23 C63.99 20.31 63.85 19.66 63.55 19.64 C63.26 19.61 63.01 20.22 63.89 20.29 C64.78 20.36 64.63 19.72 64.33 19.70 C64.04 19.68 63.80 20.29 64.69 20.35 C65.57 20.40 65.41 19.76 65.12 19.75 C64.82 19.73 64.59 20.35 65.48 20.39 C66.37 20.43 66.20 19.79 65.90 19.78 C65.60 19.77 65.39 20.39 66.27 20.42 C67.16 20.45 66.98 19.81 66.69 19.81 C66.39 19.80 66.18 20.42 67.07 20.44 C67.96 20.46 67.77 19.83 67.47 19.82 C67.18 19.82 66.97 20.44 67.86 20.45 C68.75 20.46 68.55 19.83 68.26 19.83 C67.96 19.83 67.76 20.45 68.65 20.45 C69.54 20.45 69.34 19.83 69.05 19.83 C68.75 19.83 68.56 20.46 69.45 20.45 C70.33 20.44 70.13 19.81 69.83 19.82 C69.54 19.82 69.35 20.45 70.24 20.44 C71.13 20.42 70.92 19.80 70.62 19.80 C70.32 19.81 70.14 20.44 71.03 20.42 C71.92 20.39 71.70 19.77 71.41 19.78 C71.11 19.79 70.93 20.42 71.82 20.39 C72.71 20.36 72.49 19.74 72.19 19.75 C71.90 19.77 71.73 20.40 72.61 20.36 C73.50 20.32 73.28 19.71 72.98 19.72 C72.68 19.74 72.52 20.37 73.40 20.33 C74.29 20.28 74.06 19.67 73.77 19.68 C73.47 19.70 73.31 20.33 74.20 20.28 C75.08 20.23 74.97 19.92 74.97 19.92" fill="none"/></g>
<g fill="green" mcviz:r="P1550_V58_V1231" stroke="green" stroke-linecap="round" stroke-width="0.0763699074788" transform="scale(1.000)"><path d="M32.24 13.17 C32.24 13.17 31.99 13.42 32.75 13.86 C33.51 14.30 33.65 13.63 33.39 13.50 C33.12 13.37 32.67 13.86 33.47 14.23 C34.27 14.59 34.36 13.95 34.09 13.83 C33.83 13.70 33.38 14.18 34.18 14.56 C34.97 14.94 35.06 14.28 34.80 14.16 C34.53 14.04 34.09 14.55 34.90 14.89 C35.72 15.22 35.77 14.53 35.49 14.44 C35.21 14.35 34.84 14.94 35.69 15.15 C36.55 15.36 36.49 14.66 36.20 14.61 C35.91 14.57 35.63 15.20 36.51 15.28 C37.39 15.36 37.23 14.69 36.94 14.68 C36.65 14.67 36.44 15.31 37.32 15.31 C38.20 15.31 38.00 14.69 37.71 14.69 C37.42 14.69 37.22 15.31 38.10 15.31 C38.98 15.31 38.79 14.69 38.49 14.69 C38.20 14.69 38.00 15.31 38.88 15.31 C39.76 15.31 39.57 14.69 39.27 14.69 C38.98 14.69 38.79 15.31 39.67 15.31 C40.55 15.31 40.35 14.69 40.06 14.69 C39.76 14.69 39.57 15.31 40.45 15.31 C41.33 15.31 41.13 14.69 40.84 14.69 C40.55 14.69 40.35 15.31 41.23 15.31 C42.11 15.31 41.91 14.69 41.62 14.69 C41.33 14.69 41.13 15.31 42.01 15.31 C42.89 15.31 42.70 14.69 42.40 14.69 C42.11 14.69 41.91 15.31 42.80 15.31 C43.68 15.31 43.48 14.69 43.19 14.69 C42.89 14.69 42.70 15.31 43.58 15.31 C44.46 15.31 44.26 14.69 43.97 14.69 C43.68 14.69 43.48 15.31 44.36 15.31 C45.24 15.31 45.04 14.69 44.75 14.69 C44.46 14.69 44.27 15.32 45.15 15.31 C46.03 15.30 45.82 14.68 45.53 14.68 C45.24 14.68 45.05 15.30 45.93 15.30 C46.81 15.29 46.61 14.68 46.32 14.68 C46.03 14.67 45.81 15.27 46.69 15.31 C47.57 15.35 47.41 14.73 47.12 14.71 C46.83 14.69 46.58 15.27 47.45 15.37 C48.33 15.47 48.21 14.84 47.92 14.80 C47.63 14.76 47.34 15.34 48.21 15.47 C49.08 15.61 48.99 14.97 48.70 14.92 C48.41 14.87 48.11 15.45 48.98 15.60 C49.84 15.76 49.77 15.12 49.48 15.06 C49.19 15.01 48.88 15.58 49.74 15.75 C50.60 15.93 50.54 15.28 50.25 15.22 C49.96 15.16 49.64 15.72 50.50 15.91 C51.35 16.11 51.31 15.47 51.02 15.40 C50.74 15.33 50.40 15.88 51.25 16.10 C52.10 16.32 52.07 15.67 51.79 15.59 C51.50 15.52 51.15 16.06 52.00 16.30 C52.84 16.54 52.83 15.89 52.55 15.81 C52.27 15.73 51.90 16.26 52.74 16.52 C53.58 16.79 53.58 16.14 53.30 16.05 C53.02 15.96 52.64 16.48 53.47 16.76 C54.31 17.05 54.33 16.40 54.05 16.30 C53.77 16.20 53.38 16.72 54.20 17.02 C55.03 17.33 55.06 16.68 54.79 16.57 C54.51 16.47 54.11 16.98 54.93 17.30 C55.75 17.61 55.80 16.96 55.52 16.86 C55.25 16.75 54.84 17.26 55.66 17.58 C56.48 17.90 56.52 17.25 56.25 17.15 C55.98 17.04 55.57 17.55 56.39 17.87 C57.20 18.19 57.25 17.54 56.98 17.43 C56.70 17.33 56.30 17.84 57.12 18.16 C57.94 18.47 57.98 17.81 57.70 17.71 C57.43 17.61 57.03 18.13 57.85 18.43 C58.68 18.73 58.71 18.08 58.43 17.98 C58.16 17.88 57.76 18.41 58.60 18.70 C59.43 18.98 59.45 18.32 59.17 18.23 C58.89 18.14 58.51 18.68 59.35 18.94 C60.19 19.20 60.19 18.54 59.91 18.46 C59.62 18.37 59.26 18.93 60.11 19.16 C60.96 19.40 60.93 18.74 60.65 18.67 C60.37 18.59 60.02 19.15 60.87 19.37 C61.73 19.58 61.69 18.92 61.40 18.85 C61.12 18.79 60.78 19.36 61.64 19.55 C62.50 19.74 62.44 19.08 62.16 19.02 C61.87 18.96 61.55 19.54 62.42 19.71 C63.28 19.88 63.21 19.23 62.92 19.17 C62.63 19.12 62.32 19.71 63.19 19.86 C64.06 20.01 63.97 19.35 63.68 19.30 C63.39 19.26 63.10 19.85 63.97 19.98 C64.84 20.11 64.73 19.44 64.44 19.41 C64.15 19.38 63.89 20.00 64.77 20.07 C65.65 20.14 65.50 19.49 65.21 19.47 C64.91 19.46 64.68 20.07 65.56 20.12 C66.44 20.17 66.27 19.53 65.98 19.52 C65.69 19.50 65.47 20.12 66.35 20.16 C67.22 20.19 67.05 19.56 66.76 19.55 C66.47 19.54 66.25 20.16 67.13 20.18 C68.01 20.21 67.83 19.58 67.54 19.57 C67.24 19.56 67.04 20.19 67.92 20.20 C68.80 20.22 68.61 19.59 68.32 19.59 C68.02 19.58 67.82 20.20 68.70 20.22 C69.58 20.23 69.39 19.60 69.10 19.60 C68.81 19.60 68.60 20.22 69.48 20.23 C70.36 20.23 70.17 19.61 69.88 19.61 C69.59 19.60 69.39 20.23 70.27 20.23 C71.15 20.24 70.95 19.61 70.66 19.61 C70.37 19.61 70.17 20.23 71.05 20.23 C71.93 20.24 71.74 19.61 71.44 19.61 C71.15 19.61 70.95 20.24 71.83 20.23 C72.71 20.23 72.52 19.61 72.22 19.61 C71.93 19.61 71.74 20.24 72.62 20.23 C73.50 20.23 73.30 19.60 73.01 19.61 C72.71 19.61 72.52 20.23 73.40 20.23 C74.28 20.22 74.08 19.60 73.79 19.60 C73.49 19.60 73.30 20.23 74.18 20.22 C75.06 20.21 74.96 19.90 74.96 19.90" fill="none"/></g>
<g fill="green" mcviz:r="P30_V24_V1231" stroke="green" stroke-linecap="round" stroke-width="0.0773843450026" transform="scale(1.000)"><path d="M14.01 21.97 C14.01 21.97 14.13 22.18 14.61 21.44 C15.10 20.71 14.59 20.54 14.38 20.74 C14.17 20.95 14.33 21.46 15.08 20.99 C15.83 20.53 15.36 20.11 15.10 20.26 C14.84 20.40 14.94 21.01 15.73 20.63 C16.53 20.25 16.12 19.80 15.85 19.90 C15.57 20.01 15.58 20.62 16.42 20.36 C17.27 20.11 16.93 19.60 16.65 19.66 C16.36 19.72 16.26 20.32 17.14 20.21 C18.02 20.09 17.76 19.53 17.47 19.55 C17.18 19.57 17.00 20.17 17.88 20.16 C18.77 20.15 18.58 19.55 18.28 19.54 C17.99 19.53 17.77 20.14 18.65 20.18 C19.54 20.22 19.37 19.58 19.07 19.57 C18.78 19.56 18.56 20.19 19.45 20.21 C20.33 20.22 20.14 19.58 19.84 19.59 C19.55 19.59 19.37 20.24 20.25 20.20 C21.13 20.17 20.90 19.53 20.61 19.55 C20.31 19.58 20.18 20.24 21.06 20.14 C21.93 20.04 21.65 19.42 21.36 19.47 C21.07 19.51 20.98 20.17 21.85 20.02 C22.72 19.88 22.42 19.29 22.13 19.34 C21.84 19.39 21.76 20.05 22.63 19.89 C23.50 19.73 23.19 19.15 22.90 19.20 C22.61 19.26 22.54 19.91 23.40 19.74 C24.27 19.57 23.96 19.00 23.67 19.05 C23.38 19.11 23.30 19.75 24.17 19.59 C25.04 19.43 24.74 18.86 24.45 18.91 C24.16 18.96 24.07 19.60 24.94 19.46 C25.81 19.32 25.52 18.74 25.23 18.78 C24.94 18.82 24.83 19.46 25.71 19.35 C26.58 19.23 26.31 18.65 26.02 18.68 C25.73 18.71 25.60 19.35 26.48 19.26 C27.36 19.16 27.10 18.56 26.80 18.59 C26.51 18.62 26.38 19.26 27.26 19.17 C28.14 19.08 27.88 18.48 27.59 18.51 C27.29 18.54 27.16 19.18 28.04 19.09 C28.92 19.01 28.66 18.41 28.37 18.43 C28.08 18.46 27.94 19.10 28.82 19.02 C29.70 18.94 29.45 18.34 29.16 18.36 C28.86 18.39 28.72 19.02 29.60 18.95 C30.48 18.88 30.23 18.27 29.94 18.30 C29.65 18.32 29.50 18.95 30.38 18.89 C31.26 18.82 31.02 18.22 30.73 18.24 C30.43 18.26 30.28 18.89 31.16 18.84 C32.04 18.78 31.81 18.17 31.51 18.19 C31.22 18.21 31.06 18.84 31.94 18.79 C32.82 18.74 32.60 18.13 32.30 18.15 C32.01 18.16 31.84 18.79 32.72 18.75 C33.61 18.72 33.38 18.10 33.09 18.11 C32.80 18.13 32.62 18.75 33.50 18.72 C34.39 18.70 34.17 18.08 33.88 18.09 C33.58 18.10 33.40 18.72 34.29 18.70 C35.17 18.68 34.96 18.06 34.66 18.07 C34.37 18.07 34.19 18.70 35.07 18.68 C35.96 18.66 35.75 18.04 35.45 18.05 C35.16 18.06 34.97 18.68 35.86 18.67 C36.74 18.65 36.53 18.03 36.24 18.03 C35.94 18.04 35.76 18.67 36.64 18.65 C37.53 18.63 37.32 18.01 37.02 18.02 C36.73 18.02 36.54 18.65 37.43 18.63 C38.31 18.61 38.10 17.99 37.81 18.00 C37.51 18.01 37.33 18.64 38.21 18.61 C39.10 18.59 38.89 17.97 38.59 17.98 C38.30 17.99 38.12 18.62 39.00 18.59 C39.88 18.57 39.67 17.95 39.38 17.96 C39.08 17.97 38.90 18.59 39.78 18.58 C40.67 18.56 40.46 17.94 40.17 17.95 C39.87 17.95 39.68 18.57 40.57 18.56 C41.45 18.56 41.25 17.94 40.95 17.94 C40.66 17.94 40.46 18.56 41.35 18.56 C42.23 18.56 42.04 17.94 41.74 17.94 C41.45 17.94 41.25 18.55 42.13 18.56 C43.01 18.57 42.83 17.95 42.53 17.94 C42.24 17.94 42.03 18.56 42.91 18.58 C43.80 18.59 43.61 17.97 43.32 17.96 C43.03 17.95 42.81 18.57 43.69 18.60 C44.58 18.62 44.40 18.00 44.11 17.99 C43.81 17.97 43.59 18.59 44.48 18.63 C45.36 18.66 45.19 18.04 44.90 18.02 C44.60 18.01 44.37 18.61 45.26 18.67 C46.14 18.72 45.98 18.08 45.69 18.07 C45.39 18.05 45.15 18.65 46.04 18.72 C46.92 18.78 46.77 18.14 46.47 18.12 C46.18 18.10 45.93 18.70 46.82 18.78 C47.70 18.85 47.55 18.21 47.26 18.19 C46.97 18.16 46.71 18.76 47.59 18.85 C48.47 18.93 48.34 18.29 48.05 18.26 C47.75 18.23 47.49 18.83 48.37 18.93 C49.25 19.02 49.12 18.38 48.83 18.35 C48.54 18.31 48.27 18.91 49.15 19.01 C50.03 19.12 49.91 18.48 49.61 18.44 C49.32 18.41 49.05 19.00 49.92 19.11 C50.80 19.23 50.69 18.58 50.40 18.54 C50.10 18.51 49.83 19.09 50.70 19.22 C51.58 19.34 51.47 18.69 51.18 18.65 C50.88 18.61 50.60 19.20 51.48 19.32 C52.35 19.45 52.25 18.81 51.95 18.76 C51.66 18.72 51.38 19.31 52.25 19.44 C53.13 19.57 53.02 18.92 52.73 18.88 C52.44 18.83 52.16 19.42 53.03 19.55 C53.90 19.68 53.80 19.04 53.51 18.99 C53.22 18.95 52.93 19.54 53.81 19.67 C54.68 19.79 54.58 19.15 54.29 19.11 C53.99 19.06 53.71 19.65 54.59 19.78 C55.46 19.90 55.35 19.26 55.06 19.22 C54.77 19.18 54.49 19.77 55.37 19.89 C56.24 20.01 56.13 19.36 55.84 19.32 C55.55 19.28 55.27 19.88 56.15 19.99 C57.02 20.11 56.91 19.46 56.62 19.42 C56.32 19.39 56.05 19.98 56.93 20.09 C57.81 20.20 57.69 19.55 57.39 19.52 C57.10 19.48 56.83 20.08 57.71 20.18 C58.59 20.28 58.46 19.64 58.17 19.61 C57.88 19.58 57.62 20.18 58.49 20.27 C59.37 20.36 59.24 19.72 58.95 19.69 C58.66 19.66 58.40 20.26 59.28 20.35 C60.16 20.43 60.02 19.79 59.73 19.76 C59.43 19.74 59.18 20.34 60.06 20.42 C60.94 20.50 60.80 19.85 60.51 19.83 C60.21 19.81 59.97 20.42 60.85 20.48 C61.73 20.55 61.58 19.91 61.29 19.89 C60.99 19.87 60.75 20.48 61.64 20.54 C62.52 20.60 62.36 19.96 62.07 19.94 C61.78 19.93 61.54 20.54 62.42 20.59 C63.30 20.64 63.14 20.01 62.85 19.99 C62.56 19.98 62.33 20.59 63.21 20.64 C64.09 20.68 63.93 20.05 63.63 20.03 C63.34 20.02 63.11 20.63 64.00 20.67 C64.88 20.71 64.71 20.08 64.42 20.07 C64.12 20.06 63.90 20.67 64.78 20.71 C65.66 20.75 65.50 20.12 65.20 20.11 C64.91 20.09 64.68 20.71 65.57 20.75 C66.45 20.79 66.28 20.16 65.99 20.14 C65.69 20.13 65.47 20.75 66.35 20.79 C67.23 20.83 67.06 20.19 66.77 20.18 C66.48 20.17 66.25 20.79 67.14 20.82 C68.02 20.85 67.85 20.22 67.55 20.21 C67.26 20.20 67.04 20.82 67.93 20.84 C68.81 20.86 68.63 20.23 68.33 20.22 C68.04 20.22 67.84 20.85 68.72 20.85 C69.60 20.85 69.40 20.22 69.11 20.22 C68.81 20.23 68.63 20.86 69.51 20.84 C70.40 20.82 70.18 20.19 69.89 20.21 C69.59 20.22 69.42 20.85 70.30 20.81 C71.19 20.77 70.96 20.15 70.67 20.17 C70.37 20.19 70.21 20.82 71.09 20.77 C71.98 20.72 71.74 20.10 71.45 20.12 C71.15 20.14 71.00 20.78 71.88 20.72 C72.76 20.66 72.52 20.05 72.23 20.07 C71.93 20.09 71.79 20.74 72.67 20.66 C73.55 20.58 73.29 19.96 73.00 20.00 C72.70 20.03 72.59 20.69 73.47 20.56 C74.34 20.44 74.05 19.84 73.76 19.89 C73.47 19.94 73.38 20.59 74.25 20.44 C75.12 20.29 74.97 19.99 74.97 19.99" fill="none"/></g>
<g fill="blue" mcviz:r="P313_V269_V1231" stroke="blue" stroke-linecap="round" stroke-width="0.0536083863278" transform="scale(1.000)"><path d="M60.35 14.59 C60.68 14.77 62.42 15.73 63.98 16.10 C65.82 16.54 70.77 15.89 72.48 16.71 C73.76 17.32 74.76 18.73 75.21 19.45" fill="none"/><path d="M68.48 16.26L68.00 16.41C68.05 16.33 68.05 16.19 68.00 16.12Z" stroke="none"/></g>
<use mcviz:r="P313_V269_V1231" x="68.195" y="15.640" transform="scale(1.000)" xlink:href="#pdg-1" />
<g fill="red" mcviz:r="P1355_V1107_V1257" stroke="red" stroke-linecap="round" stroke-width="0.0199349731683" transform="scale(1.000)"><path d="M14.06 38.96 C14.40 38.96 15.96 38.96 17.24 38.96 C17.24 38.96 17.24 38.96 34.35 38.96 C41.60 38.96 43.41 39.07 50.66 39.07 C50.66 39.07 50.66 39.07 60.30 39.07 C66.06 39.07 73.05 38.95 74.96 38.91" fill="none"/><path d="M44.75 39.04L44.27 39.18C44.32 39.11 44.32 38.96 44.27 38.89Z" stroke="none"/></g>
<use mcviz:r="P1355_V1107_V1257" x="37.315" y="38.431" transform="scale(1.000)" xlink:href="#pdg1" />
<g fill="green" mcviz:r="P1592_V4_V1257" stroke="green" stroke-linecap="round" stroke-width="0.147484410809" transform="scale(1.000)"><path d="M9.29 38.22 C9.29 38.22 8.90 38.37 9.41 39.09 C9.92 39.82 10.35 39.21 10.14 39.00 C9.93 38.79 9.30 39.29 10.07 39.73 C10.85 40.17 10.94 39.32 10.64 39.28 C10.35 39.24 10.11 39.91 10.99 39.91 C11.88 39.91 11.69 39.29 11.39 39.29 C11.09 39.29 10.90 39.91 11.78 39.91 C12.67 39.91 12.48 39.29 12.18 39.29 C11.88 39.29 11.68 39.91 12.57 39.91 C13.46 39.91 13.26 39.29 12.97 39.29 C12.67 39.29 12.47 39.91 13.36 39.91 C14.25 39.91 14.05 39.29 13.76 39.29 C13.46 39.29 13.27 39.91 14.15 39.91 C15.04 39.91 14.84 39.29 14.55 39.29 C14.25 39.29 14.06 39.91 14.94 39.91 C15.83 39.91 15.63 39.29 15.34 39.29 C15.04 39.29 14.84 39.91 15.73 39.91 C16.62 39.91 16.42 39.29 16.13 39.29 C15.83 39.29 15.64 39.91 16.52 39.91 C17.41 39.91 17.22 39.29 16.92 39.29 C16.62 39.29 16.43 39.91 17.31 39.91 C18.20 39.91 18.01 39.29 17.71 39.29 C17.41 39.29 17.22 39.91 18.10 39.91 C18.99 39.91 18.79 39.29 18.50 39.29 C18.20 39.29 18.00 39.91 18.89 39.91 C19.78 39.91 19.58 39.29 19.29 39.29 C18.99 39.29 18.79 39.91 19.68 39.91 C20.57 39.91 20.37 39.29 20.08 39.29 C19.78 39.29 19.58 39.91 20.47 39.91 C21.36 39.91 21.16 39.29 20.87 39.29 C20.57 39.29 20.37 39.91 21.26 39.91 C22.15 39.91 21.95 39.29 21.66 39.29 C21.36 39.29 21.16 39.91 22.05 39.91 C22.94 39.91 22.74 39.29 22.45 39.29 C22.15 39.29 21.95 39.91 22.84 39.91 C23.73 39.91 23.53 39.29 23.24 39.29 C22.94 39.29 22.74 39.91 23.63 39.91 C24.52 39.91 24.32 39.29 24.03 39.29 C23.73 39.29 23.53 39.91 24.42 39.91 C25.31 39.91 25.11 39.29 24.82 39.29 C24.52 39.29 24.32 39.91 25.21 39.91 C26.10 39.91 25.90 39.29 25.61 39.29 C25.31 39.29 25.11 39.91 26.00 39.91 C26.89 39.91 26.69 39.29 26.40 39.29 C26.10 39.29 25.90 39.91 26.79 39.91 C27.68 39.91 27.48 39.29 27.19 39.29 C26.89 39.29 26.69 39.91 27.58 39.91 C28.47 39.91 28.27 39.29 27.98 39.29 C27.68 39.29 27.48 39.91 28.37 39.91 C29.26 39.91 29.06 39.29 28.77 39.29 C28.47 39.29 28.27 39.91 29.16 39.91 C30.05 39.91 29.85 39.29 29.56 39.29 C29.26 39.29 29.06 39.91 29.95 39.91 C30.84 39.91 30.64 39.29 30.35 39.29 C30.05 39.29 29.85 39.91 30.74 39.91 C31.63 39.91 31.43 39.29 31.14 39.29 C30.84 39.29 30.64 39.91 31.53 39.91 C32.42 39.91 32.22 39.29 31.93 39.29 C31.63 39.29 31.43 39.91 32.32 39.91 C33.21 39.91 33.01 39.29 32.72 39.29 C32.42 39.29 32.22 39.91 33.11 39.91 C34.00 39.91 33.80 39.29 33.51 39.29 C33.21 39.29 33.01 39.91 33.90 39.91 C34.79 39.91 34.59 39.29 34.30 39.29 C34.00 39.29 33.80 39.91 34.69 39.91 C35.58 39.91 35.38 39.29 35.09 39.29 C34.79 39.29 34.59 39.91 35.48 39.91 C36.37 39.91 36.17 39.29 35.88 39.29 C35.58 39.29 35.38 39.91 36.27 39.91 C37.16 39.91 36.96 39.29 36.66 39.29 C36.37 39.29 36.17 39.91 37.06 39.91 C37.95 39.91 37.75 39.29 37.45 39.29 C37.16 39.29 36.96 39.91 37.85 39.91 C38.74 39.91 38.54 39.29 38.25 39.29 C37.95 39.29 37.75 39.91 38.64 39.91 C39.53 39.91 39.33 39.29 39.04 39.29 C38.74 39.29 38.54 39.91 39.43 39.91 C40.32 39.91 40.12 39.29 39.83 39.29 C39.53 39.29 39.33 39.91 40.22 39.91 C41.11 39.91 40.91 39.29 40.61 39.29 C40.32 39.29 40.12 39.91 41.01 39.91 C41.90 39.91 41.70 39.29 41.41 39.29 C41.11 39.29 40.91 39.91 41.80 39.91 C42.69 39.91 42.49 39.29 42.20 39.29 C41.90 39.29 41.70 39.91 42.59 39.91 C43.48 39.91 43.28 39.29 42.98 39.29 C42.69 39.29 42.49 39.91 43.38 39.91 C44.27 39.91 44.07 39.29 43.77 39.29 C43.48 39.29 43.28 39.91 44.17 39.91 C45.06 39.91 44.86 39.29 44.57 39.29 C44.27 39.29 44.07 39.91 44.96 39.91 C45.85 39.91 45.65 39.29 45.35 39.29 C45.06 39.29 44.86 39.91 45.75 39.91 C46.64 39.91 46.44 39.29 46.14 39.29 C45.85 39.29 45.65 39.91 46.54 39.91 C47.43 39.91 47.23 39.29 46.94 39.29 C46.64 39.29 46.44 39.91 47.33 39.91 C48.22 39.91 48.02 39.29 47.72 39.29 C47.43 39.29 47.23 39.91 48.12 39.91 C49.01 39.91 48.81 39.29 48.51 39.29 C48.22 39.29 48.02 39.91 48.91 39.91 C49.80 39.91 49.60 39.29 49.31 39.29 C49.01 39.29 48.81 39.91 49.70 39.91 C50.59 39.91 50.39 39.29 50.09 39.29 C49.80 39.29 49.60 39.91 50.49 39.91 C51.38 39.91 51.18 39.29 50.88 39.29 C50.59 39.29 50.39 39.91 51.28 39.91 C52.17 39.91 51.97 39.29 51.67 39.29 C51.38 39.29 51.18 39.91 52.07 39.91 C52.96 39.91 52.76 39.29 52.46 39.29 C52.17 39.29 51.97 39.91 52.86 39.91 C53.75 39.91 53.55 39.29 53.26 39.29 C52.96 39.29 52.76 39.91 53.65 39.91 C54.54 39.91 54.34 39.29 54.04 39.29 C53.75 39.29 53.55 39.91 54.44 39.91 C55.33 39.91 55.13 39.29 54.83 39.29 C54.54 39.29 54.34 39.91 55.23 39.91 C56.12 39.91 55.92 39.29 55.62 39.29 C55.33 39.29 55.13 39.91 56.02 39.91 C56.91 39.91 56.71 39.29 56.41 39.29 C56.12 39.29 55.92 39.91 56.81 39.91 C57.70 39.91 57.50 39.29 57.20 39.29 C56.91 39.29 56.71 39.91 57.60 39.91 C58.49 39.91 58.29 39.29 57.99 39.29 C57.70 39.29 57.50 39.91 58.39 39.91 C59.28 39.91 59.08 39.29 58.79 39.29 C58.49 39.29 58.29 39.91 59.18 39.91 C60.07 39.91 59.87 39.29 59.57 39.29 C59.28 39.29 59.08 39.91 59.97 39.91 C60.86 39.91 60.66 39.29 60.37 39.29 C60.07 39.29 59.87 39.91 60.76 39.91 C61.65 39.90 61.45 39.28 61.15 39.28 C60.86 39.28 60.67 39.91 61.55 39.90 C62.44 39.89 62.24 39.27 61.94 39.27 C61.64 39.28 61.46 39.91 62.35 39.89 C63.23 39.87 63.03 39.25 62.73 39.26 C62.43 39.26 62.25 39.89 63.14 39.87 C64.03 39.85 63.81 39.23 63.52 39.24 C63.22 39.25 63.04 39.88 63.93 39.85 C64.82 39.83 64.60 39.21 64.31 39.22 C64.01 39.23 63.83 39.86 64.72 39.83 C65.61 39.80 65.39 39.18 65.09 39.19 C64.80 39.20 64.62 39.83 65.51 39.80 C66.40 39.77 66.18 39.15 65.88 39.16 C65.59 39.17 65.41 39.81 66.30 39.77 C67.19 39.73 66.97 39.12 66.67 39.13 C66.37 39.14 66.20 39.78 67.09 39.74 C67.98 39.70 67.75 39.08 67.46 39.09 C67.16 39.11 66.99 39.74 67.88 39.70 C68.77 39.66 68.54 39.04 68.25 39.06 C67.95 39.07 67.78 39.71 68.67 39.66 C69.56 39.61 69.33 39.00 69.03 39.02 C68.74 39.03 68.57 39.67 69.46 39.62 C70.35 39.57 70.12 38.96 69.82 38.97 C69.53 38.99 69.36 39.62 70.25 39.57 C71.14 39.52 70.90 38.91 70.61 38.93 C70.31 38.94 70.15 39.58 71.04 39.53 C71.93 39.47 71.69 38.86 71.40 38.88 C71.10 38.90 70.94 39.53 71.83 39.48 C72.72 39.42 72.48 38.81 72.18 38.83 C71.89 38.85 71.73 39.48 72.62 39.42 C73.51 39.36 73.27 38.75 72.97 38.77 C72.68 38.79 72.52 39.43 73.41 39.37 C74.29 39.31 74.05 38.70 73.76 38.72 C73.46 38.74 73.31 39.38 74.20 39.31 C75.08 39.25 74.96 38.94 74.96 38.94" fill="none"/></g>
<g fill="green" mcviz:r="P237_V205_V1257" stroke="green" stroke-linecap="round" stroke-width="0.0132686159546" transform="scale(1.000)"><path d="M53.93 36.59 C53.93 36.59 53.76 36.87 54.59 37.07 C55.42 37.27 55.39 36.62 55.11 36.56 C54.83 36.49 54.50 37.05 55.33 37.25 C56.16 37.45 56.12 36.79 55.84 36.73 C55.57 36.66 55.24 37.23 56.07 37.42 C56.91 37.61 56.86 36.96 56.58 36.90 C56.30 36.83 55.98 37.40 56.82 37.59 C57.65 37.77 57.60 37.12 57.32 37.06 C57.04 37.00 56.73 37.57 57.56 37.75 C58.39 37.93 58.34 37.28 58.06 37.22 C57.78 37.16 57.47 37.73 58.30 37.91 C59.14 38.08 59.08 37.43 58.80 37.37 C58.52 37.31 58.21 37.89 59.05 38.06 C59.89 38.22 59.82 37.57 59.54 37.51 C59.26 37.46 58.96 38.04 59.80 38.20 C60.64 38.36 60.56 37.70 60.28 37.65 C60.00 37.60 59.71 38.19 60.55 38.34 C61.39 38.48 61.31 37.83 61.03 37.79 C60.75 37.74 60.46 38.32 61.30 38.46 C62.14 38.60 62.05 37.95 61.77 37.91 C61.49 37.86 61.21 38.45 62.05 38.58 C62.89 38.71 62.80 38.06 62.52 38.02 C62.24 37.98 61.96 38.58 62.81 38.69 C63.65 38.81 63.55 38.16 63.26 38.13 C62.98 38.09 62.72 38.69 63.56 38.79 C64.41 38.90 64.29 38.25 64.01 38.22 C63.73 38.19 63.48 38.80 64.33 38.88 C65.18 38.95 65.04 38.30 64.75 38.28 C64.47 38.26 64.24 38.88 65.09 38.93 C65.94 38.99 65.79 38.35 65.51 38.33 C65.22 38.32 65.00 38.93 65.85 38.97 C66.70 39.02 66.54 38.38 66.26 38.37 C65.98 38.36 65.76 38.97 66.61 39.01 C67.46 39.05 67.30 38.41 67.02 38.40 C66.73 38.39 66.52 39.01 67.37 39.04 C68.22 39.07 68.06 38.44 67.77 38.43 C67.49 38.42 67.28 39.04 68.13 39.07 C68.98 39.09 68.81 38.46 68.53 38.45 C68.24 38.45 68.04 39.06 68.89 39.09 C69.74 39.11 69.57 38.48 69.29 38.48 C69.00 38.47 68.80 39.09 69.65 39.11 C70.50 39.13 70.33 38.50 70.04 38.50 C69.76 38.49 69.55 39.11 70.41 39.13 C71.26 39.15 71.09 38.52 70.80 38.51 C70.52 38.51 70.31 39.13 71.17 39.15 C72.02 39.16 71.84 38.54 71.56 38.53 C71.27 38.52 71.07 39.14 71.93 39.16 C72.78 39.18 72.60 38.55 72.32 38.54 C72.03 38.54 71.83 39.16 72.68 39.17 C73.54 39.19 73.36 38.56 73.07 38.56 C72.79 38.55 72.59 39.17 73.44 39.19 C74.30 39.20 74.12 38.57 73.83 38.57 C73.55 38.57 73.35 39.19 74.20 39.20 C75.05 39.21 74.96 38.90 74.96 38.90" fill="none"/></g>
<g fill="blue" mcviz:r="P1261_V1040_V1257" stroke="blue" stroke-linecap="round" stroke-width="0.180102922453" transform="scale(1.000)"><path d="M60.35 36.60 C60.68 36.76 62.44 37.62 63.98 37.96 C67.68 38.76 68.71 38.17 72.48 38.53 C73.36 38.61 74.38 38.75 74.97 38.83" fill="none"/><path d="M67.77 38.41L67.29 38.54C67.33 38.47 67.34 38.33 67.29 38.25Z" stroke="none"/></g>
<use mcviz:r="P1261_V1040_V1257" x="68.195" y="37.501" transform="scale(1.000)" xlink:href="#pdg-5" />
<g fill="red" mcviz:r="P691_V587_V1349" stroke="red" stroke-linecap="round" stroke-width="0.0409506394131" transform="scale(1.000)"><path d="M60.37 8.28 C61.31 8.29 71.85 8.46 72.48 8.62 C73.47 8.88 74.50 9.51 75.06 9.88" fill="none"/><path d="M68.10 8.43L67.62 8.57C67.67 8.50 67.67 8.35 67.63 8.28Z" stroke="none"/></g>
<use mcviz:r="P691_V587_V1349" x="68.223" y="7.707" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="green" mcviz:r="P1646_V3_V1349" stroke="green" stroke-linecap="round" stroke-width="0.167669327557" transform="scale(1.000)"><path d="M9.62 10.30 C9.62 10.30 9.53 10.59 10.41 10.56 C11.29 10.52 11.08 9.92 10.79 9.92 C10.50 9.92 10.30 10.55 11.18 10.55 C12.06 10.55 11.86 9.92 11.57 9.92 C11.28 9.92 11.08 10.55 11.96 10.55 C12.84 10.55 12.65 9.92 12.35 9.92 C12.06 9.92 11.86 10.55 12.74 10.55 C13.62 10.55 13.43 9.92 13.14 9.92 C12.84 9.92 12.65 10.55 13.53 10.55 C14.41 10.55 14.21 9.92 13.92 9.92 C13.62 9.92 13.43 10.55 14.31 10.55 C15.19 10.55 14.99 9.92 14.70 9.92 C14.41 9.92 14.21 10.55 15.09 10.55 C15.97 10.55 15.78 9.92 15.48 9.92 C15.19 9.92 14.99 10.55 15.87 10.55 C16.75 10.55 16.56 9.92 16.26 9.92 C15.97 9.92 15.77 10.55 16.65 10.55 C17.53 10.55 17.34 9.92 17.05 9.92 C16.75 9.92 16.56 10.55 17.44 10.55 C18.32 10.55 18.12 9.92 17.83 9.92 C17.54 9.92 17.34 10.55 18.22 10.55 C19.10 10.55 18.90 9.92 18.61 9.92 C18.32 9.92 18.12 10.55 19.00 10.55 C19.88 10.55 19.69 9.92 19.39 9.92 C19.10 9.92 18.90 10.55 19.78 10.55 C20.66 10.55 20.47 9.92 20.18 9.92 C19.88 9.92 19.69 10.55 20.57 10.55 C21.45 10.55 21.25 9.92 20.96 9.92 C20.66 9.92 20.47 10.55 21.35 10.55 C22.23 10.55 22.03 9.92 21.74 9.92 C21.45 9.92 21.25 10.55 22.13 10.55 C23.01 10.55 22.82 9.92 22.52 9.92 C22.23 9.92 22.03 10.55 22.91 10.55 C23.79 10.55 23.60 9.92 23.30 9.92 C23.01 9.92 22.82 10.55 23.70 10.55 C24.58 10.55 24.38 9.92 24.09 9.92 C23.79 9.92 23.60 10.55 24.48 10.55 C25.36 10.55 25.16 9.92 24.87 9.92 C24.58 9.92 24.38 10.55 25.26 10.55 C26.14 10.55 25.94 9.92 25.65 9.92 C25.36 9.92 25.16 10.55 26.04 10.55 C26.92 10.55 26.73 9.92 26.43 9.92 C26.14 9.92 25.95 10.55 26.83 10.55 C27.71 10.55 27.51 9.92 27.22 9.92 C26.92 9.92 26.73 10.55 27.61 10.55 C28.49 10.55 28.29 9.92 28.00 9.92 C27.70 9.92 27.51 10.55 28.39 10.55 C29.27 10.55 29.07 9.92 28.78 9.92 C28.49 9.92 28.29 10.55 29.17 10.55 C30.05 10.55 29.86 9.92 29.56 9.92 C29.27 9.92 29.07 10.55 29.95 10.55 C30.83 10.55 30.64 9.92 30.35 9.92 C30.05 9.92 29.86 10.55 30.74 10.55 C31.62 10.55 31.42 9.92 31.13 9.92 C30.83 9.92 30.64 10.55 31.52 10.55 C32.40 10.55 32.20 9.92 31.91 9.92 C31.62 9.92 31.42 10.55 32.30 10.55 C33.18 10.55 32.99 9.92 32.69 9.92 C32.40 9.92 32.20 10.55 33.08 10.55 C33.96 10.55 33.77 9.92 33.47 9.92 C33.18 9.92 32.98 10.55 33.87 10.55 C34.75 10.55 34.55 9.92 34.26 9.92 C33.96 9.92 33.77 10.55 34.65 10.55 C35.53 10.55 35.33 9.92 35.04 9.92 C34.74 9.92 34.55 10.55 35.43 10.55 C36.31 10.55 36.11 9.92 35.82 9.92 C35.53 9.92 35.33 10.55 36.21 10.55 C37.09 10.55 36.90 9.92 36.60 9.92 C36.31 9.92 36.11 10.55 36.99 10.55 C37.87 10.55 37.68 9.92 37.39 9.92 C37.09 9.92 36.90 10.55 37.78 10.55 C38.66 10.55 38.46 9.92 38.17 9.92 C37.88 9.92 37.68 10.55 38.56 10.55 C39.44 10.55 39.24 9.92 38.95 9.92 C38.66 9.92 38.46 10.55 39.34 10.55 C40.22 10.55 40.02 9.92 39.73 9.92 C39.44 9.92 39.25 10.55 40.13 10.55 C41.01 10.55 40.81 9.92 40.51 9.92 C40.22 9.92 40.03 10.55 40.91 10.55 C41.79 10.55 41.59 9.92 41.30 9.92 C41.00 9.92 40.81 10.55 41.69 10.55 C42.57 10.55 42.37 9.92 42.08 9.92 C41.79 9.92 41.59 10.55 42.47 10.55 C43.35 10.55 43.15 9.92 42.86 9.92 C42.57 9.92 42.37 10.55 43.25 10.55 C44.13 10.55 43.94 9.92 43.64 9.92 C43.35 9.92 43.15 10.55 44.03 10.55 C44.91 10.55 44.72 9.92 44.43 9.92 C44.13 9.92 43.94 10.55 44.82 10.55 C45.70 10.55 45.50 9.92 45.21 9.92 C44.92 9.92 44.72 10.55 45.60 10.55 C46.48 10.55 46.28 9.92 45.99 9.92 C45.70 9.92 45.50 10.55 46.38 10.55 C47.26 10.55 47.07 9.92 46.77 9.92 C46.48 9.92 46.28 10.55 47.16 10.55 C48.04 10.55 47.85 9.92 47.56 9.92 C47.26 9.92 47.07 10.55 47.95 10.55 C48.83 10.55 48.63 9.92 48.34 9.92 C48.04 9.92 47.85 10.55 48.73 10.55 C49.61 10.55 49.41 9.92 49.12 9.92 C48.83 9.92 48.63 10.55 49.51 10.55 C50.39 10.55 50.20 9.92 49.90 9.92 C49.61 9.92 49.41 10.55 50.29 10.55 C51.17 10.55 50.98 9.92 50.68 9.92 C50.39 9.92 50.20 10.55 51.08 10.55 C51.96 10.55 51.76 9.92 51.47 9.92 C51.17 9.92 50.98 10.55 51.86 10.55 C52.74 10.55 52.54 9.92 52.25 9.92 C51.96 9.92 51.76 10.55 52.64 10.55 C53.52 10.55 53.32 9.92 53.03 9.92 C52.74 9.92 52.54 10.55 53.42 10.55 C54.30 10.55 54.11 9.92 53.82 9.92 C53.52 9.92 53.33 10.55 54.21 10.55 C55.09 10.55 54.89 9.92 54.60 9.92 C54.30 9.92 54.11 10.55 54.99 10.55 C55.87 10.54 55.67 9.92 55.38 9.92 C55.08 9.92 54.90 10.56 55.78 10.54 C56.66 10.51 56.44 9.88 56.15 9.90 C55.85 9.91 55.70 10.56 56.57 10.50 C57.45 10.44 57.21 9.82 56.92 9.85 C56.62 9.87 56.49 10.52 57.36 10.43 C58.24 10.35 57.98 9.74 57.69 9.77 C57.40 9.80 57.27 10.45 58.15 10.35 C59.02 10.25 58.75 9.64 58.46 9.68 C58.17 9.72 58.06 10.38 58.93 10.24 C59.80 10.11 59.51 9.51 59.22 9.56 C58.93 9.61 58.85 10.28 59.72 10.11 C60.58 9.93 60.26 9.35 59.97 9.41 C59.69 9.48 59.64 10.14 60.49 9.94 C61.35 9.73 61.01 9.17 60.73 9.24 C60.44 9.31 60.40 9.96 61.25 9.75 C62.11 9.54 61.78 8.99 61.49 9.05 C61.20 9.12 61.15 9.76 62.01 9.58 C62.87 9.39 62.56 8.83 62.27 8.89 C61.98 8.94 61.89 9.58 62.76 9.44 C63.63 9.30 63.35 8.72 63.06 8.76 C62.77 8.80 62.65 9.43 63.52 9.33 C64.40 9.23 64.14 8.64 63.85 8.67 C63.55 8.70 63.41 9.33 64.29 9.26 C65.17 9.19 64.93 8.59 64.63 8.61 C64.34 8.63 64.19 9.26 65.06 9.21 C65.94 9.15 65.71 8.54 65.42 8.56 C65.13 8.58 64.96 9.21 65.84 9.16 C66.72 9.12 66.50 8.51 66.20 8.52 C65.91 8.53 65.74 9.16 66.62 9.13 C67.50 9.10 67.28 8.48 66.99 8.49 C66.70 8.50 66.52 9.13 67.40 9.10 C68.28 9.08 68.07 8.46 67.77 8.47 C67.48 8.48 67.30 9.10 68.18 9.09 C69.06 9.07 68.85 8.46 68.56 8.46 C68.27 8.46 68.08 9.08 68.96 9.08 C69.84 9.08 69.64 8.46 69.35 8.46 C69.05 8.46 68.85 9.07 69.73 9.09 C70.61 9.10 70.43 8.48 70.14 8.47 C69.84 8.46 69.63 9.07 70.51 9.11 C71.39 9.14 71.22 8.51 70.93 8.50 C70.63 8.48 70.40 9.08 71.28 9.15 C72.16 9.21 72.01 8.58 71.72 8.55 C71.43 8.53 71.17 9.10 72.04 9.22 C72.91 9.33 72.81 8.72 72.52 8.66 C72.24 8.61 71.92 9.13 72.77 9.36 C73.62 9.58 73.60 8.96 73.32 8.87 C73.04 8.78 72.66 9.28 73.48 9.59 C74.31 9.89 74.35 9.26 74.07 9.15 C73.80 9.03 73.39 9.51 74.19 9.87 C74.99 10.23 75.02 9.93 75.02 9.93" fill="none"/></g>
<g fill="green" mcviz:r="P1666_V4_V1349" stroke="green" stroke-linecap="round" stroke-width="0.156414940312" transform="scale(1.000)"><path d="M9.15 37.25 C9.15 37.25 9.45 37.37 9.52 36.49 C9.59 35.61 8.96 35.76 8.93 36.05 C8.91 36.34 9.51 36.59 9.59 35.71 C9.66 34.83 9.03 34.97 9.00 35.27 C8.97 35.56 9.58 35.81 9.66 34.93 C9.74 34.05 9.10 34.19 9.07 34.48 C9.04 34.78 9.64 35.03 9.73 34.15 C9.81 33.27 9.18 33.41 9.15 33.70 C9.12 33.99 9.72 34.25 9.81 33.37 C9.90 32.49 9.26 32.62 9.23 32.92 C9.20 33.21 9.79 33.47 9.89 32.59 C9.99 31.72 9.35 31.84 9.31 32.13 C9.28 32.43 9.88 32.69 9.98 31.82 C10.08 30.94 9.44 31.06 9.40 31.35 C9.37 31.64 9.96 31.91 10.07 31.04 C10.18 30.16 9.54 30.28 9.50 30.57 C9.46 30.86 10.05 31.14 10.17 30.26 C10.29 29.39 9.64 29.50 9.60 29.79 C9.56 30.08 10.15 30.36 10.28 29.49 C10.40 28.61 9.76 28.72 9.72 29.01 C9.67 29.30 10.26 29.59 10.39 28.71 C10.52 27.84 9.88 27.94 9.84 28.23 C9.79 28.52 10.37 28.81 10.51 27.94 C10.66 27.07 10.02 27.16 9.97 27.45 C9.91 27.74 10.49 28.04 10.65 27.17 C10.81 26.31 10.16 26.38 10.11 26.67 C10.05 26.96 10.62 27.28 10.80 26.41 C10.97 25.54 10.33 25.61 10.27 25.90 C10.20 26.19 10.76 26.51 10.96 25.65 C11.16 24.79 10.52 24.84 10.45 25.12 C10.37 25.41 10.92 25.75 11.15 24.90 C11.38 24.05 10.74 24.07 10.65 24.35 C10.57 24.64 11.09 25.00 11.36 24.16 C11.64 23.32 11.01 23.31 10.90 23.59 C10.80 23.86 11.28 24.27 11.63 23.46 C11.98 22.65 11.38 22.57 11.24 22.83 C11.10 23.09 11.51 23.55 11.98 22.80 C12.44 22.06 11.84 21.89 11.67 22.13 C11.50 22.37 11.84 22.88 12.41 22.20 C12.97 21.52 12.42 21.28 12.21 21.49 C12.00 21.70 12.23 22.25 12.92 21.69 C13.61 21.14 13.12 20.80 12.87 20.96 C12.63 21.12 12.77 21.73 13.53 21.28 C14.30 20.84 13.83 20.41 13.57 20.55 C13.31 20.69 13.43 21.33 14.21 20.92 C14.99 20.50 14.52 20.04 14.27 20.18 C14.01 20.32 14.14 20.97 14.91 20.54 C15.68 20.11 15.27 19.70 15.00 19.81 C14.72 19.92 14.77 20.57 15.59 20.25 C16.42 19.94 16.01 19.43 15.74 19.53 C15.46 19.63 15.49 20.28 16.32 19.98 C17.15 19.67 16.75 19.16 16.48 19.26 C16.20 19.36 16.23 20.01 17.06 19.71 C17.89 19.41 17.49 18.89 17.22 18.99 C16.94 19.09 16.96 19.74 17.80 19.44 C18.63 19.15 18.23 18.63 17.96 18.72 C17.68 18.82 17.70 19.48 18.53 19.18 C19.37 18.88 18.97 18.36 18.70 18.46 C18.42 18.56 18.44 19.21 19.27 18.92 C20.11 18.62 19.71 18.10 19.44 18.20 C19.16 18.30 19.18 18.95 20.01 18.66 C20.85 18.37 20.46 17.84 20.18 17.94 C19.90 18.04 19.92 18.69 20.75 18.40 C21.59 18.11 21.20 17.58 20.92 17.68 C20.64 17.78 20.66 18.43 21.50 18.14 C22.33 17.85 21.94 17.33 21.66 17.42 C21.38 17.52 21.40 18.17 22.24 17.88 C23.07 17.59 22.68 17.07 22.40 17.17 C22.13 17.26 22.14 17.91 22.98 17.63 C23.81 17.34 23.43 16.81 23.15 16.91 C22.87 17.01 22.88 17.66 23.72 17.37 C24.56 17.09 24.17 16.56 23.89 16.66 C23.61 16.75 23.63 17.40 24.46 17.12 C25.30 16.84 24.91 16.31 24.64 16.40 C24.36 16.50 24.37 17.15 25.21 16.87 C26.04 16.59 25.66 16.06 25.38 16.16 C25.10 16.25 25.11 16.90 25.95 16.63 C26.79 16.36 26.42 15.83 26.14 15.92 C25.86 16.00 25.80 16.60 26.67 16.43 C27.54 16.25 27.22 15.68 26.93 15.74 C26.65 15.79 26.57 16.44 27.44 16.28 C28.30 16.12 28.00 15.54 27.71 15.60 C27.42 15.65 27.33 16.29 28.20 16.14 C29.07 16.00 28.78 15.42 28.49 15.47 C28.20 15.51 28.10 16.15 28.97 16.03 C29.85 15.90 29.57 15.31 29.28 15.35 C28.98 15.39 28.87 16.03 29.74 15.92 C30.62 15.82 30.36 15.23 30.06 15.26 C29.77 15.29 29.64 15.92 30.52 15.84 C31.40 15.76 31.15 15.16 30.85 15.18 C30.56 15.21 30.41 15.84 31.29 15.78 C32.17 15.72 31.94 15.11 31.64 15.13 C31.35 15.15 31.18 15.77 32.07 15.73 C32.95 15.69 32.73 15.09 32.44 15.09 C32.14 15.10 31.96 15.73 32.84 15.71 C33.73 15.69 33.52 15.07 33.23 15.08 C32.93 15.08 32.74 15.70 33.62 15.70 C34.51 15.69 34.31 15.07 34.01 15.07 C33.72 15.07 33.52 15.69 34.41 15.69 C35.29 15.70 35.10 15.07 34.80 15.07 C34.51 15.07 34.31 15.69 35.19 15.70 C36.07 15.70 35.88 15.07 35.59 15.07 C35.29 15.07 35.09 15.70 35.98 15.70 C36.86 15.70 36.66 15.07 36.37 15.07 C36.07 15.07 35.88 15.70 36.77 15.69 C37.65 15.68 37.44 15.06 37.15 15.06 C36.85 15.07 36.67 15.70 37.55 15.68 C38.44 15.66 38.22 15.03 37.93 15.04 C37.64 15.05 37.46 15.69 38.34 15.65 C39.23 15.62 39.00 15.00 38.71 15.01 C38.42 15.03 38.25 15.66 39.13 15.62 C40.01 15.57 39.78 14.96 39.49 14.97 C39.20 14.99 39.04 15.63 39.92 15.57 C40.80 15.51 40.56 14.90 40.27 14.92 C39.98 14.94 39.83 15.58 40.71 15.52 C41.59 15.45 41.34 14.84 41.05 14.86 C40.76 14.89 40.61 15.52 41.49 15.45 C42.37 15.38 42.12 14.77 41.83 14.80 C41.54 14.82 41.39 15.46 42.27 15.39 C43.15 15.31 42.91 14.71 42.61 14.73 C42.32 14.76 42.18 15.40 43.06 15.32 C43.94 15.24 43.69 14.64 43.39 14.66 C43.10 14.69 42.96 15.33 43.84 15.25 C44.72 15.17 44.47 14.57 44.17 14.59 C43.88 14.62 43.74 15.26 44.62 15.18 C45.50 15.10 45.25 14.50 44.96 14.52 C44.66 14.55 44.53 15.19 45.40 15.11 C46.28 15.02 46.03 14.42 45.74 14.45 C45.44 14.48 45.31 15.12 46.19 15.03 C47.07 14.95 46.81 14.35 46.52 14.37 C46.22 14.40 46.09 15.04 46.97 14.96 C47.85 14.87 47.59 14.27 47.30 14.30 C47.00 14.33 46.87 14.97 47.75 14.88 C48.63 14.79 48.37 14.19 48.08 14.22 C47.78 14.25 47.65 14.89 48.53 14.80 C49.41 14.71 49.15 14.11 48.86 14.14 C48.57 14.17 48.44 14.81 49.31 14.72 C50.19 14.62 49.93 14.02 49.64 14.05 C49.35 14.09 49.22 14.73 50.09 14.63 C50.97 14.54 50.71 13.94 50.42 13.97 C50.13 14.00 50.00 14.64 50.88 14.55 C51.75 14.45 51.49 13.85 51.20 13.89 C50.91 13.92 50.78 14.56 51.66 14.46 C52.53 14.37 52.27 13.77 51.98 13.80 C51.69 13.83 51.56 14.47 52.44 14.38 C53.31 14.28 53.05 13.68 52.76 13.72 C52.47 13.75 52.34 14.39 53.22 14.29 C54.09 14.20 53.83 13.60 53.54 13.63 C53.25 13.66 53.12 14.30 54.00 14.21 C54.87 14.12 54.61 13.52 54.32 13.55 C54.03 13.58 53.90 14.22 54.78 14.13 C55.65 14.04 55.40 13.44 55.10 13.47 C54.81 13.50 54.68 14.14 55.56 14.05 C56.44 13.96 56.18 13.36 55.88 13.39 C55.59 13.42 55.46 14.06 56.34 13.97 C57.22 13.88 56.96 13.28 56.67 13.31 C56.37 13.34 56.24 13.98 57.12 13.89 C58.00 13.81 57.74 13.21 57.45 13.24 C57.16 13.26 57.02 13.90 57.90 13.82 C58.78 13.74 58.52 13.14 58.23 13.16 C57.94 13.19 57.80 13.83 58.68 13.75 C59.56 13.67 59.31 13.07 59.01 13.09 C58.72 13.12 58.58 13.76 59.46 13.68 C60.34 13.61 60.09 13.00 59.80 13.03 C59.50 13.05 59.36 13.69 60.24 13.62 C61.12 13.54 60.87 12.94 60.58 12.96 C60.29 12.99 60.14 13.62 61.02 13.55 C61.90 13.48 61.66 12.87 61.36 12.90 C61.07 12.92 60.92 13.56 61.80 13.49 C62.68 13.42 62.44 12.81 62.15 12.84 C61.85 12.86 61.71 13.50 62.59 13.43 C63.47 13.36 63.22 12.76 62.93 12.78 C62.64 12.80 62.49 13.44 63.37 13.37 C64.25 13.31 64.01 12.70 63.71 12.72 C63.42 12.74 63.26 13.36 64.14 13.32 C65.03 13.27 64.81 12.67 64.51 12.68 C64.22 12.69 64.03 13.30 64.92 13.30 C65.80 13.29 65.60 12.67 65.31 12.67 C65.01 12.67 64.81 13.29 65.70 13.30 C66.58 13.31 66.39 12.68 66.09 12.68 C65.80 12.67 65.60 13.30 66.48 13.31 C67.36 13.32 67.17 12.69 66.88 12.69 C66.58 12.68 66.38 13.31 67.26 13.32 C68.15 13.32 67.96 12.70 67.66 12.70 C67.37 12.69 67.17 13.32 68.05 13.32 C68.94 13.32 68.74 12.69 68.44 12.70 C68.15 12.70 67.96 13.33 68.84 13.32 C69.72 13.31 69.52 12.68 69.22 12.69 C68.93 12.69 68.75 13.33 69.63 13.30 C70.52 13.27 70.29 12.65 70.00 12.66 C69.71 12.67 69.55 13.32 70.43 13.26 C71.31 13.20 71.06 12.58 70.77 12.61 C70.48 12.63 70.35 13.29 71.23 13.19 C72.10 13.08 71.82 12.47 71.53 12.51 C71.24 12.56 71.17 13.25 72.03 13.05 C72.89 12.86 72.52 12.26 72.24 12.35 C71.96 12.44 72.03 13.15 72.84 12.79 C73.64 12.42 73.16 11.91 72.90 12.05 C72.65 12.20 72.82 12.86 73.56 12.38 C74.30 11.89 73.76 11.47 73.52 11.64 C73.29 11.82 73.54 12.45 74.22 11.89 C74.90 11.33 74.32 10.96 74.11 11.16 C73.89 11.36 74.19 11.96 74.82 11.35 C75.45 10.73 75.14 10.55 75.14 10.55" fill="none"/></g>
<g fill="green" mcviz:r="P1715_V275_V1349" stroke="green" stroke-linecap="round" stroke-width="0.0442957350301" transform="scale(1.000)"><path d="M9.62 11.68 C9.62 11.68 9.53 11.97 10.42 11.93 C11.30 11.89 11.09 11.30 10.80 11.30 C10.50 11.30 10.30 11.92 11.19 11.92 C12.07 11.92 11.88 11.30 11.58 11.30 C11.29 11.30 11.09 11.92 11.98 11.92 C12.86 11.92 12.66 11.30 12.37 11.30 C12.07 11.30 11.88 11.92 12.76 11.92 C13.65 11.92 13.45 11.30 13.16 11.30 C12.86 11.30 12.66 11.92 13.55 11.92 C14.43 11.92 14.24 11.30 13.94 11.30 C13.65 11.30 13.45 11.92 14.34 11.92 C15.22 11.92 15.02 11.30 14.73 11.30 C14.43 11.30 14.24 11.92 15.12 11.92 C16.01 11.92 15.81 11.30 15.52 11.30 C15.22 11.30 15.03 11.92 15.91 11.92 C16.80 11.92 16.60 11.30 16.30 11.30 C16.01 11.30 15.81 11.92 16.70 11.92 C17.58 11.92 17.39 11.30 17.09 11.30 C16.80 11.30 16.60 11.92 17.48 11.92 C18.37 11.93 18.17 11.30 17.88 11.30 C17.58 11.30 17.39 11.92 18.27 11.93 C19.16 11.93 18.96 11.30 18.66 11.30 C18.37 11.30 18.17 11.93 19.06 11.93 C19.94 11.93 19.75 11.31 19.45 11.30 C19.16 11.30 18.96 11.93 19.84 11.93 C20.73 11.93 20.53 11.31 20.24 11.31 C19.94 11.31 19.74 11.93 20.63 11.93 C21.51 11.94 21.32 11.31 21.03 11.31 C20.73 11.31 20.53 11.93 21.42 11.94 C22.30 11.94 22.11 11.32 21.81 11.31 C21.52 11.31 21.32 11.94 22.20 11.94 C23.09 11.95 22.89 11.32 22.60 11.32 C22.30 11.32 22.10 11.94 22.99 11.95 C23.87 11.95 23.68 11.33 23.39 11.32 C23.09 11.32 22.89 11.94 23.78 11.95 C24.66 11.96 24.47 11.33 24.17 11.33 C23.88 11.33 23.68 11.95 24.56 11.96 C25.45 11.96 25.26 11.34 24.96 11.34 C24.67 11.33 24.46 11.95 25.35 11.96 C26.23 11.97 26.04 11.34 25.75 11.34 C25.45 11.34 25.25 11.96 26.14 11.97 C27.02 11.98 26.83 11.35 26.53 11.35 C26.24 11.35 26.04 11.97 26.92 11.98 C27.81 11.99 27.62 11.36 27.32 11.36 C27.03 11.35 26.82 11.98 27.71 11.99 C28.59 12.00 28.40 11.37 28.11 11.37 C27.81 11.36 27.61 11.98 28.49 12.00 C29.38 12.01 29.19 11.38 28.90 11.38 C28.60 11.37 28.40 11.99 29.28 12.01 C30.17 12.02 29.98 11.39 29.68 11.39 C29.39 11.38 29.18 12.00 30.07 12.02 C30.95 12.03 30.76 11.40 30.47 11.40 C30.17 11.39 29.97 12.01 30.85 12.03 C31.74 12.04 31.55 11.41 31.26 11.41 C30.96 11.40 30.76 12.03 31.64 12.04 C32.53 12.05 32.34 11.43 32.04 11.42 C31.75 11.42 31.54 12.04 32.43 12.05 C33.31 12.07 33.12 11.44 32.83 11.43 C32.53 11.43 32.33 12.05 33.21 12.06 C34.10 12.08 33.91 11.45 33.62 11.45 C33.32 11.44 33.11 12.06 34.00 12.08 C34.88 12.09 34.70 11.47 34.40 11.46 C34.11 11.46 33.90 12.08 34.79 12.09 C35.67 12.11 35.49 11.48 35.19 11.48 C34.90 11.47 34.69 12.09 35.57 12.11 C36.46 12.13 36.27 11.50 35.98 11.49 C35.68 11.49 35.47 12.11 36.36 12.12 C37.24 12.14 37.06 11.51 36.76 11.51 C36.47 11.50 36.26 12.12 37.14 12.14 C38.03 12.16 37.85 11.53 37.55 11.52 C37.26 11.52 37.05 12.14 37.93 12.16 C38.82 12.17 38.63 11.55 38.34 11.54 C38.04 11.53 37.83 12.15 38.72 12.17 C39.60 12.19 39.42 11.56 39.12 11.56 C38.83 11.55 38.62 12.17 39.50 12.19 C40.39 12.21 40.21 11.58 39.91 11.57 C39.62 11.57 39.41 12.19 40.29 12.21 C41.18 12.23 40.99 11.60 40.70 11.59 C40.40 11.58 40.19 12.20 41.08 12.22 C41.96 12.24 41.78 11.62 41.48 11.61 C41.19 11.60 40.98 12.22 41.86 12.24 C42.75 12.26 42.57 11.63 42.27 11.63 C41.98 11.62 41.77 12.24 42.65 12.26 C43.54 12.28 43.35 11.65 43.06 11.64 C42.76 11.64 42.55 12.26 43.44 12.28 C44.32 12.30 44.14 11.67 43.84 11.66 C43.55 11.65 43.34 12.27 44.22 12.29 C45.11 12.31 44.93 11.68 44.63 11.68 C44.34 11.67 44.12 12.29 45.01 12.31 C45.89 12.33 45.71 11.70 45.42 11.69 C45.12 11.69 44.91 12.31 45.80 12.33 C46.68 12.35 46.50 11.72 46.20 11.71 C45.91 11.71 45.70 12.33 46.58 12.34 C47.47 12.36 47.28 11.73 46.99 11.73 C46.69 11.72 46.48 12.34 47.37 12.36 C48.25 12.38 48.07 11.75 47.78 11.74 C47.48 11.74 47.27 12.36 48.16 12.38 C49.04 12.39 48.86 11.76 48.56 11.76 C48.27 11.75 48.06 12.37 48.94 12.39 C49.83 12.41 49.64 11.78 49.35 11.77 C49.05 11.77 48.85 12.39 49.73 12.41 C50.62 12.42 50.43 11.79 50.13 11.79 C49.84 11.78 49.63 12.40 50.52 12.42 C51.40 12.44 51.22 11.81 50.92 11.80 C50.63 11.80 50.42 12.42 51.30 12.43 C52.19 12.45 52.00 11.82 51.71 11.82 C51.41 11.81 51.21 12.43 52.09 12.45 C52.98 12.46 52.79 11.83 52.49 11.83 C52.20 11.83 51.99 12.45 52.88 12.46 C53.76 12.47 53.58 11.85 53.28 11.84 C52.99 11.84 52.78 12.46 53.66 12.47 C54.55 12.49 54.36 11.86 54.07 11.85 C53.77 11.85 53.57 12.47 54.45 12.48 C55.34 12.50 55.15 11.87 54.85 11.87 C54.56 11.86 54.35 12.48 55.24 12.50 C56.12 12.51 55.93 11.88 55.64 11.88 C55.34 11.87 55.14 12.50 56.02 12.51 C56.91 12.52 56.72 11.89 56.43 11.89 C56.13 11.88 55.93 12.51 56.81 12.52 C57.70 12.53 57.51 11.90 57.21 11.90 C56.92 11.89 56.71 12.52 57.60 12.53 C58.48 12.54 58.30 11.91 58.00 11.91 C57.71 11.90 57.50 12.53 58.39 12.54 C59.27 12.55 59.08 11.92 58.79 11.92 C58.49 11.91 58.29 12.54 59.17 12.55 C60.06 12.56 59.87 11.93 59.57 11.93 C59.28 11.92 59.07 12.54 59.96 12.55 C60.84 12.56 60.65 11.94 60.36 11.93 C60.06 11.93 59.86 12.55 60.75 12.56 C61.63 12.57 61.44 11.94 61.15 11.94 C60.85 11.94 60.65 12.56 61.53 12.57 C62.42 12.58 62.23 11.95 61.93 11.95 C61.64 11.95 61.43 12.57 62.32 12.58 C63.20 12.58 63.01 11.96 62.72 11.96 C62.42 11.95 62.22 12.58 63.11 12.58 C63.99 12.59 63.80 11.96 63.51 11.96 C63.21 11.96 63.01 12.58 63.89 12.59 C64.78 12.60 64.59 11.98 64.30 11.97 C64.00 11.96 63.78 12.57 64.67 12.61 C65.55 12.65 65.39 12.02 65.09 12.01 C64.80 11.99 64.57 12.60 65.45 12.65 C66.33 12.70 66.18 12.07 65.88 12.05 C65.59 12.04 65.35 12.65 66.24 12.70 C67.12 12.75 66.96 12.12 66.67 12.10 C66.37 12.08 66.14 12.70 67.02 12.75 C67.91 12.80 67.74 12.16 67.45 12.15 C67.15 12.13 66.93 12.75 67.81 12.79 C68.69 12.83 68.53 12.20 68.23 12.18 C67.94 12.17 67.72 12.79 68.60 12.82 C69.49 12.85 69.31 12.22 69.01 12.21 C68.72 12.20 68.51 12.83 69.39 12.84 C70.28 12.86 70.09 12.22 69.79 12.22 C69.50 12.22 69.30 12.86 70.19 12.85 C71.07 12.83 70.86 12.20 70.57 12.21 C70.27 12.22 70.11 12.87 70.99 12.82 C71.87 12.77 71.63 12.14 71.33 12.17 C71.04 12.19 70.92 12.86 71.80 12.74 C72.67 12.62 72.37 12.00 72.08 12.06 C71.79 12.12 71.78 12.84 72.62 12.56 C73.46 12.28 73.03 11.72 72.76 11.84 C72.49 11.96 72.61 12.64 73.39 12.22 C74.17 11.80 73.67 11.33 73.42 11.49 C73.17 11.64 73.36 12.30 74.09 11.79 C74.81 11.28 74.27 10.87 74.04 11.05 C73.80 11.23 74.06 11.86 74.73 11.29 C75.41 10.73 75.12 10.53 75.12 10.53" fill="none"/></g>
<g fill="green" mcviz:r="P1726_V7_V1349" stroke="green" stroke-linecap="round" stroke-width="0.0775735655328" transform="scale(1.000)"><path d="M37.40 31.78 C37.40 31.78 37.69 31.93 37.84 31.07 C37.98 30.21 37.33 30.29 37.29 30.58 C37.24 30.87 37.82 31.16 37.96 30.30 C38.11 29.44 37.46 29.53 37.41 29.82 C37.36 30.10 37.95 30.40 38.09 29.53 C38.23 28.67 37.58 28.76 37.53 29.05 C37.49 29.34 38.08 29.63 38.21 28.76 C38.34 27.90 37.69 27.99 37.65 28.28 C37.61 28.57 38.20 28.86 38.32 27.99 C38.45 27.12 37.80 27.23 37.76 27.52 C37.72 27.80 38.32 28.08 38.43 27.21 C38.54 26.35 37.87 26.48 37.85 26.77 C37.83 27.06 38.46 27.28 38.49 26.41 C38.52 25.53 37.88 25.71 37.88 26.00 C37.87 26.30 38.50 26.50 38.50 25.62 C38.51 24.75 37.88 24.94 37.88 25.23 C37.88 25.52 38.51 25.72 38.50 24.84 C38.50 23.97 37.87 24.16 37.88 24.46 C37.88 24.75 38.50 24.94 38.50 24.06 C38.49 23.19 37.87 23.39 37.87 23.68 C37.87 23.97 38.49 24.16 38.49 23.29 C38.50 22.41 37.88 22.60 37.87 22.90 C37.87 23.19 38.49 23.39 38.50 22.52 C38.52 21.64 37.90 21.82 37.89 22.11 C37.88 22.40 38.49 22.62 38.53 21.75 C38.56 20.87 37.94 21.03 37.92 21.32 C37.90 21.62 38.50 21.85 38.57 20.98 C38.64 20.11 38.02 20.25 37.99 20.54 C37.96 20.83 38.53 21.09 38.65 20.23 C38.77 19.36 38.15 19.46 38.10 19.74 C38.05 20.03 38.59 20.34 38.79 19.49 C38.99 18.64 38.37 18.67 38.29 18.95 C38.20 19.23 38.67 19.60 39.00 18.79 C39.33 17.98 38.76 17.92 38.61 18.17 C38.47 18.42 38.76 18.87 39.34 18.22 C39.93 17.57 39.45 17.33 39.21 17.50 C38.98 17.68 39.05 18.18 39.86 17.85 C40.66 17.51 40.37 17.12 40.08 17.15 C39.79 17.18 39.59 17.68 40.46 17.78 C41.33 17.88 41.23 17.29 40.95 17.23 C40.66 17.17 40.34 17.75 41.20 17.93 C42.06 18.11 41.98 17.42 41.69 17.38 C41.40 17.34 41.14 17.99 42.01 18.04 C42.89 18.09 42.71 17.42 42.42 17.42 C42.13 17.42 41.93 18.05 42.81 18.05 C43.68 18.05 43.49 17.42 43.20 17.42 C42.91 17.42 42.71 18.05 43.59 18.05 C44.46 18.05 44.27 17.42 43.98 17.42 C43.68 17.42 43.49 18.05 44.37 18.05 C45.24 18.05 45.05 17.42 44.75 17.42 C44.46 17.42 44.27 18.05 45.14 18.05 C46.02 18.05 45.82 17.42 45.53 17.42 C45.24 17.42 45.05 18.05 45.92 18.05 C46.80 18.05 46.60 17.42 46.31 17.42 C46.02 17.42 45.82 18.05 46.70 18.05 C47.57 18.05 47.38 17.42 47.09 17.42 C46.80 17.42 46.60 18.05 47.48 18.05 C48.35 18.05 48.16 17.42 47.87 17.42 C47.57 17.42 47.38 18.05 48.25 18.05 C49.13 18.05 48.93 17.42 48.64 17.42 C48.35 17.42 48.16 18.05 49.03 18.05 C49.91 18.05 49.71 17.42 49.42 17.42 C49.13 17.42 48.93 18.05 49.81 18.05 C50.68 18.05 50.49 17.42 50.20 17.42 C49.91 17.42 49.71 18.05 50.59 18.05 C51.46 18.05 51.26 17.41 50.97 17.42 C50.68 17.43 50.51 18.08 51.39 18.02 C52.26 17.97 52.01 17.34 51.72 17.37 C51.43 17.40 51.32 18.07 52.19 17.93 C53.05 17.80 52.74 17.19 52.46 17.25 C52.17 17.31 52.14 17.99 52.98 17.76 C53.82 17.54 53.45 16.96 53.17 17.06 C52.89 17.15 52.94 17.83 53.75 17.51 C54.56 17.18 54.13 16.66 53.86 16.78 C53.60 16.90 53.71 17.57 54.49 17.17 C55.26 16.77 54.79 16.29 54.53 16.44 C54.28 16.58 54.43 17.23 55.18 16.78 C55.93 16.33 55.44 15.89 55.19 16.04 C54.94 16.20 55.11 16.83 55.85 16.37 C56.59 15.90 56.10 15.48 55.85 15.63 C55.60 15.79 55.75 16.41 56.50 15.96 C57.26 15.52 56.78 15.09 56.53 15.23 C56.27 15.37 56.40 16.00 57.17 15.59 C57.94 15.18 57.49 14.73 57.23 14.86 C56.97 14.99 57.05 15.62 57.85 15.25 C58.64 14.89 58.22 14.41 57.95 14.53 C57.69 14.64 57.73 15.27 58.55 14.96 C59.37 14.65 58.98 14.15 58.70 14.24 C58.43 14.34 58.43 14.97 59.26 14.72 C60.10 14.46 59.74 13.92 59.46 14.01 C59.18 14.09 59.16 14.74 60.00 14.50 C60.85 14.26 60.49 13.71 60.21 13.79 C59.93 13.87 59.90 14.52 60.75 14.29 C61.59 14.07 61.25 13.52 60.97 13.59 C60.69 13.66 60.64 14.30 61.49 14.11 C62.35 13.92 62.03 13.37 61.75 13.42 C61.46 13.48 61.38 14.11 62.24 13.97 C63.10 13.82 62.81 13.24 62.52 13.29 C62.24 13.33 62.13 13.97 63.00 13.85 C63.87 13.73 63.59 13.14 63.30 13.18 C63.01 13.22 62.90 13.86 63.77 13.75 C64.63 13.63 64.37 13.05 64.08 13.08 C63.79 13.11 63.64 13.72 64.52 13.67 C65.39 13.62 65.17 13.02 64.88 13.03 C64.59 13.04 64.41 13.66 65.28 13.65 C66.16 13.64 65.96 13.03 65.67 13.03 C65.38 13.02 65.18 13.64 66.05 13.65 C66.93 13.66 66.74 13.04 66.45 13.03 C66.16 13.03 65.95 13.65 66.83 13.66 C67.70 13.68 67.52 13.05 67.23 13.05 C66.94 13.04 66.73 13.66 67.61 13.68 C68.48 13.69 68.30 13.06 68.00 13.06 C67.71 13.06 67.51 13.68 68.39 13.69 C69.26 13.69 69.07 13.07 68.78 13.07 C68.49 13.07 68.29 13.70 69.17 13.69 C70.04 13.68 69.84 13.05 69.55 13.06 C69.26 13.06 69.08 13.70 69.96 13.67 C70.83 13.64 70.61 13.01 70.32 13.03 C70.02 13.05 69.87 13.70 70.75 13.63 C71.62 13.56 71.36 12.94 71.07 12.97 C70.78 13.00 70.68 13.67 71.54 13.54 C72.41 13.40 72.09 12.79 71.81 12.85 C71.52 12.91 71.51 13.62 72.35 13.35 C73.18 13.08 72.74 12.51 72.48 12.63 C72.22 12.75 72.36 13.44 73.11 13.00 C73.87 12.55 73.34 12.09 73.10 12.26 C72.86 12.43 73.11 13.08 73.79 12.53 C74.47 11.98 73.89 11.60 73.68 11.80 C73.46 11.99 73.77 12.60 74.39 11.98 C75.01 11.37 74.41 11.06 74.21 11.27 C74.01 11.49 74.37 12.06 74.93 11.39 C75.50 10.73 75.18 10.58 75.18 10.58" fill="none"/></g>
<g fill="green" mcviz:r="P490_V428_V1349" stroke="green" stroke-linecap="round" stroke-width="0.0434867348442" transform="scale(1.000)"><path d="M53.92 8.01 C53.92 8.01 53.96 8.31 54.73 7.93 C55.50 7.55 55.07 7.09 54.81 7.20 C54.55 7.32 54.60 7.94 55.40 7.63 C56.20 7.32 55.82 6.83 55.55 6.91 C55.28 7.00 55.25 7.61 56.09 7.41 C56.92 7.20 56.62 6.68 56.34 6.72 C56.06 6.77 55.95 7.39 56.80 7.29 C57.65 7.19 57.39 6.60 57.11 6.63 C56.83 6.66 56.70 7.29 57.55 7.21 C58.40 7.13 58.16 6.53 57.87 6.56 C57.59 6.58 57.45 7.22 58.30 7.15 C59.16 7.08 58.92 6.48 58.64 6.50 C58.35 6.52 58.21 7.15 59.06 7.09 C59.92 7.04 59.69 6.43 59.40 6.45 C59.11 6.46 58.96 7.10 59.82 7.05 C60.68 6.99 60.45 6.38 60.16 6.40 C59.88 6.42 59.72 7.05 60.58 7.00 C61.43 6.95 61.21 6.34 60.93 6.36 C60.64 6.37 60.48 7.00 61.34 6.96 C62.19 6.92 61.97 6.31 61.69 6.32 C61.40 6.33 61.24 6.96 62.10 6.93 C62.95 6.89 62.74 6.27 62.45 6.29 C62.17 6.30 62.00 6.93 62.86 6.89 C63.71 6.86 63.50 6.25 63.21 6.26 C62.93 6.27 62.76 6.90 63.62 6.87 C64.47 6.84 64.26 6.22 63.98 6.23 C63.69 6.24 63.52 6.87 64.38 6.84 C65.23 6.82 65.03 6.20 64.74 6.21 C64.45 6.22 64.28 6.84 65.14 6.82 C65.99 6.80 65.79 6.19 65.50 6.19 C65.22 6.20 65.04 6.82 65.90 6.81 C66.75 6.79 66.55 6.17 66.27 6.18 C65.98 6.18 65.80 6.81 66.66 6.80 C67.51 6.79 67.32 6.17 67.03 6.17 C66.75 6.17 66.56 6.79 67.42 6.79 C68.27 6.79 68.08 6.17 67.80 6.17 C67.51 6.17 67.32 6.79 68.17 6.79 C69.03 6.80 68.85 6.18 68.56 6.17 C68.28 6.17 68.08 6.79 68.93 6.80 C69.79 6.82 69.61 6.20 69.33 6.19 C69.04 6.18 68.83 6.79 69.69 6.82 C70.55 6.85 70.38 6.23 70.09 6.21 C69.81 6.20 69.59 6.81 70.44 6.86 C71.30 6.90 71.15 6.28 70.86 6.26 C70.58 6.24 70.34 6.83 71.19 6.91 C72.05 6.99 71.92 6.37 71.64 6.33 C71.36 6.30 71.08 6.85 71.92 7.00 C72.76 7.16 72.71 6.57 72.44 6.49 C72.17 6.40 71.79 6.81 72.55 7.21 C73.30 7.62 73.43 7.03 73.19 6.88 C72.96 6.72 72.46 7.07 73.13 7.60 C73.80 8.14 74.04 7.57 73.83 7.38 C73.62 7.19 73.07 7.47 73.66 8.09 C74.26 8.71 74.57 8.17 74.38 7.95 C74.20 7.74 73.61 7.97 74.14 8.64 C74.67 9.32 75.04 8.80 74.87 8.57 C74.70 8.34 74.10 8.53 74.57 9.24 C75.05 9.95 75.23 9.72 75.23 9.72" fill="none"/></g>
<g fill="green" mcviz:r="P692_V587_V1349" stroke="green" stroke-linecap="round" stroke-width="0.0277826011598" transform="scale(1.000)"><path d="M60.36 8.25 C60.36 8.25 60.38 8.56 61.15 8.26 C61.92 7.97 61.53 7.46 61.27 7.55 C61.01 7.65 61.05 8.29 61.83 8.01 C62.61 7.74 62.24 7.22 61.98 7.31 C61.72 7.39 61.72 8.03 62.51 7.79 C63.30 7.55 62.96 7.02 62.69 7.09 C62.43 7.16 62.40 7.80 63.21 7.60 C64.01 7.40 63.69 6.85 63.42 6.91 C63.16 6.97 63.09 7.59 63.90 7.45 C64.72 7.31 64.46 6.76 64.18 6.79 C63.91 6.81 63.78 7.44 64.60 7.38 C65.42 7.32 65.20 6.72 64.93 6.73 C64.65 6.75 64.50 7.38 65.33 7.34 C66.15 7.30 65.94 6.69 65.66 6.70 C65.39 6.71 65.23 7.34 66.06 7.31 C66.88 7.27 66.68 6.66 66.40 6.67 C66.13 6.68 65.96 7.31 66.79 7.28 C67.61 7.25 67.41 6.64 67.14 6.65 C66.86 6.65 66.69 7.28 67.52 7.26 C68.35 7.24 68.15 6.62 67.87 6.63 C67.60 6.63 67.43 7.26 68.25 7.25 C69.08 7.23 68.89 6.62 68.61 6.62 C68.33 6.62 68.16 7.24 68.98 7.24 C69.81 7.23 69.62 6.61 69.35 6.61 C69.07 6.61 68.89 7.23 69.71 7.24 C70.54 7.24 70.36 6.62 70.09 6.62 C69.81 6.62 69.62 7.23 70.44 7.25 C71.27 7.27 71.10 6.64 70.83 6.64 C70.55 6.63 70.34 7.23 71.17 7.27 C71.99 7.31 71.85 6.69 71.57 6.67 C71.30 6.65 71.06 7.24 71.88 7.33 C72.70 7.41 72.61 6.82 72.34 6.76 C72.07 6.71 71.74 7.12 72.49 7.47 C73.23 7.83 73.34 7.24 73.11 7.10 C72.87 6.95 72.40 7.34 73.07 7.82 C73.74 8.30 73.95 7.72 73.74 7.55 C73.53 7.37 73.00 7.70 73.60 8.26 C74.21 8.82 74.49 8.27 74.30 8.07 C74.11 7.87 73.55 8.15 74.09 8.77 C74.64 9.39 74.98 8.86 74.81 8.64 C74.63 8.43 74.04 8.66 74.54 9.32 C75.03 9.98 75.21 9.73 75.21 9.73" fill="none"/></g>
<g fill="green" mcviz:r="P883_V723_V1349" stroke="green" stroke-linecap="round" stroke-width="0.0223323296721" transform="scale(1.000)"><path d="M60.37 11.78 C60.37 11.78 60.25 12.09 61.09 12.16 C61.94 12.23 61.80 11.59 61.52 11.57 C61.24 11.54 61.00 12.15 61.85 12.22 C62.70 12.28 62.56 11.64 62.27 11.62 C61.99 11.60 61.76 12.21 62.61 12.27 C63.46 12.33 63.31 11.69 63.03 11.67 C62.74 11.65 62.51 12.27 63.36 12.32 C64.21 12.38 64.06 11.74 63.78 11.72 C63.50 11.70 63.27 12.32 64.12 12.37 C64.97 12.42 64.82 11.78 64.53 11.77 C64.25 11.75 64.03 12.36 64.88 12.41 C65.73 12.45 65.57 11.82 65.29 11.80 C65.00 11.79 64.79 12.41 65.64 12.44 C66.49 12.48 66.32 11.85 66.04 11.84 C65.76 11.83 65.54 12.44 66.40 12.48 C67.25 12.51 67.08 11.87 66.79 11.87 C66.51 11.86 66.30 12.48 67.15 12.50 C68.01 12.52 67.83 11.89 67.55 11.89 C67.26 11.88 67.06 12.50 67.91 12.52 C68.77 12.53 68.58 11.90 68.30 11.90 C68.02 11.90 67.82 12.52 68.68 12.52 C69.53 12.53 69.34 11.90 69.05 11.90 C68.77 11.90 68.59 12.53 69.44 12.52 C70.29 12.51 70.09 11.88 69.80 11.89 C69.52 11.90 69.35 12.53 70.20 12.50 C71.05 12.47 70.83 11.85 70.55 11.86 C70.27 11.88 70.12 12.52 70.97 12.46 C71.82 12.40 71.58 11.78 71.29 11.81 C71.01 11.84 70.89 12.50 71.74 12.39 C72.58 12.28 72.30 11.66 72.02 11.71 C71.74 11.76 71.70 12.46 72.52 12.24 C73.35 12.03 72.96 11.44 72.70 11.53 C72.43 11.63 72.50 12.32 73.28 11.97 C74.06 11.63 73.61 11.12 73.35 11.25 C73.10 11.38 73.25 12.04 73.98 11.61 C74.72 11.19 74.22 10.73 73.98 10.88 C73.75 11.04 73.94 11.68 74.64 11.20 C75.35 10.72 75.08 10.49 75.08 10.49" fill="none"/></g>
<g fill="blue" mcviz:r="P882_V723_V1349" stroke="blue" stroke-linecap="round" stroke-width="0.0376912221903" transform="scale(1.000)"><path d="M60.36 11.75 C60.70 11.58 62.45 10.76 63.98 10.47 C65.07 10.27 72.89 10.19 74.96 10.17" fill="none"/><path d="M67.78 10.28L67.31 10.44C67.35 10.37 67.35 10.22 67.30 10.15Z" stroke="none"/></g>
<use mcviz:r="P882_V723_V1349" x="68.192" y="9.636" transform="scale(1.000)" xlink:href="#pdg-2" />
<g fill="#EFDECD" mcviz:r="P1339_V1092_V1447" stroke="#EFDECD" stroke-linecap="round" stroke-width="0.173854904401" transform="scale(1.000)"><path d="M75.52 32.79 C75.83 32.63 77.28 31.88 78.58 31.62 C83.33 30.68 89.38 31.23 90.16 31.31" fill="none"/><path d="M82.96 31.13L82.48 31.30C82.53 31.22 82.52 31.08 82.47 31.01Z" stroke="none"/></g>
<use mcviz:r="P1339_V1092_V1447" x="83.132" y="30.493" transform="scale(1.000)" xlink:href="#pdg15" />
<g fill="black" mcviz:r="P2031_V1447_V1575" stroke="black" stroke-linecap="round" stroke-width="0.150784195862" transform="scale(1.000)"><path d="M90.29 31.24 C90.43 31.02 90.88 30.38 91.44 30.12 C93.08 29.38 95.03 29.68 95.44 29.75" fill="none"/><path d="M95.82 29.80L95.33 29.88C95.38 29.82 95.40 29.67 95.36 29.60Z" stroke="none"/></g>
<use mcviz:r="P2031_V1447_V1575" x="93.016" y="29.105" transform="scale(1.000)" xlink:href="#pdg113" />
<g fill="orange" mcviz:r="P10_V8_V1656" stroke="orange" stroke-linecap="round" stroke-width="0.134192929678" transform="scale(1.000)"><path d="M42.33 23.67 C42.33 23.67 42.33 23.67 42.47 23.64 C42.61 23.62 42.60 23.58 42.74 23.56 C42.88 23.54 42.90 23.64 43.04 23.62 C43.18 23.60 43.15 23.45 43.29 23.43 C43.44 23.41 43.46 23.60 43.60 23.59 C43.74 23.57 43.72 23.35 43.86 23.34 C44.00 23.33 44.02 23.57 44.16 23.56 C44.30 23.55 44.28 23.29 44.42 23.28 C44.56 23.27 44.58 23.54 44.72 23.53 C44.87 23.52 44.85 23.24 44.99 23.23 C45.13 23.22 45.15 23.51 45.29 23.50 C45.43 23.49 45.42 23.21 45.56 23.20 C45.70 23.19 45.71 23.48 45.85 23.47 C45.99 23.47 45.98 23.18 46.12 23.17 C46.26 23.17 46.28 23.46 46.42 23.45 C46.56 23.45 46.55 23.16 46.69 23.15 C46.83 23.15 46.84 23.44 46.98 23.43 C47.12 23.43 47.12 23.14 47.26 23.14" fill="none"/></g>
<g fill="#EFDECD" mcviz:r="P1340_V1092_V1657" stroke="#EFDECD" stroke-linecap="round" stroke-width="0.188644803198" transform="scale(1.000)"><path d="M75.53 32.82C76.56 32.82 89.30 32.82 90.19 32.82" fill="none"/><path d="M83.10 32.82L82.62 32.96C82.67 32.89 82.67 32.75 82.62 32.68Z" stroke="none"/></g>
<use mcviz:r="P1340_V1092_V1657" x="83.147" y="32.193" transform="scale(1.000)" xlink:href="#pdg-16" />
<g fill="black" mcviz:r="P1375_V1126_V1658" stroke="black" stroke-linecap="round" stroke-width="0.0499473134701" transform="scale(1.000)"><path d="M75.97 21.39C78.45 21.39 88.96 21.39 89.81 21.39" fill="none"/><path d="M90.19 21.39L89.71 21.53C89.76 21.46 89.76 21.32 89.71 21.24Z" stroke="none"/></g>
<text x="78.896" y="21.132" font-size="1.00">
cluster (1.7 GeV)
</text>
<g fill="black" mcviz:r="P1394_V1139_V1659" stroke="black" stroke-linecap="round" stroke-width="0.131702226838" transform="scale(1.000)"><path d="M75.97 22.89C78.45 22.89 88.96 22.89 89.81 22.89" fill="none"/><path d="M90.19 22.89L89.71 23.03C89.76 22.96 89.76 22.82 89.71 22.74Z" stroke="none"/></g>
<text x="78.646" y="22.632" font-size="1.00">
cluster (20.0 GeV)
</text>
<g fill="black" mcviz:r="P1404_V1146_V1660" stroke="black" stroke-linecap="round" stroke-width="0.0853184099411" transform="scale(1.000)"><path d="M75.97 29.21C78.45 29.21 88.96 29.21 89.81 29.21" fill="none"/><path d="M90.19 29.21L89.71 29.35C89.76 29.28 89.76 29.14 89.71 29.06Z" stroke="none"/></g>
<text x="78.896" y="28.951" font-size="1.00">
cluster (5.6 GeV)
</text>
<g fill="black" mcviz:r="P1417_V1153_V1662" stroke="black" stroke-linecap="round" stroke-width="0.0308774303117" transform="scale(1.000)"><path d="M75.97 41.51C78.45 41.51 88.96 41.51 89.81 41.51" fill="none"/><path d="M90.19 41.51L89.71 41.66C89.76 41.59 89.76 41.44 89.71 41.37Z" stroke="none"/></g>
<text x="78.896" y="41.257" font-size="1.00">
cluster (0.7 GeV)
</text>
<g fill="black" mcviz:r="P1426_V1156_V1665" stroke="black" stroke-linecap="round" stroke-width="0.0357211455217" transform="scale(1.000)"><path d="M75.97 36.90C78.45 36.90 88.96 36.90 89.81 36.90" fill="none"/><path d="M90.19 36.90L89.71 37.05C89.76 36.97 89.76 36.83 89.71 36.76Z" stroke="none"/></g>
<text x="78.896" y="36.646" font-size="1.00">
cluster (0.9 GeV)
</text>
<g fill="black" mcviz:r="P1443_V1166_V1668" stroke="black" stroke-linecap="round" stroke-width="0.0930960965727" transform="scale(1.000)"><path d="M75.97 4.74C78.45 4.74 88.96 4.74 89.81 4.74" fill="none"/><path d="M90.19 4.74L89.71 4.88C89.76 4.81 89.76 4.66 89.71 4.59Z" stroke="none"/></g>
<text x="78.896" y="4.479" font-size="1.00">
cluster (7.0 GeV)
</text>
<g fill="black" mcviz:r="P1471_V1183_V1674" stroke="black" stroke-linecap="round" stroke-width="0.177154517926" transform="scale(1.000)"><path d="M75.97 25.79C78.45 25.79 88.96 25.79 89.81 25.79" fill="none"/><path d="M90.19 25.79L89.71 25.94C89.76 25.86 89.76 25.72 89.71 25.65Z" stroke="none"/></g>
<text x="78.646" y="25.535" font-size="1.00">
cluster (64.3 GeV)
</text>
<g fill="black" mcviz:r="P1501_V1197_V1681" stroke="black" stroke-linecap="round" stroke-width="0.115621807511" transform="scale(1.000)"><path d="M75.97 1.89C78.45 1.89 88.96 1.89 89.81 1.89" fill="none"/><path d="M90.19 1.89L89.71 2.03C89.76 1.96 89.76 1.82 89.71 1.74Z" stroke="none"/></g>
<text x="78.646" y="1.632" font-size="1.00">
cluster (13.0 GeV)
</text>
<g fill="black" mcviz:r="P1556_V1231_V1688" stroke="black" stroke-linecap="round" stroke-width="0.177396517446" transform="scale(1.000)"><path d="M75.97 19.89C78.45 19.89 88.96 19.89 89.81 19.89" fill="none"/><path d="M90.19 19.89L89.71 20.03C89.76 19.96 89.76 19.82 89.71 19.74Z" stroke="none"/></g>
<text x="78.646" y="19.632" font-size="1.00">
cluster (64.7 GeV)
</text>
<g fill="black" mcviz:r="P1616_V1257_V1702" stroke="black" stroke-linecap="round" stroke-width="0.194214322919" transform="scale(1.000)"><path d="M75.97 38.90C78.45 38.90 88.96 38.90 89.81 38.90" fill="none"/><path d="M90.19 38.90L89.71 39.05C89.76 38.97 89.76 38.83 89.71 38.76Z" stroke="none"/></g>
<text x="78.646" y="38.646" font-size="1.00">
cluster (99.0 GeV)
</text>
<g fill="black" mcviz:r="P1734_V1349_V1713" stroke="black" stroke-linecap="round" stroke-width="0.166366641187" transform="scale(1.000)"><path d="M75.97 10.17C78.45 10.17 88.96 10.17 89.81 10.17" fill="none"/><path d="M90.19 10.17L89.71 10.31C89.76 10.24 89.76 10.10 89.71 10.02Z" stroke="none"/></g>
<text x="78.646" y="9.910" font-size="1.00">
cluster (48.9 GeV)
</text>
<g fill="red" mcviz:r="P9_V8_V175" stroke="red" stroke-linecap="round" stroke-width="0.132713757681" transform="scale(1.000)"><path d="M42.30 23.74 C42.48 23.93 43.07 24.51 43.69 24.71 C45.14 25.17 47.03 24.43 47.39 24.28" fill="none"/><path d="M44.96 24.86L44.48 25.00C44.53 24.93 44.53 24.79 44.48 24.71Z" stroke="none"/></g>
<use mcviz:r="P9_V8_V175" x="44.461" y="24.070" transform="scale(1.000)" xlink:href="#pdg4" />
<g fill="orange" mcviz:r="P1371_V1123_V1759" stroke="orange" stroke-linecap="round" stroke-width="0.053620272724" transform="scale(1.000)"><path d="M60.37 6.43C61.42 6.41 74.11 6.15 75.03 6.13" fill="none"/><path d="M75.42 6.13L74.94 6.28C74.99 6.21 74.98 6.06 74.93 5.99Z" stroke="none"/></g>
<text x="63.979" y="5.937" font-size="1.00">
cluster (2.0 GeV)
</text>
<g fill="black" mcviz:r="P1380_V1130_V1762" stroke="black" stroke-linecap="round" stroke-width="0.0960630282635" transform="scale(1.000)"><path d="M75.97 15.01C78.45 15.01 88.96 15.01 89.81 15.01" fill="none"/><path d="M90.19 15.01L89.71 15.16C89.76 15.09 89.76 14.94 89.71 14.87Z" stroke="none"/></g>
<text x="78.896" y="14.757" font-size="1.00">
cluster (7.6 GeV)
</text>
<g fill="black" mcviz:r="P1387_V1135_V1765" stroke="black" stroke-linecap="round" stroke-width="0.0672392263763" transform="scale(1.000)"><path d="M75.97 34.32C78.45 34.32 88.96 34.32 89.81 34.32" fill="none"/><path d="M90.19 34.32L89.71 34.46C89.76 34.39 89.76 34.25 89.71 34.18Z" stroke="none"/></g>
<text x="78.896" y="34.063" font-size="1.00">
cluster (3.2 GeV)
</text>
<g fill="#EFDECD" mcviz:r="P2029_V1447_V1879" stroke="#EFDECD" stroke-linecap="round" stroke-width="0.135422818083" transform="scale(1.000)"><path d="M90.33 31.32C90.98 31.32 95.29 31.32 95.83 31.32" fill="none"/><path d="M93.32 31.32L92.84 31.46C92.89 31.39 92.89 31.25 92.84 31.18Z" stroke="none"/></g>
<use mcviz:r="P2029_V1447_V1879" x="93.009" y="30.628" transform="scale(1.000)" xlink:href="#pdg16" />
<g fill="black" mcviz:r="P2030_V1447_V1880" stroke="black" stroke-linecap="round" stroke-width="0.0771639327022" transform="scale(1.000)"><path d="M90.29 31.39 C90.42 31.62 90.86 32.29 91.44 32.56 C93.09 33.31 95.07 32.97 95.45 32.89" fill="none"/><path d="M95.83 32.84L95.38 33.05C95.41 32.97 95.39 32.83 95.34 32.76Z" stroke="none"/></g>
<use mcviz:r="P2030_V1447_V1880" x="93.094" y="31.979" transform="scale(1.000)" xlink:href="#pdg-211" />
<g fill="blue" mcviz:r="P6_V5_V205" stroke="blue" stroke-linecap="round" stroke-width="0.209482586231" transform="scale(1.000)"><path d="M10.75 29.94 C10.88 30.53 11.80 34.13 13.99 34.13 C13.99 34.13 13.99 34.13 47.45 34.13 C50.28 34.13 53.37 36.22 53.81 36.53" fill="none"/><path d="M31.57 34.13L31.09 34.27C31.14 34.20 31.14 34.05 31.09 33.98Z" stroke="none"/></g>
<use mcviz:r="P6_V5_V205" x="28.186" y="33.640" transform="scale(1.000)" xlink:href="#pdg-6" />
<g fill="black" mcviz:r="P2313_V1575_V2106" stroke="black" stroke-linecap="round" stroke-width="0.0446199717947" transform="scale(1.000)"><path d="M95.94 29.79 C96.11 29.71 96.61 29.47 97.06 29.38 C98.83 28.99 100.69 29.05 101.05 29.06" fill="none"/><path d="M101.43 29.06L100.95 29.20C101.00 29.13 101.00 28.99 100.95 28.91Z" stroke="none"/></g>
<use mcviz:r="P2313_V1575_V2106" x="98.713" y="28.590" transform="scale(1.000)" xlink:href="#pdg211" />
<g fill="black" mcviz:r="P2314_V1575_V2107" stroke="black" stroke-linecap="round" stroke-width="0.149119158616" transform="scale(1.000)"><path d="M95.93 29.86 C96.07 30.01 96.56 30.46 97.06 30.61 C98.79 31.14 100.69 30.74 101.05 30.66" fill="none"/><path d="M101.43 30.59L100.98 30.82C101.02 30.74 100.99 30.59 100.93 30.53Z" stroke="none"/></g>
<use mcviz:r="P2314_V1575_V2107" x="98.720" y="30.035" transform="scale(1.000)" xlink:href="#pdg-211" />
<g fill="green" mcviz:r="P203_V175_V226" stroke="green" stroke-linecap="round" stroke-width="0.0644721935048" transform="scale(1.000)"><path d="M47.52 24.25 C47.52 24.25 47.43 24.56 48.16 24.56 C48.90 24.56 48.73 23.94 48.49 23.94 C48.25 23.94 48.08 24.56 48.81 24.56 C49.55 24.56 49.38 23.94 49.14 23.94 C48.90 23.94 48.73 24.56 49.46 24.56 C50.20 24.56 50.03 23.94 49.79 23.94 C49.55 23.94 49.38 24.56 50.11 24.56 C50.85 24.56 50.68 23.94 50.44 23.94 C50.20 23.94 50.03 24.56 50.76 24.56 C51.50 24.56 51.33 23.94 51.09 23.94 C50.85 23.94 50.68 24.56 51.41 24.56 C52.15 24.56 51.98 23.94 51.74 23.94 C51.50 23.94 51.33 24.56 52.06 24.56 C52.80 24.56 52.63 23.94 52.39 23.94 C52.15 23.94 51.98 24.56 52.71 24.56 C53.45 24.56 53.36 24.25 53.36 24.25" fill="none"/></g>
<g fill="red" mcviz:r="P5_V5_V24" stroke="red" stroke-linecap="round" stroke-width="0.203162870823" transform="scale(1.000)"><path d="M10.76 29.78C11.08 29.01 13.70 22.74 13.97 22.08" fill="none"/><path d="M12.46 25.71L12.41 26.21C12.36 26.14 12.23 26.08 12.14 26.10Z" stroke="none"/></g>
<use mcviz:r="P5_V5_V24" x="12.388" y="23.571" transform="scale(1.000)" xlink:href="#pdg6" />
<g fill="green" mcviz:r="P264_V58_V269" stroke="green" stroke-linecap="round" stroke-width="0.0322776259216" transform="scale(1.000)"><path d="M32.32 13.03 C32.32 13.03 32.14 13.32 32.96 13.55 C33.78 13.78 33.76 13.12 33.49 13.05 C33.21 12.97 32.87 13.54 33.70 13.75 C34.53 13.95 34.49 13.29 34.22 13.23 C33.94 13.16 33.62 13.74 34.45 13.92 C35.29 14.09 35.23 13.43 34.95 13.38 C34.67 13.33 34.37 13.92 35.21 14.06 C36.05 14.20 35.96 13.54 35.68 13.50 C35.40 13.46 35.13 14.07 35.97 14.17 C36.82 14.27 36.70 13.62 36.42 13.59 C36.13 13.56 35.90 14.19 36.75 14.24 C37.60 14.29 37.43 13.64 37.15 13.63 C36.87 13.63 36.67 14.26 37.52 14.26 C38.38 14.26 38.19 13.63 37.90 13.63 C37.62 13.63 37.43 14.26 38.28 14.26 C39.13 14.26 38.94 13.63 38.66 13.63 C38.38 13.63 38.19 14.26 39.04 14.26 C39.89 14.26 39.70 13.63 39.42 13.63 C39.13 13.63 38.95 14.26 39.80 14.26 C40.65 14.26 40.46 13.63 40.18 13.63 C39.89 13.63 39.70 14.26 40.56 14.26 C41.41 14.26 41.22 13.63 40.94 13.63 C40.65 13.63 40.46 14.26 41.31 14.26 C42.17 14.26 41.98 13.63 41.69 13.63 C41.41 13.63 41.22 14.26 42.07 14.26 C42.93 14.26 42.74 13.63 42.45 13.63 C42.17 13.63 41.98 14.26 42.83 14.26 C43.68 14.26 43.49 13.63 43.21 13.63 C42.93 13.63 42.74 14.26 43.59 14.26 C44.44 14.26 44.25 13.63 43.97 13.63 C43.68 13.63 43.49 14.26 44.35 14.26 C45.20 14.26 45.01 13.63 44.73 13.63 C44.44 13.63 44.25 14.26 45.11 14.26 C45.96 14.26 45.77 13.63 45.48 13.63 C45.20 13.63 45.01 14.26 45.86 14.26 C46.72 14.26 46.53 13.63 46.24 13.63 C45.96 13.63 45.77 14.26 46.62 14.26 C47.47 14.26 47.28 13.63 47.00 13.63 C46.72 13.63 46.53 14.26 47.38 14.26 C48.23 14.26 48.04 13.63 47.76 13.63 C47.47 13.63 47.28 14.26 48.14 14.26 C48.99 14.26 48.80 13.63 48.52 13.63 C48.23 13.63 48.04 14.26 48.90 14.26 C49.75 14.26 49.56 13.63 49.27 13.63 C48.99 13.63 48.80 14.26 49.65 14.26 C50.51 14.26 50.32 13.63 50.03 13.63 C49.75 13.63 49.56 14.26 50.41 14.26 C51.26 14.26 51.08 13.63 50.79 13.63 C50.51 13.63 50.32 14.26 51.17 14.26 C52.02 14.26 51.83 13.63 51.55 13.63 C51.27 13.63 51.08 14.26 51.93 14.26 C52.78 14.26 52.59 13.63 52.31 13.63 C52.02 13.63 51.83 14.26 52.69 14.26 C53.54 14.26 53.35 13.63 53.07 13.63 C52.78 13.63 52.59 14.26 53.45 14.26 C54.30 14.26 54.11 13.63 53.82 13.63 C53.54 13.63 53.35 14.25 54.20 14.26 C55.05 14.27 54.88 13.65 54.59 13.64 C54.31 13.64 54.10 14.24 54.95 14.28 C55.80 14.32 55.64 13.69 55.36 13.68 C55.07 13.66 54.85 14.27 55.70 14.33 C56.55 14.38 56.40 13.75 56.12 13.73 C55.84 13.71 55.60 14.31 56.45 14.38 C57.30 14.46 57.16 13.82 56.88 13.80 C56.60 13.77 56.35 14.37 57.20 14.46 C58.05 14.54 57.92 13.91 57.64 13.88 C57.36 13.84 57.10 14.44 57.95 14.54 C58.79 14.64 58.68 14.00 58.40 13.97 C58.12 13.93 57.85 14.52 58.69 14.63 C59.54 14.75 59.44 14.11 59.15 14.07 C58.87 14.03 58.60 14.61 59.44 14.74 C60.28 14.86 60.23 14.54 60.23 14.54" fill="none"/></g>
<g fill="green" mcviz:r="P1236_V824_V275" stroke="green" stroke-linecap="round" stroke-width="0.0583706138291" transform="scale(1.000)"><path d="M7.57 11.74 C7.57 11.74 7.53 12.05 7.92 12.05 C8.31 12.05 8.22 11.42 8.09 11.42 C7.96 11.42 7.88 12.05 8.27 12.05 C8.66 12.05 8.62 11.74 8.62 11.74" fill="none"/></g>
<g fill="green" mcviz:r="P1237_V825_V275" stroke="green" stroke-linecap="round" stroke-width="0.0394621785588" transform="scale(1.000)"><path d="M7.46 36.60 C7.46 36.60 7.76 36.71 7.82 35.86 C7.88 35.00 7.24 35.15 7.22 35.43 C7.20 35.72 7.81 35.95 7.87 35.10 C7.93 34.24 7.29 34.39 7.27 34.67 C7.26 34.96 7.87 35.19 7.92 34.34 C7.98 33.48 7.34 33.63 7.33 33.91 C7.31 34.20 7.92 34.43 7.97 33.57 C8.03 32.72 7.40 32.87 7.38 33.15 C7.36 33.44 7.97 33.67 8.02 32.81 C8.08 31.96 7.45 32.11 7.43 32.39 C7.41 32.68 8.02 32.91 8.07 32.05 C8.13 31.20 7.50 31.34 7.48 31.63 C7.46 31.92 8.07 32.15 8.13 31.29 C8.18 30.43 7.55 30.58 7.53 30.87 C7.51 31.15 8.12 31.39 8.18 30.53 C8.23 29.67 7.60 29.82 7.58 30.11 C7.56 30.39 8.17 30.62 8.23 29.77 C8.28 28.91 7.65 29.06 7.63 29.35 C7.61 29.63 8.22 29.86 8.28 29.01 C8.34 28.15 7.70 28.30 7.68 28.58 C7.66 28.87 8.27 29.10 8.33 28.25 C8.39 27.39 7.75 27.54 7.73 27.82 C7.71 28.11 8.32 28.34 8.38 27.48 C8.44 26.63 7.80 26.78 7.78 27.06 C7.76 27.35 8.37 27.58 8.43 26.72 C8.49 25.87 7.85 26.02 7.83 26.30 C7.81 26.59 8.42 26.82 8.48 25.96 C8.54 25.11 7.90 25.25 7.88 25.54 C7.87 25.83 8.47 26.06 8.53 25.20 C8.59 24.34 7.95 24.49 7.93 24.78 C7.92 25.06 8.53 25.30 8.58 24.44 C8.64 23.58 8.00 23.73 7.99 24.02 C7.97 24.30 8.58 24.53 8.63 23.68 C8.69 22.82 8.06 22.97 8.04 23.26 C8.02 23.54 8.63 23.77 8.68 22.92 C8.74 22.06 8.11 22.21 8.09 22.50 C8.07 22.78 8.68 23.01 8.74 22.16 C8.79 21.30 8.16 21.45 8.14 21.73 C8.12 22.02 8.73 22.25 8.79 21.40 C8.84 20.54 8.21 20.69 8.19 20.97 C8.17 21.26 8.78 21.49 8.84 20.63 C8.89 19.78 8.26 19.93 8.24 20.21 C8.22 20.50 8.83 20.73 8.89 19.87 C8.94 19.02 8.31 19.17 8.29 19.45 C8.27 19.74 8.88 19.97 8.94 19.11 C9.00 18.26 8.36 18.40 8.34 18.69 C8.32 18.98 8.93 19.21 8.99 18.35 C9.05 17.49 8.41 17.64 8.39 17.93 C8.37 18.21 8.98 18.45 9.04 17.59 C9.10 16.73 8.46 16.88 8.44 17.17 C8.42 17.45 9.03 17.68 9.09 16.83 C9.15 15.97 8.51 16.12 8.49 16.41 C8.47 16.69 9.08 16.92 9.14 16.07 C9.20 15.21 8.56 15.36 8.54 15.65 C8.53 15.93 9.14 16.16 9.19 15.31 C9.25 14.45 8.61 14.60 8.60 14.88 C8.58 15.17 9.19 15.40 9.24 14.54 C9.30 13.69 8.67 13.84 8.65 14.12 C8.63 14.41 9.24 14.64 9.29 13.78 C9.35 12.93 8.72 13.08 8.70 13.36 C8.68 13.65 9.29 13.88 9.34 13.02 C9.40 12.17 9.08 12.24 9.08 12.24" fill="none"/></g>
<g fill="green" mcviz:r="P285_V3_V278" stroke="green" stroke-linecap="round" stroke-width="0.10590794838" transform="scale(1.000)"><path d="M9.25 9.88 C9.25 9.88 9.41 10.08 9.82 9.30 C10.23 8.52 9.67 8.40 9.50 8.64 C9.32 8.88 9.57 9.35 10.22 8.76 C10.86 8.16 10.46 7.90 10.20 8.03 C9.93 8.15 9.83 8.56 10.71 8.53 C11.59 8.51 11.39 7.91 11.09 7.91 C10.80 7.91 10.61 8.53 11.48 8.53 C12.36 8.53 12.17 7.91 11.87 7.91 C11.58 7.91 11.39 8.53 12.26 8.53 C13.14 8.53 12.95 7.91 12.65 7.91 C12.36 7.91 12.17 8.53 13.04 8.53 C13.92 8.53 13.73 7.91 13.43 7.91 C13.14 7.91 12.95 8.53 13.83 8.53 C14.70 8.53 14.51 7.91 14.22 7.91 C13.92 7.91 13.73 8.53 14.61 8.53 C15.48 8.53 15.29 7.91 15.00 7.91 C14.70 7.91 14.51 8.53 15.39 8.53 C16.26 8.53 16.07 7.91 15.78 7.91 C15.48 7.91 15.29 8.53 16.17 8.53 C17.04 8.53 16.85 7.91 16.56 7.91 C16.26 7.91 16.07 8.53 16.95 8.53 C17.82 8.53 17.63 7.91 17.34 7.91 C17.04 7.91 16.85 8.53 17.73 8.53 C18.60 8.53 18.41 7.91 18.12 7.91 C17.82 7.91 17.63 8.53 18.51 8.53 C19.39 8.53 19.19 7.91 18.90 7.91 C18.61 7.91 18.41 8.53 19.29 8.53 C20.17 8.53 19.97 7.91 19.68 7.91 C19.39 7.91 19.19 8.53 20.07 8.53 C20.95 8.53 20.75 7.91 20.46 7.91 C20.17 7.91 19.97 8.53 20.85 8.53 C21.73 8.53 21.53 7.91 21.24 7.91 C20.95 7.91 20.75 8.53 21.63 8.53 C22.51 8.53 22.31 7.91 22.02 7.91 C21.73 7.91 21.53 8.53 22.41 8.53 C23.29 8.53 23.09 7.91 22.80 7.91 C22.51 7.91 22.31 8.53 23.19 8.53 C24.07 8.53 23.87 7.91 23.58 7.91 C23.29 7.91 23.09 8.53 23.97 8.53 C24.85 8.53 24.65 7.91 24.36 7.91 C24.07 7.91 23.87 8.53 24.75 8.53 C25.63 8.53 25.44 7.91 25.14 7.91 C24.85 7.91 24.65 8.53 25.53 8.53 C26.41 8.53 26.21 7.91 25.92 7.91 C25.63 7.91 25.44 8.53 26.31 8.53 C27.19 8.53 27.00 7.91 26.70 7.91 C26.41 7.91 26.21 8.53 27.09 8.53 C27.97 8.53 27.78 7.91 27.48 7.91 C27.19 7.91 27.00 8.53 27.87 8.53 C28.75 8.53 28.56 7.91 28.26 7.91 C27.97 7.91 27.78 8.53 28.65 8.53 C29.53 8.53 29.34 7.91 29.04 7.91 C28.75 7.91 28.56 8.53 29.44 8.53 C30.31 8.53 30.12 7.91 29.82 7.91 C29.53 7.91 29.34 8.53 30.22 8.53 C31.09 8.53 30.90 7.91 30.61 7.91 C30.31 7.91 30.12 8.53 31.00 8.53 C31.87 8.53 31.68 7.91 31.39 7.91 C31.09 7.91 30.90 8.53 31.78 8.53 C32.65 8.53 32.46 7.91 32.17 7.91 C31.87 7.91 31.68 8.53 32.56 8.53 C33.43 8.53 33.24 7.91 32.95 7.91 C32.66 7.91 32.46 8.53 33.34 8.53 C34.21 8.53 34.02 7.91 33.73 7.91 C33.44 7.91 33.24 8.53 34.12 8.53 C34.99 8.53 34.80 7.91 34.51 7.91 C34.22 7.91 34.02 8.53 34.90 8.53 C35.78 8.53 35.58 7.91 35.29 7.91 C35.00 7.91 34.80 8.53 35.68 8.53 C36.56 8.53 36.36 7.91 36.07 7.91 C35.78 7.91 35.58 8.53 36.46 8.53 C37.34 8.53 37.14 7.91 36.85 7.91 C36.56 7.91 36.36 8.53 37.24 8.53 C38.12 8.53 37.92 7.91 37.63 7.91 C37.34 7.91 37.14 8.53 38.02 8.53 C38.90 8.53 38.70 7.91 38.41 7.91 C38.12 7.91 37.92 8.53 38.80 8.53 C39.68 8.53 39.48 7.91 39.19 7.91 C38.90 7.91 38.70 8.53 39.58 8.53 C40.46 8.53 40.26 7.91 39.97 7.91 C39.68 7.91 39.48 8.53 40.36 8.53 C41.24 8.53 41.04 7.91 40.75 7.91 C40.46 7.91 40.26 8.53 41.14 8.53 C42.02 8.53 41.82 7.91 41.53 7.91 C41.24 7.91 41.04 8.53 41.92 8.53 C42.80 8.53 42.61 7.91 42.31 7.91 C42.02 7.91 41.83 8.54 42.71 8.53 C43.59 8.52 43.38 7.90 43.09 7.90 C42.80 7.91 42.61 8.54 43.49 8.52 C44.37 8.50 44.16 7.88 43.87 7.89 C43.57 7.89 43.40 8.53 44.27 8.50 C45.15 8.47 44.94 7.85 44.64 7.86 C44.35 7.87 44.18 8.51 45.06 8.47 C45.93 8.44 45.71 7.82 45.42 7.83 C45.13 7.84 44.96 8.48 45.84 8.44 C46.72 8.40 46.49 7.78 46.20 7.80 C45.91 7.81 45.74 8.45 46.62 8.40 C47.50 8.36 47.38 8.05 47.38 8.05" fill="none"/></g>
<g fill="green" mcviz:r="P1033_V824_V3" stroke="green" stroke-linecap="round" stroke-width="0.0583227831152" transform="scale(1.000)"><path d="M7.54 11.66 C7.54 11.66 7.69 11.94 8.14 11.58 C8.58 11.21 8.09 10.81 7.94 10.93 C7.79 11.05 8.09 11.62 8.53 11.25 C8.98 10.88 8.73 10.68 8.73 10.68" fill="none"/></g>
<g fill="green" mcviz:r="P1034_V825_V4" stroke="green" stroke-linecap="round" stroke-width="0.059473584126" transform="scale(1.000)"><path d="M7.55 36.77 C7.55 36.77 7.34 37.01 7.77 37.27 C8.19 37.54 8.43 36.95 8.29 36.86 C8.14 36.77 7.72 37.24 8.15 37.51 C8.57 37.78 8.69 37.48 8.69 37.48" fill="none"/></g>
<g fill="red" mcviz:r="P325_V278_V428" stroke="red" stroke-linecap="round" stroke-width="0.0639982513406" transform="scale(1.000)"><path d="M47.52 8.04C48.14 8.04 53.18 8.04 53.80 8.04" fill="none"/><path d="M50.90 8.04L50.42 8.19C50.47 8.11 50.47 7.97 50.42 7.90Z" stroke="none"/></g>
<use mcviz:r="P325_V278_V428" x="50.654" y="7.402" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="green" mcviz:r="P532_V7_V478" stroke="green" stroke-linecap="round" stroke-width="0.0290552305789" transform="scale(1.000)"><path d="M37.80 32.41 C37.80 32.41 37.63 32.70 38.47 32.89 C39.30 33.08 39.25 32.42 38.97 32.36 C38.69 32.30 38.38 32.89 39.22 33.05 C40.06 33.21 39.99 32.55 39.71 32.50 C39.43 32.45 39.14 33.05 39.98 33.18 C40.83 33.31 40.73 32.66 40.45 32.62 C40.17 32.58 39.90 33.19 40.75 33.29 C41.60 33.39 41.47 32.73 41.19 32.71 C40.91 32.68 40.67 33.30 41.52 33.36 C42.37 33.41 42.22 32.76 41.93 32.75 C41.65 32.74 41.45 33.38 42.30 33.38 C43.16 33.38 42.97 32.76 42.68 32.76 C42.40 32.76 42.21 33.38 43.06 33.38 C43.92 33.38 43.73 32.76 43.44 32.76 C43.16 32.76 42.97 33.38 43.82 33.38 C44.68 33.38 44.49 32.76 44.20 32.76 C43.92 32.76 43.73 33.38 44.58 33.38 C45.44 33.38 45.25 32.76 44.96 32.76 C44.68 32.76 44.49 33.38 45.34 33.38 C46.20 33.38 46.01 32.76 45.72 32.76 C45.44 32.76 45.25 33.38 46.10 33.38 C46.96 33.38 46.77 32.76 46.48 32.76 C46.20 32.76 46.01 33.38 46.86 33.38 C47.72 33.38 47.53 32.76 47.24 32.76 C46.96 32.76 46.77 33.38 47.62 33.38 C48.48 33.38 48.29 32.76 48.00 32.76 C47.72 32.76 47.53 33.38 48.38 33.38 C49.24 33.38 49.05 32.76 48.76 32.76 C48.48 32.76 48.29 33.38 49.14 33.38 C50.00 33.38 49.81 32.76 49.52 32.76 C49.24 32.76 49.05 33.38 49.91 33.38 C50.76 33.38 50.57 32.76 50.28 32.76 C50.00 32.76 49.81 33.38 50.67 33.38 C51.52 33.38 51.33 32.76 51.05 32.76 C50.76 32.76 50.57 33.38 51.43 33.38 C52.28 33.38 52.09 32.76 51.81 32.76 C51.52 32.76 51.33 33.38 52.19 33.38 C53.04 33.38 52.85 32.76 52.57 32.76 C52.28 32.76 52.09 33.38 52.95 33.38 C53.80 33.38 53.61 32.76 53.33 32.76 C53.04 32.76 52.85 33.38 53.71 33.38 C54.56 33.38 54.38 32.77 54.10 32.76 C53.81 32.75 53.59 33.34 54.44 33.40 C55.30 33.47 55.17 32.85 54.88 32.82 C54.60 32.79 54.33 33.36 55.17 33.49 C56.02 33.62 55.94 32.99 55.66 32.94 C55.37 32.89 55.07 33.44 55.90 33.63 C56.74 33.81 56.69 33.18 56.42 33.11 C56.14 33.04 55.80 33.58 56.62 33.81 C57.45 34.04 57.44 33.40 57.16 33.31 C56.89 33.23 56.53 33.76 57.34 34.02 C58.15 34.29 58.17 33.65 57.90 33.55 C57.63 33.46 57.24 33.97 58.04 34.27 C58.85 34.57 58.89 33.93 58.62 33.82 C58.36 33.72 57.95 34.22 58.74 34.54 C59.53 34.87 59.60 34.23 59.34 34.12 C59.07 34.00 58.65 34.49 59.43 34.84 C60.21 35.20 60.24 34.89 60.24 34.89" fill="none"/></g>
<g fill="green" mcviz:r="P572_V58_V498" stroke="green" stroke-linecap="round" stroke-width="0.0270444928707" transform="scale(1.000)"><path d="M32.34 12.81 C32.34 12.81 32.28 13.11 33.13 13.03 C33.99 12.94 33.75 12.35 33.46 12.37 C33.17 12.40 33.03 13.03 33.89 12.97 C34.75 12.90 34.51 12.29 34.23 12.31 C33.94 12.34 33.80 12.97 34.66 12.91 C35.52 12.84 35.28 12.24 34.99 12.26 C34.71 12.28 34.56 12.91 35.42 12.85 C36.28 12.79 36.05 12.18 35.76 12.20 C35.47 12.22 35.32 12.86 36.19 12.80 C37.05 12.74 36.81 12.13 36.53 12.15 C36.24 12.17 36.09 12.80 36.95 12.75 C37.81 12.69 37.58 12.09 37.29 12.10 C37.01 12.12 36.85 12.75 37.72 12.70 C38.58 12.65 38.35 12.04 38.06 12.06 C37.77 12.07 37.62 12.71 38.48 12.66 C39.34 12.61 39.12 12.00 38.83 12.01 C38.54 12.03 38.38 12.66 39.25 12.61 C40.11 12.57 39.88 11.95 39.60 11.97 C39.31 11.99 39.15 12.62 40.01 12.57 C40.87 12.53 40.65 11.91 40.36 11.93 C40.08 11.94 39.92 12.58 40.78 12.53 C41.64 12.49 41.42 11.88 41.13 11.89 C40.84 11.90 40.68 12.54 41.54 12.50 C42.41 12.45 42.18 11.84 41.90 11.85 C41.61 11.87 41.45 12.50 42.31 12.46 C43.17 12.42 42.95 11.81 42.66 11.82 C42.38 11.83 42.21 12.46 43.08 12.42 C43.94 12.39 43.72 11.77 43.43 11.78 C43.14 11.80 42.98 12.43 43.84 12.39 C44.70 12.36 44.49 11.74 44.20 11.75 C43.91 11.76 43.75 12.40 44.61 12.36 C45.47 12.33 45.25 11.71 44.97 11.72 C44.68 11.73 44.51 12.36 45.37 12.33 C46.24 12.30 46.02 11.68 45.73 11.69 C45.45 11.70 45.28 12.33 46.14 12.30 C47.00 12.27 46.79 11.65 46.50 11.67 C46.21 11.68 46.04 12.31 46.91 12.28 C47.77 12.25 47.56 11.63 47.27 11.64 C46.98 11.65 46.81 12.28 47.67 12.25 C48.54 12.22 48.32 11.60 48.04 11.61 C47.75 11.62 47.58 12.25 48.44 12.22 C49.30 12.20 49.09 11.58 48.80 11.59 C48.52 11.60 48.34 12.23 49.21 12.20 C50.07 12.18 49.86 11.56 49.57 11.57 C49.28 11.57 49.11 12.20 49.97 12.18 C50.84 12.16 50.63 11.54 50.34 11.55 C50.05 11.55 49.88 12.18 50.74 12.16 C51.60 12.14 51.39 11.52 51.11 11.53 C50.82 11.53 50.64 12.16 51.51 12.14 C52.37 12.12 52.16 11.50 51.87 11.51 C51.59 11.51 51.41 12.14 52.27 12.12 C53.14 12.10 52.93 11.48 52.64 11.49 C52.35 11.50 52.18 12.12 53.04 12.11 C53.90 12.09 53.80 11.78 53.80 11.78" fill="none"/></g>
<g fill="green" mcviz:r="P3_V3_V5" stroke="green" stroke-linecap="round" stroke-width="0.01" transform="scale(1.000)"><path d="M9.44 10.75 C9.44 10.75 9.23 10.68 9.40 11.52 C9.57 12.37 10.12 12.07 10.08 11.79 C10.04 11.51 9.40 11.40 9.51 12.26 C9.62 13.11 10.21 12.85 10.18 12.56 C10.15 12.28 9.51 12.15 9.60 13.01 C9.69 13.86 10.28 13.61 10.26 13.33 C10.23 13.04 9.60 12.91 9.67 13.76 C9.74 14.62 10.35 14.38 10.32 14.09 C10.30 13.81 9.67 13.67 9.73 14.52 C9.80 15.38 10.40 15.14 10.38 14.86 C10.36 14.57 9.73 14.43 9.79 15.28 C9.85 16.14 10.46 15.91 10.44 15.62 C10.42 15.34 9.78 15.19 9.84 16.04 C9.89 16.90 10.50 16.67 10.49 16.39 C10.47 16.10 9.83 15.95 9.89 16.81 C9.94 17.67 10.55 17.44 10.53 17.15 C10.51 16.87 9.88 16.71 9.93 17.57 C9.98 18.43 10.59 18.20 10.57 17.92 C10.56 17.63 9.93 17.47 9.97 18.33 C10.02 19.19 10.63 18.97 10.61 18.68 C10.60 18.39 9.97 18.24 10.01 19.09 C10.05 19.95 10.67 19.73 10.65 19.45 C10.64 19.16 10.01 19.00 10.05 19.86 C10.09 20.72 10.70 20.50 10.69 20.21 C10.68 19.92 10.04 19.76 10.08 20.62 C10.12 21.48 10.74 21.26 10.72 20.97 C10.71 20.69 10.08 20.52 10.12 21.38 C10.15 22.24 10.77 22.03 10.76 21.74 C10.74 21.45 10.11 21.29 10.15 22.15 C10.19 23.01 10.80 22.79 10.79 22.50 C10.78 22.22 10.15 22.05 10.18 22.91 C10.22 23.77 10.83 23.55 10.82 23.27 C10.81 22.98 10.18 22.81 10.21 23.67 C10.24 24.53 10.86 24.32 10.85 24.03 C10.84 23.75 10.21 23.58 10.24 24.44 C10.27 25.30 10.89 25.08 10.88 24.80 C10.87 24.51 10.24 24.34 10.27 25.20 C10.30 26.06 10.92 25.85 10.91 25.56 C10.89 25.27 10.27 25.11 10.29 25.96 C10.32 26.82 10.94 26.61 10.93 26.33 C10.92 26.04 10.29 25.87 10.32 26.73 C10.35 27.59 10.97 27.38 10.96 27.09 C10.95 26.80 10.32 26.63 10.35 27.49 C10.37 28.35 10.99 28.14 10.98 27.85 C10.97 27.57 10.34 27.40 10.37 28.26 C10.40 29.12 11.01 28.91 11.01 28.62 C11.00 28.33 10.37 28.16 10.39 29.02 C10.42 29.88 10.73 29.77 10.73 29.77" fill="none"/></g>
<g fill="green" mcviz:r="P4_V4_V5" stroke="green" stroke-linecap="round" stroke-width="0.01" transform="scale(1.000)"><path d="M9.61 37.63 C9.61 37.63 9.92 38.06 10.41 37.48 C10.90 36.91 10.09 36.66 10.02 36.90 C9.95 37.14 10.57 37.45 10.70 36.71 C10.83 35.96 10.16 36.03 10.13 36.28 C10.10 36.53 10.71 36.77 10.79 36.02 C10.87 35.27 10.22 35.37 10.20 35.63 C10.18 35.88 10.79 36.10 10.85 35.34 C10.91 34.59 10.27 34.71 10.25 34.96 C10.24 35.21 10.85 35.42 10.90 34.67 C10.94 33.91 10.31 34.04 10.29 34.30 C10.28 34.55 10.90 34.75 10.93 33.99 C10.97 33.24 10.34 33.38 10.32 33.63 C10.31 33.88 10.93 34.07 10.96 33.32 C10.99 32.56 10.36 32.71 10.35 32.96 C10.34 33.21 10.96 33.40 10.99 32.64 C11.01 31.89 10.38 32.04 10.37 32.29 C10.36 32.54 10.99 32.73 11.00 31.97 C11.02 31.21 10.39 31.37 10.39 31.62 C10.38 31.87 11.00 32.05 11.02 31.30 C11.04 30.54 10.41 30.70 10.40 30.95 C10.40 31.20 11.02 31.38 11.03 30.62 C11.04 29.87 10.73 29.95 10.73 29.95" fill="none"/></g>
<g fill="blue" mcviz:r="P72_V6_V504" stroke="blue" stroke-linecap="round" stroke-width="0.094105232328" transform="scale(1.000)"><path d="M37.38 16.57C38.68 16.54 58.93 16.18 60.23 16.15" fill="none"/><path d="M49.05 16.36L48.57 16.51C48.61 16.44 48.61 16.29 48.56 16.22Z" stroke="none"/></g>
<use mcviz:r="P72_V6_V504" x="47.414" y="15.803" transform="scale(1.000)" xlink:href="#pdg-4" />
<g fill="green" mcviz:r="P1195_V824_V58" stroke="green" stroke-linecap="round" stroke-width="0.0359505256348" transform="scale(1.000)"><path d="M7.52 11.83 C7.52 11.83 7.19 12.06 7.83 12.62 C8.47 13.18 8.74 12.50 8.50 12.35 C8.27 12.20 7.76 12.77 8.56 13.08 C9.35 13.38 9.34 12.58 9.06 12.56 C8.78 12.54 8.56 13.19 9.41 13.19 C10.26 13.19 10.07 12.56 9.79 12.56 C9.51 12.56 9.32 13.19 10.17 13.19 C11.02 13.19 10.83 12.56 10.55 12.56 C10.26 12.56 10.07 13.19 10.92 13.19 C11.78 13.19 11.59 12.56 11.30 12.56 C11.02 12.56 10.83 13.19 11.68 13.19 C12.53 13.19 12.34 12.56 12.06 12.56 C11.77 12.56 11.59 13.19 12.44 13.19 C13.29 13.19 13.10 12.56 12.81 12.56 C12.53 12.56 12.34 13.19 13.19 13.19 C14.04 13.19 13.85 12.56 13.57 12.56 C13.29 12.56 13.10 13.19 13.95 13.19 C14.80 13.19 14.61 12.56 14.33 12.56 C14.04 12.56 13.85 13.19 14.70 13.19 C15.55 13.19 15.37 12.56 15.08 12.56 C14.80 12.56 14.61 13.19 15.46 13.19 C16.31 13.19 16.12 12.56 15.84 12.56 C15.55 12.56 15.37 13.19 16.22 13.19 C17.07 13.19 16.88 12.56 16.59 12.56 C16.31 12.56 16.12 13.19 16.97 13.19 C17.82 13.19 17.63 12.56 17.35 12.56 C17.07 12.56 16.88 13.19 17.73 13.19 C18.58 13.19 18.39 12.56 18.11 12.56 C17.82 12.56 17.63 13.19 18.48 13.19 C19.33 13.19 19.15 12.56 18.86 12.56 C18.58 12.56 18.39 13.19 19.24 13.19 C20.09 13.19 19.90 12.56 19.62 12.56 C19.33 12.56 19.15 13.19 20.00 13.19 C20.85 13.19 20.66 12.56 20.37 12.56 C20.09 12.56 19.90 13.19 20.75 13.19 C21.60 13.19 21.41 12.56 21.13 12.56 C20.85 12.56 20.66 13.19 21.51 13.19 C22.36 13.19 22.17 12.56 21.89 12.56 C21.60 12.56 21.41 13.19 22.26 13.19 C23.11 13.19 22.92 12.56 22.64 12.56 C22.36 12.56 22.17 13.19 23.02 13.19 C23.87 13.19 23.68 12.56 23.40 12.56 C23.11 12.56 22.93 13.19 23.78 13.19 C24.63 13.19 24.44 12.56 24.15 12.56 C23.87 12.56 23.68 13.19 24.53 13.19 C25.38 13.19 25.19 12.56 24.91 12.56 C24.63 12.56 24.44 13.19 25.29 13.19 C26.14 13.19 25.95 12.56 25.67 12.56 C25.38 12.56 25.19 13.19 26.04 13.19 C26.89 13.19 26.71 12.56 26.42 12.56 C26.14 12.56 25.95 13.19 26.80 13.19 C27.65 13.19 27.46 12.56 27.18 12.56 C26.89 12.56 26.71 13.19 27.56 13.19 C28.41 13.19 28.22 12.56 27.93 12.56 C27.65 12.56 27.46 13.19 28.31 13.19 C29.16 13.19 28.97 12.56 28.69 12.56 C28.41 12.56 28.22 13.19 29.07 13.19 C29.92 13.19 29.73 12.56 29.45 12.56 C29.16 12.56 28.97 13.19 29.82 13.19 C30.67 13.19 30.49 12.56 30.20 12.56 C29.92 12.56 29.73 13.19 30.58 13.19 C31.43 13.19 31.34 12.88 31.34 12.88" fill="none"/></g>
<g fill="red" mcviz:r="P489_V428_V587" stroke="red" stroke-linecap="round" stroke-width="0.0407273049931" transform="scale(1.000)"><path d="M53.93 8.05 C54.19 8.09 55.24 8.22 56.10 8.26 C57.78 8.35 59.85 8.29 60.23 8.28" fill="none"/><path d="M57.32 8.30L56.83 8.44C56.88 8.37 56.89 8.22 56.84 8.15Z" stroke="none"/></g>
<use mcviz:r="P489_V428_V587" x="57.084" y="7.624" transform="scale(1.000)" xlink:href="#pdg2" />
<g fill="green" mcviz:r="P68_V58_V6" stroke="green" stroke-linecap="round" stroke-width="0.01" transform="scale(1.000)"><path d="M32.03 13.34 C32.03 13.34 31.70 13.43 32.06 14.07 C32.42 14.70 32.89 14.23 32.76 14.02 C32.63 13.82 32.00 14.05 32.43 14.64 C32.85 15.23 33.27 14.70 33.12 14.51 C32.96 14.33 32.36 14.66 32.87 15.17 C33.39 15.69 33.72 15.08 33.53 14.92 C33.34 14.77 32.82 15.21 33.42 15.62 C34.02 16.03 34.23 15.38 34.03 15.26 C33.82 15.14 33.36 15.63 34.01 15.96 C34.66 16.29 34.79 15.64 34.57 15.54 C34.35 15.44 33.95 15.97 34.63 16.24 C35.31 16.50 35.38 15.85 35.15 15.77 C34.92 15.69 34.57 16.24 35.26 16.46 C35.96 16.67 35.98 16.01 35.75 15.95 C35.51 15.89 35.20 16.46 35.90 16.64 C36.61 16.81 36.60 16.15 36.36 16.10 C36.12 16.05 35.84 16.64 36.55 16.77 C37.27 16.90 37.25 16.56 37.25 16.56" fill="none"/></g>
<g fill="green" mcviz:r="P722_V58_V667" stroke="green" stroke-linecap="round" stroke-width="0.0665721437974" transform="scale(1.000)"><path d="M32.32 12.72 C32.32 12.72 32.30 13.03 33.13 12.81 C33.95 12.59 33.62 12.05 33.34 12.12 C33.07 12.18 33.02 12.83 33.85 12.64 C34.68 12.45 34.36 11.89 34.08 11.95 C33.81 12.01 33.75 12.65 34.59 12.48 C35.42 12.30 35.11 11.73 34.83 11.79 C34.55 11.85 34.49 12.49 35.32 12.32 C36.16 12.16 35.85 11.59 35.57 11.64 C35.30 11.69 35.22 12.34 36.06 12.18 C36.90 12.03 36.60 11.45 36.32 11.50 C36.04 11.55 35.96 12.19 36.80 12.05 C37.64 11.91 37.35 11.33 37.07 11.37 C36.79 11.42 36.70 12.06 37.54 11.93 C38.39 11.80 38.10 11.21 37.82 11.26 C37.54 11.30 37.45 11.94 38.29 11.82 C39.13 11.70 38.86 11.11 38.58 11.15 C38.30 11.19 38.19 11.83 39.04 11.72 C39.88 11.60 39.61 11.01 39.33 11.05 C39.05 11.08 38.94 11.72 39.78 11.62 C40.63 11.51 40.36 10.92 40.08 10.95 C39.80 10.99 39.69 11.63 40.53 11.52 C41.38 11.42 41.11 10.82 40.83 10.86 C40.55 10.89 40.44 11.54 41.28 11.43 C42.13 11.33 41.86 10.73 41.58 10.76 C41.30 10.80 41.19 11.45 42.04 11.33 C42.88 11.22 42.61 10.63 42.33 10.66 C42.05 10.70 41.95 11.35 42.79 11.23 C43.63 11.11 43.35 10.51 43.07 10.56 C42.79 10.60 42.70 11.25 43.54 11.11 C44.38 10.97 44.09 10.38 43.81 10.43 C43.53 10.48 43.46 11.14 44.30 10.98 C45.13 10.82 44.82 10.23 44.55 10.29 C44.27 10.35 44.22 11.01 45.05 10.82 C45.88 10.64 45.55 10.07 45.28 10.13 C45.00 10.20 44.97 10.85 45.79 10.65 C46.62 10.44 46.27 9.87 46.00 9.95 C45.73 10.02 45.71 10.68 46.53 10.45 C47.35 10.21 46.99 9.66 46.72 9.74 C46.45 9.82 46.45 10.48 47.27 10.23 C48.08 9.97 47.70 9.43 47.43 9.52 C47.16 9.61 47.19 10.27 47.99 9.98 C48.79 9.70 48.40 9.17 48.14 9.27 C47.87 9.37 47.91 10.02 48.71 9.72 C49.51 9.42 49.10 8.90 48.84 9.00 C48.57 9.11 48.63 9.76 49.42 9.44 C50.21 9.12 49.79 8.61 49.53 8.72 C49.27 8.83 49.34 9.48 50.12 9.15 C50.91 8.81 50.48 8.31 50.22 8.42 C49.96 8.54 50.05 9.19 50.82 8.83 C51.59 8.48 51.16 7.99 50.90 8.11 C50.64 8.23 50.74 8.88 51.51 8.51 C52.28 8.14 51.83 7.66 51.57 7.78 C51.32 7.91 51.48 8.58 52.21 8.15 C52.94 7.71 52.42 7.26 52.19 7.42 C51.95 7.57 52.18 8.21 52.86 7.71 C53.54 7.20 53.00 6.80 52.78 6.98 C52.56 7.16 52.82 7.77 53.47 7.22 C54.11 6.67 53.82 6.47 53.82 6.47" fill="none"/></g>
<g fill="green" mcviz:r="P733_V226_V687" stroke="green" stroke-linecap="round" stroke-width="0.058323809115" transform="scale(1.000)"><path d="M54.37 24.30 C54.37 24.30 54.26 24.60 54.99 24.67 C55.72 24.74 55.62 24.10 55.37 24.08 C55.13 24.05 54.91 24.66 55.64 24.73 C56.38 24.80 56.27 24.16 56.03 24.14 C55.78 24.11 55.56 24.72 56.29 24.79 C57.03 24.86 56.92 24.22 56.68 24.20 C56.43 24.18 56.21 24.78 56.95 24.85 C57.68 24.92 57.57 24.28 57.33 24.26 C57.09 24.24 56.87 24.84 57.60 24.91 C58.33 24.98 58.23 24.34 57.98 24.32 C57.74 24.30 57.52 24.90 58.25 24.97 C58.98 25.04 58.88 24.40 58.63 24.38 C58.39 24.36 58.17 24.96 58.90 25.03 C59.64 25.10 59.53 24.46 59.29 24.44 C59.04 24.42 58.82 25.02 59.56 25.09 C60.29 25.16 60.24 24.84 60.24 24.84" fill="none"/></g>
<g fill="blue" mcviz:r="P326_V278_V691" stroke="blue" stroke-linecap="round" stroke-width="0.096813548388" transform="scale(1.000)"><path d="M47.48 7.99 C47.67 7.71 48.59 6.37 49.67 5.65 C53.47 3.16 59.53 3.40 60.23 3.44" fill="none"/><path d="M53.44 4.08L53.01 4.34C53.04 4.26 53.01 4.12 52.94 4.07Z" stroke="none"/></g>
<use mcviz:r="P326_V278_V691" x="53.831" y="3.220" transform="scale(1.000)" xlink:href="#pdg-2" />
<g fill="green" mcviz:r="P1196_V825_V7" stroke="green" stroke-linecap="round" stroke-width="0.0729174059477" transform="scale(1.000)"><path d="M7.49 36.60 C7.49 36.60 7.65 36.81 8.09 36.07 C8.54 35.32 7.97 35.17 7.79 35.40 C7.62 35.63 7.88 36.12 8.51 35.53 C9.14 34.93 8.71 34.66 8.45 34.80 C8.20 34.94 8.16 35.38 9.02 35.25 C9.87 35.12 9.64 34.62 9.35 34.62 C9.06 34.62 8.87 35.24 9.74 35.24 C10.61 35.24 10.41 34.62 10.12 34.62 C9.84 34.62 9.64 35.24 10.51 35.24 C11.38 35.24 11.19 34.62 10.90 34.62 C10.61 34.62 10.41 35.24 11.28 35.24 C12.15 35.24 11.96 34.62 11.67 34.62 C11.38 34.62 11.19 35.24 12.06 35.24 C12.92 35.24 12.73 34.62 12.44 34.62 C12.15 34.62 11.96 35.24 12.83 35.24 C13.70 35.24 13.50 34.62 13.21 34.62 C12.92 34.62 12.73 35.24 13.60 35.24 C14.47 35.24 14.28 34.62 13.99 34.62 C13.70 34.62 13.50 35.24 14.37 35.24 C15.24 35.24 15.05 34.62 14.76 34.62 C14.47 34.62 14.28 35.24 15.14 35.24 C16.01 35.24 15.82 34.62 15.53 34.62 C15.24 34.62 15.05 35.24 15.92 35.24 C16.79 35.24 16.59 34.62 16.30 34.62 C16.01 34.62 15.82 35.24 16.69 35.24 C17.56 35.24 17.36 34.62 17.07 34.62 C16.78 34.62 16.59 35.24 17.46 35.24 C18.33 35.24 18.14 34.62 17.85 34.62 C17.56 34.62 17.36 35.24 18.23 35.24 C19.10 35.24 18.91 34.62 18.62 34.62 C18.33 34.62 18.14 35.24 19.01 35.24 C19.87 35.24 19.68 34.62 19.39 34.62 C19.10 34.62 18.91 35.24 19.78 35.24 C20.65 35.24 20.45 34.62 20.16 34.62 C19.87 34.62 19.68 35.24 20.55 35.24 C21.42 35.24 21.22 34.62 20.94 34.62 C20.65 34.62 20.45 35.24 21.32 35.24 C22.19 35.24 22.00 34.62 21.71 34.62 C21.42 34.62 21.23 35.24 22.09 35.24 C22.96 35.24 22.77 34.62 22.48 34.62 C22.19 34.62 22.00 35.24 22.87 35.24 C23.73 35.24 23.54 34.62 23.25 34.62 C22.96 34.62 22.77 35.24 23.64 35.24 C24.51 35.24 24.31 34.62 24.02 34.62 C23.74 34.62 23.54 35.24 24.41 35.24 C25.28 35.24 25.09 34.62 24.80 34.62 C24.51 34.62 24.31 35.24 25.18 35.24 C26.05 35.24 25.86 34.62 25.57 34.62 C25.28 34.62 25.09 35.24 25.95 35.24 C26.82 35.24 26.63 34.62 26.34 34.62 C26.05 34.62 25.86 35.24 26.73 35.24 C27.60 35.24 27.40 34.62 27.11 34.62 C26.82 34.62 26.63 35.24 27.50 35.24 C28.37 35.24 28.18 34.62 27.89 34.62 C27.60 34.62 27.40 35.24 28.27 35.24 C29.14 35.24 28.95 34.62 28.66 34.62 C28.37 34.62 28.17 35.24 29.04 35.24 C29.91 35.24 29.72 34.62 29.43 34.62 C29.14 34.62 28.95 35.24 29.82 35.24 C30.69 35.24 30.49 34.62 30.20 34.62 C29.91 34.62 29.72 35.24 30.59 35.24 C31.46 35.24 31.26 34.62 30.97 34.62 C30.68 34.62 30.49 35.24 31.36 35.24 C32.23 35.24 32.04 34.62 31.75 34.62 C31.46 34.62 31.29 35.29 32.15 35.23 C33.02 35.17 32.76 34.53 32.47 34.57 C32.18 34.61 32.12 35.30 32.97 35.11 C33.81 34.92 33.46 34.33 33.18 34.41 C32.90 34.49 32.92 35.18 33.74 34.88 C34.56 34.59 34.15 34.05 33.88 34.16 C33.61 34.27 33.70 34.95 34.48 34.58 C35.27 34.21 34.81 33.71 34.55 33.85 C34.30 33.98 34.43 34.64 35.19 34.21 C35.95 33.78 35.45 33.33 35.21 33.48 C34.96 33.63 35.14 34.27 35.87 33.80 C36.59 33.32 36.07 32.90 35.83 33.06 C35.60 33.23 35.82 33.86 36.51 33.34 C37.21 32.82 36.93 32.61 36.93 32.61" fill="none"/></g>
<g fill="green" mcviz:r="P811_V4_V711" stroke="green" stroke-linecap="round" stroke-width="0.0229937688333" transform="scale(1.000)"><path d="M9.27 38.23 C9.27 38.23 8.93 38.31 9.22 38.91 C9.51 39.50 10.02 39.07 9.91 38.88 C9.80 38.69 9.16 38.90 9.53 39.46 C9.89 40.01 10.34 39.51 10.21 39.33 C10.07 39.16 9.47 39.49 9.93 39.97 C10.40 40.44 10.67 40.03 10.67 40.03" fill="none"/></g>
<g fill="blue" mcviz:r="P592_V498_V723" stroke="blue" stroke-linecap="round" stroke-width="0.0406150327143" transform="scale(1.000)"><path d="M53.93 11.78C54.56 11.78 59.61 11.78 60.23 11.78" fill="none"/><path d="M57.32 11.78L56.84 11.92C56.89 11.85 56.89 11.71 56.84 11.63Z" stroke="none"/></g>
<use mcviz:r="P592_V498_V723" x="57.053" y="11.206" transform="scale(1.000)" xlink:href="#pdg-2" />
<g fill="green" mcviz:r="P881_V58_V798" stroke="green" stroke-linecap="round" stroke-width="0.0432649692216" transform="scale(1.000)"><path d="M32.34 12.88 C32.34 12.88 32.24 13.19 33.12 13.19 C33.99 13.20 33.80 12.57 33.51 12.57 C33.21 12.57 33.02 13.19 33.89 13.19 C34.76 13.20 34.57 12.57 34.28 12.57 C33.99 12.57 33.79 13.19 34.67 13.20 C35.54 13.20 35.35 12.57 35.05 12.57 C34.76 12.57 34.57 13.20 35.44 13.20 C36.31 13.20 36.12 12.58 35.83 12.58 C35.54 12.58 35.34 13.20 36.22 13.20 C37.09 13.20 36.89 12.58 36.60 12.58 C36.31 12.58 36.12 13.20 36.99 13.20 C37.86 13.20 37.67 12.58 37.38 12.58 C37.09 12.58 36.89 13.20 37.77 13.20 C38.64 13.20 38.44 12.58 38.15 12.58 C37.86 12.58 37.67 13.20 38.54 13.20 C39.41 13.20 39.22 12.58 38.93 12.58 C38.64 12.58 38.44 13.20 39.31 13.20 C40.19 13.20 39.99 12.58 39.70 12.58 C39.41 12.58 39.22 13.20 40.09 13.20 C40.96 13.20 40.77 12.58 40.48 12.58 C40.19 12.58 39.99 13.20 40.86 13.20 C41.74 13.20 41.54 12.58 41.25 12.58 C40.96 12.58 40.77 13.20 41.64 13.20 C42.51 13.20 42.32 12.58 42.03 12.58 C41.74 12.58 41.54 13.20 42.41 13.20 C43.29 13.20 43.09 12.58 42.80 12.58 C42.51 12.58 42.32 13.20 43.19 13.20 C44.06 13.20 43.87 12.58 43.58 12.58 C43.29 12.58 43.09 13.20 43.96 13.20 C44.84 13.20 44.64 12.58 44.35 12.58 C44.06 12.58 43.87 13.20 44.74 13.20 C45.61 13.20 45.42 12.58 45.13 12.58 C44.84 12.58 44.64 13.20 45.51 13.20 C46.38 13.20 46.19 12.58 45.90 12.58 C45.61 12.58 45.42 13.20 46.29 13.20 C47.16 13.20 46.97 12.58 46.68 12.58 C46.38 12.58 46.19 13.20 47.06 13.20 C47.93 13.20 47.74 12.58 47.45 12.58 C47.16 12.58 46.97 13.20 47.84 13.20 C48.71 13.20 48.52 12.58 48.23 12.58 C47.93 12.58 47.74 13.20 48.61 13.20 C49.48 13.20 49.29 12.58 49.00 12.58 C48.71 12.58 48.52 13.20 49.39 13.20 C50.26 13.20 50.07 12.58 49.77 12.58 C49.48 12.58 49.29 13.20 50.16 13.20 C51.03 13.20 50.84 12.58 50.55 12.58 C50.26 12.58 50.06 13.20 50.94 13.20 C51.81 13.20 51.61 12.58 51.32 12.58 C51.03 12.58 50.84 13.20 51.71 13.20 C52.58 13.20 52.39 12.58 52.10 12.58 C51.81 12.58 51.61 13.20 52.49 13.20 C53.36 13.20 53.16 12.58 52.87 12.58 C52.58 12.58 52.39 13.20 53.26 13.20 C54.13 13.20 53.94 12.58 53.65 12.58 C53.36 12.58 53.16 13.20 54.04 13.20 C54.91 13.20 54.71 12.58 54.42 12.58 C54.13 12.58 53.94 13.20 54.81 13.20 C55.68 13.20 55.49 12.58 55.20 12.58 C54.91 12.58 54.71 13.20 55.59 13.20 C56.46 13.20 56.26 12.58 55.97 12.58 C55.68 12.58 55.49 13.20 56.36 13.20 C57.23 13.20 57.04 12.58 56.75 12.58 C56.46 12.58 56.26 13.20 57.14 13.20 C58.01 13.20 57.81 12.58 57.52 12.58 C57.23 12.58 57.04 13.20 57.91 13.20 C58.78 13.20 58.59 12.58 58.30 12.58 C58.01 12.58 57.81 13.20 58.69 13.20 C59.56 13.20 59.36 12.58 59.07 12.58 C58.78 12.58 58.59 13.20 59.46 13.20 C60.33 13.20 60.23 12.89 60.23 12.89" fill="none"/></g>
<g fill="red" mcviz:r="P7_V6_V8" stroke="red" stroke-linecap="round" stroke-width="0.01" transform="scale(1.000)"><path d="M37.37 16.60 C37.72 16.83 39.73 18.19 40.80 19.78 C41.71 21.14 42.14 23.15 42.23 23.59" fill="none"/><path d="M40.77 19.72L40.37 19.42C40.45 19.42 40.57 19.33 40.60 19.25Z" stroke="none"/></g>
<use mcviz:r="P7_V6_V8" x="39.961" y="17.431" transform="scale(1.000)" xlink:href="#pdg4" />
<g fill="green" mcviz:r="P8_V7_V8" stroke="green" stroke-linecap="round" stroke-width="0.01" transform="scale(1.000)"><path d="M37.56 31.84 C37.56 31.84 37.79 32.07 38.19 31.37 C38.59 30.67 37.96 30.52 37.83 30.75 C37.69 30.99 38.15 31.45 38.55 30.75 C38.95 30.05 38.32 29.90 38.19 30.13 C38.05 30.36 38.50 30.83 38.90 30.13 C39.31 29.43 38.68 29.27 38.54 29.51 C38.41 29.74 38.86 30.21 39.26 29.51 C39.66 28.81 39.03 28.65 38.90 28.89 C38.76 29.12 39.22 29.58 39.62 28.88 C40.02 28.18 39.39 28.03 39.26 28.26 C39.12 28.50 39.57 28.96 39.97 28.26 C40.38 27.56 39.75 27.41 39.61 27.64 C39.48 27.87 39.93 28.34 40.33 27.64 C40.73 26.94 40.10 26.79 39.97 27.02 C39.84 27.25 40.29 27.72 40.69 27.02 C41.09 26.32 40.46 26.16 40.33 26.40 C40.19 26.63 40.64 27.10 41.05 26.40 C41.45 25.70 40.82 25.54 40.68 25.77 C40.55 26.01 41.00 26.47 41.40 25.77 C41.80 25.07 41.17 24.92 41.04 25.15 C40.91 25.39 41.36 25.85 41.76 25.15 C42.16 24.45 41.53 24.30 41.40 24.53 C41.26 24.76 41.71 25.23 42.12 24.53 C42.52 23.83 42.20 23.75 42.20 23.75" fill="none"/></g>
<g fill="black" mcviz:r="P1_V1_V824" stroke="black" stroke-linecap="round" stroke-width="0.01" transform="scale(1.000)"><path d="M1.23 11.74C2.65 11.74 6.21 11.74 6.95 11.74" fill="none"/><path d="M7.33 11.74L6.85 11.88C6.90 11.81 6.90 11.66 6.85 11.59Z" stroke="none"/></g>
<use mcviz:r="P1_V1_V824" x="4.329" y="11.187" transform="scale(1.000)" xlink:href="#pdg2212" />
<g fill="black" mcviz:r="P2_V2_V825" stroke="black" stroke-linecap="round" stroke-width="0.01" transform="scale(1.000)"><path d="M1.23 36.71C2.65 36.71 6.21 36.71 6.95 36.71" fill="none"/><path d="M7.33 36.71L6.85 36.85C6.90 36.78 6.90 36.64 6.85 36.56Z" stroke="none"/></g>
<use mcviz:r="P2_V2_V825" x="4.329" y="36.159" transform="scale(1.000)" xlink:href="#pdg2212" />
<ellipse cx="9.12" cy="10.36" fill="#22bb44" mcviz:r="V3" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="9.12" cy="37.75" fill="#22bb44" mcviz:r="V4" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="37.31" cy="16.57" fill="none" mcviz:r="V6" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="37.31" cy="32.28" fill="#22bb44" mcviz:r="V7" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="13.99" cy="22.03" fill="none" mcviz:r="V24" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="31.84" cy="12.88" fill="#22bb44" mcviz:r="V58" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="47.45" cy="24.25" fill="none" mcviz:r="V175" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="53.87" cy="36.57" fill="none" mcviz:r="V205" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="53.87" cy="24.25" fill="#22bb44" mcviz:r="V226" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="14.56" fill="none" mcviz:r="V269" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="47.45" cy="8.04" fill="none" mcviz:r="V278" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="53.87" cy="8.04" fill="none" mcviz:r="V428" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="34.92" fill="none" mcviz:r="V478" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="53.87" cy="11.78" fill="none" mcviz:r="V498" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="16.15" fill="none" mcviz:r="V504" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="8.28" fill="none" mcviz:r="V587" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="53.87" cy="6.43" fill="none" mcviz:r="V667" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="24.85" fill="none" mcviz:r="V687" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="3.45" fill="none" mcviz:r="V691" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="10.73" cy="40.04" fill="none" mcviz:r="V711" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="11.78" fill="none" mcviz:r="V723" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="12.89" fill="none" mcviz:r="V798" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="7.45" cy="11.74" fill="none" mcviz:r="V824" rx="0.12" ry="0.12" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="7.45" cy="36.71" fill="none" mcviz:r="V825" rx="0.12" ry="0.12" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="17.24" cy="22.03" fill="none" mcviz:r="V1039" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="36.57" fill="none" mcviz:r="V1040" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="21.42" cy="22.85" fill="none" mcviz:r="V1041" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="25.20" cy="25.14" fill="none" mcviz:r="V1042" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="31.84" cy="27.04" fill="none" mcviz:r="V1044" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="42.24" cy="28.04" fill="#22bb44" mcviz:r="V1052" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="37.31" cy="27.04" fill="none" mcviz:r="V1056" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="47.45" cy="29.10" fill="none" mcviz:r="V1068" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="24.49" fill="none" mcviz:r="V1070" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="28.26" fill="none" mcviz:r="V1086" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="32.82" fill="none" mcviz:r="V1092" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="13.99" cy="38.96" fill="none" mcviz:r="V1107" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="53.87" cy="31.29" fill="none" mcviz:r="V1116" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="31.57" fill="none" mcviz:r="V1117" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="53.87" cy="27.71" fill="none" mcviz:r="V1119" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="60.30" cy="6.43" fill="none" mcviz:r="V1123" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="90.24" cy="31.32" fill="none" mcviz:r="V1447" rx="0.08" ry="0.08" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="95.88" cy="29.82" fill="none" mcviz:r="V1575" rx="0.06" ry="0.06" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="0.73" cy="11.74" fill="cyan" mcviz:r="V1" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="0.73" cy="36.71" fill="cyan" mcviz:r="V2" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="10.73" cy="29.86" fill="none" mcviz:r="V5" rx="0.08" ry="0.08" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="42.24" cy="23.68" fill="none" mcviz:r="V8" rx="0.08" ry="0.08" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="9.12" cy="11.74" fill="#22bb44" mcviz:r="V275" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="21.39" fill="none" mcviz:r="V1126" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="15.01" fill="none" mcviz:r="V1130" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="34.32" fill="none" mcviz:r="V1135" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="22.89" fill="none" mcviz:r="V1139" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="29.21" fill="none" mcviz:r="V1146" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="41.51" fill="none" mcviz:r="V1153" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="36.90" fill="none" mcviz:r="V1156" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="4.74" fill="none" mcviz:r="V1166" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="25.79" fill="none" mcviz:r="V1183" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="1.89" fill="none" mcviz:r="V1197" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="19.89" fill="none" mcviz:r="V1231" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="38.90" fill="none" mcviz:r="V1257" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
<ellipse cx="75.47" cy="10.17" fill="none" mcviz:r="V1349" rx="0.50" ry="0.50" stroke="black" stroke-width="0.05" transform="scale(1.000)"/>
</g>
<script type="text/javascript"><![CDATA[
/*!
 * jQuery JavaScript Library v1.3.2
 * http://jquery.com/
 *
 * Copyright (c) 2009 John Resig
 * Dual licensed under the MIT and GPL licenses.
 * http://docs.jquery.com/License
 *
 * Date: 2009-02-19 17:34:21 -0500 (Thu, 19 Feb 2009)
 * Revision: 6246
 */
(function(){

var 
	// Will speed up references to window, and allows munging its name.
	window = this,
	// Will speed up references to undefined, and allows munging its name.
	undefined,
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,
	// Map over the $ in case of overwrite
	_$ = window.$,

	jQuery = window.jQuery = window.$ = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context );
	},

	// A simple way to check for HTML strings or ID strings
	// (both of which we optimize for)
	quickExpr = /^[^<]*(<(.|\s)+>)[^>]*$|^#([\w-]+)$/,
	// Is it a simple selector
	isSimple = /^.[^:#\[\.,]*$/;

jQuery.fn = jQuery.prototype = {
	init: function( selector, context ) {
		// Make sure that a selection was provided
		selector = selector || document;

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this[0] = selector;
			this.length = 1;
			this.context = selector;
			return this;
		}
		// Handle HTML strings
		if ( typeof selector === "string" ) {
			// Are we dealing with HTML string or an ID?
			var match = quickExpr.exec( selector );

			// Verify a match, and that no context was specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] )
					selector = jQuery.clean( [ match[1] ], context );

				// HANDLE: $("#id")
				else {
					var elem = document.getElementById( match[3] );

					// Handle the case where IE and Opera return items
					// by name instead of ID
					if ( elem && elem.id != match[3] )
						return jQuery().find( selector );

					// Otherwise, we inject the element directly into the jQuery object
					var ret = jQuery( elem || [] );
					ret.context = document;
					ret.selector = selector;
					return ret;
				}

			// HANDLE: $(expr, [context])
			// (which is just equivalent to: $(content).find(expr)
			} else
				return jQuery( context ).find( selector );

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) )
			return jQuery( document ).ready( selector );

		// Make sure that old selector state is passed along
		if ( selector.selector && selector.context ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return this.setArray(jQuery.isArray( selector ) ?
			selector :
			jQuery.makeArray(selector));
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.3.2",

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num === undefined ?

			// Return a 'clean' array
			Array.prototype.slice.call( this ) :

			// Return just the object
			this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {
		// Build a new jQuery matched element set
		var ret = jQuery( elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" )
			ret.selector = this.selector + (this.selector ? " " : "") + selector;
		else if ( name )
			ret.selector = this.selector + "." + name + "(" + selector + ")";

		// Return the newly-formed element set
		return ret;
	},

	// Force the current matched set of elements to become
	// the specified array of elements (destroying the stack in the process)
	// You should use pushStack() in order to do this, but maintain the stack
	setArray: function( elems ) {
		// Resetting the length to 0, then using the native Array push
		// is a super-fast way to populate an object with array-like properties
		this.length = 0;
		Array.prototype.push.apply( this, elems );

		return this;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {
		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem && elem.jquery ? elem[0] : elem
		, this );
	},

	attr: function( name, value, type ) {
		var options = name;

		// Look for the case where we're accessing a style value
		if ( typeof name === "string" )
			if ( value === undefined )
				return this[0] && jQuery[ type || "attr" ]( this[0], name );

			else {
				options = {};
				options[ name ] = value;
			}

		// Check to see if we're setting style values
		return this.each(function(i){
			// Set all the styles
			for ( name in options )
				jQuery.attr(
					type ?
						this.style :
						this,
					name, jQuery.prop( this, options[ name ], type, i, name )
				);
		});
	},

	css: function( key, value ) {
		// ignore negative width and height values
		if ( (key == 'width' || key == 'height') && parseFloat(value) < 0 )
			value = undefined;
		return this.attr( key, value, "curCSS" );
	},

	text: function( text ) {
		if ( typeof text !== "object" && text != null )
			return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );

		var ret = "";

		jQuery.each( text || this, function(){
			jQuery.each( this.childNodes, function(){
				if ( this.nodeType != 8 )
					ret += this.nodeType != 1 ?
						this.nodeValue :
						jQuery.fn.text( [ this ] );
			});
		});

		return ret;
	},

	wrapAll: function( html ) {
		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).clone();

			if ( this[0].parentNode )
				wrap.insertBefore( this[0] );

			wrap.map(function(){
				var elem = this;

				while ( elem.firstChild )
					elem = elem.firstChild;

				return elem;
			}).append(this);
		}

		return this;
	},

	wrapInner: function( html ) {
		return this.each(function(){
			jQuery( this ).contents().wrapAll( html );
		});
	},

	wrap: function( html ) {
		return this.each(function(){
			jQuery( this ).wrapAll( html );
		});
	},

	append: function() {
		return this.domManip(arguments, true, function(elem){
			if (this.nodeType == 1)
				this.appendChild( elem );
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function(elem){
			if (this.nodeType == 1)
				this.insertBefore( elem, this.firstChild );
		});
	},

	before: function() {
		return this.domManip(arguments, false, function(elem){
			this.parentNode.insertBefore( elem, this );
		});
	},

	after: function() {
		return this.domManip(arguments, false, function(elem){
			this.parentNode.insertBefore( elem, this.nextSibling );
		});
	},

	end: function() {
		return this.prevObject || jQuery( [] );
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: [].push,
	sort: [].sort,
	splice: [].splice,

	find: function( selector ) {
		if ( this.length === 1 ) {
			var ret = this.pushStack( [], "find", selector );
			ret.length = 0;
			jQuery.find( selector, this[0], ret );
			return ret;
		} else {
			return this.pushStack( jQuery.unique(jQuery.map(this, function(elem){
				return jQuery.find( selector, elem );
			})), "find", selector );
		}
	},

	clone: function( events ) {
		// Do the clone
		var ret = this.map(function(){
			if ( !jQuery.support.noCloneEvent && !jQuery.isXMLDoc(this) ) {
				// IE copies events bound via attachEvent when
				// using cloneNode. Calling detachEvent on the
				// clone will also remove the events from the orignal
				// In order to get around this, we use innerHTML.
				// Unfortunately, this means some modifications to
				// attributes in IE that are actually only stored
				// as properties will not be copied (such as the
				// the name attribute on an input).
				var html = this.outerHTML;
				if ( !html ) {
					var div = this.ownerDocument.createElement("div");
					div.appendChild( this.cloneNode(true) );
					html = div.innerHTML;
				}

				return jQuery.clean([html.replace(/ jQuery\d+="(?:\d+|null)"/g, "").replace(/^\s*/, "")])[0];
			} else
				return this.cloneNode(true);
		});

		// Copy the events from the original to the clone
		if ( events === true ) {
			var orig = this.find("*").andSelf(), i = 0;

			ret.find("*").andSelf().each(function(){
				if ( this.nodeName !== orig[i].nodeName )
					return;

				var events = jQuery.data( orig[i], "events" );

				for ( var type in events ) {
					for ( var handler in events[ type ] ) {
						jQuery.event.add( this, type, events[ type ][ handler ], events[ type ][ handler ].data );
					}
				}

				i++;
			});
		}

		// Return the cloned set
		return ret;
	},

	filter: function( selector ) {
		return this.pushStack(
			jQuery.isFunction( selector ) &&
			jQuery.grep(this, function(elem, i){
				return selector.call( elem, i );
			}) ||

			jQuery.multiFilter( selector, jQuery.grep(this, function(elem){
				return elem.nodeType === 1;
			}) ), "filter", selector );
	},

	closest: function( selector ) {
		var pos = jQuery.expr.match.POS.test( selector ) ? jQuery(selector) : null,
			closer = 0;

		return this.map(function(){
			var cur = this;
			while ( cur && cur.ownerDocument ) {
				if ( pos ? pos.index(cur) > -1 : jQuery(cur).is(selector) ) {
					jQuery.data(cur, "closest", closer);
					return cur;
				}
				cur = cur.parentNode;
				closer++;
			}
		});
	},

	not: function( selector ) {
		if ( typeof selector === "string" )
			// test special case where just one selector is passed in
			if ( isSimple.test( selector ) )
				return this.pushStack( jQuery.multiFilter( selector, this, true ), "not", selector );
			else
				selector = jQuery.multiFilter( selector, this );

		var isArrayLike = selector.length && selector[selector.length - 1] !== undefined && !selector.nodeType;
		return this.filter(function() {
			return isArrayLike ? jQuery.inArray( this, selector ) < 0 : this != selector;
		});
	},

	add: function( selector ) {
		return this.pushStack( jQuery.unique( jQuery.merge(
			this.get(),
			typeof selector === "string" ?
				jQuery( selector ) :
				jQuery.makeArray( selector )
		)));
	},

	is: function( selector ) {
		return !!selector && jQuery.multiFilter( selector, this ).length > 0;
	},

	hasClass: function( selector ) {
		return !!selector && this.is( "." + selector );
	},

	val: function( value ) {
		if ( value === undefined ) {			
			var elem = this[0];

			if ( elem ) {
				if( jQuery.nodeName( elem, 'option' ) )
					return (elem.attributes.value || {}).specified ? elem.value : elem.text;
				
				// We need to handle select boxes special
				if ( jQuery.nodeName( elem, "select" ) ) {
					var index = elem.selectedIndex,
						values = [],
						options = elem.options,
						one = elem.type == "select-one";

					// Nothing was selected
					if ( index < 0 )
						return null;

					// Loop through all the selected options
					for ( var i = one ? index : 0, max = one ? index + 1 : options.length; i < max; i++ ) {
						var option = options[ i ];

						if ( option.selected ) {
							// Get the specifc value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if ( one )
								return value;

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;				
				}

				// Everything else, we just grab the value
				return (elem.value || "").replace(/\r/g, "");

			}

			return undefined;
		}

		if ( typeof value === "number" )
			value += '';

		return this.each(function(){
			if ( this.nodeType != 1 )
				return;

			if ( jQuery.isArray(value) && /radio|checkbox/.test( this.type ) )
				this.checked = (jQuery.inArray(this.value, value) >= 0 ||
					jQuery.inArray(this.name, value) >= 0);

			else if ( jQuery.nodeName( this, "select" ) ) {
				var values = jQuery.makeArray(value);

				jQuery( "option", this ).each(function(){
					this.selected = (jQuery.inArray( this.value, values ) >= 0 ||
						jQuery.inArray( this.text, values ) >= 0);
				});

				if ( !values.length )
					this.selectedIndex = -1;

			} else
				this.value = value;
		});
	},

	html: function( value ) {
		return value === undefined ?
			(this[0] ?
				this[0].innerHTML.replace(/ jQuery\d+="(?:\d+|null)"/g, "") :
				null) :
			this.empty().append( value );
	},

	replaceWith: function( value ) {
		return this.after( value ).remove();
	},

	eq: function( i ) {
		return this.slice( i, +i + 1 );
	},

	slice: function() {
		return this.pushStack( Array.prototype.slice.apply( this, arguments ),
			"slice", Array.prototype.slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function(elem, i){
			return callback.call( elem, i, elem );
		}));
	},

	andSelf: function() {
		return this.add( this.prevObject );
	},

	domManip: function( args, table, callback ) {
		if ( this[0] ) {
			var fragment = (this[0].ownerDocument || this[0]).createDocumentFragment(),
				scripts = jQuery.clean( args, (this[0].ownerDocument || this[0]), fragment ),
				first = fragment.firstChild;

			if ( first )
				for ( var i = 0, l = this.length; i < l; i++ )
					callback.call( root(this[i], first), this.length > 1 || i > 0 ?
							fragment.cloneNode(true) : fragment );
		
			if ( scripts )
				jQuery.each( scripts, evalScript );
		}

		return this;
		
		function root( elem, cur ) {
			return table && jQuery.nodeName(elem, "table") && jQuery.nodeName(cur, "tr") ?
				(elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
				elem;
		}
	}
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

function evalScript( i, elem ) {
	if ( elem.src )
		jQuery.ajax({
			url: elem.src,
			async: false,
			dataType: "script"
		});

	else
		jQuery.globalEval( elem.text || elem.textContent || elem.innerHTML || "" );

	if ( elem.parentNode )
		elem.parentNode.removeChild( elem );
}

function now(){
	return +new Date;
}

jQuery.extend = jQuery.fn.extend = function() {
	// copy reference to target object
	var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) )
		target = {};

	// extend jQuery itself if only one argument is passed
	if ( length == i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ )
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null )
			// Extend the base object
			for ( var name in options ) {
				var src = target[ name ], copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy )
					continue;

				// Recurse if we're merging object values
				if ( deep && copy && typeof copy === "object" && !copy.nodeType )
					target[ name ] = jQuery.extend( deep, 
						// Never move original objects, clone them
						src || ( copy.length != null ? [ ] : { } )
					, copy );

				// Don't bring in undefined values
				else if ( copy !== undefined )
					target[ name ] = copy;

			}

	// Return the modified object
	return target;
};

// exclude the following css properties to add px
var	exclude = /z-?index|font-?weight|opacity|zoom|line-?height/i,
	// cache defaultView
	defaultView = document.defaultView || {},
	toString = Object.prototype.toString;

jQuery.extend({
	noConflict: function( deep ) {
		window.$ = _$;

		if ( deep )
			window.jQuery = _jQuery;

		return jQuery;
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return toString.call(obj) === "[object Function]";
	},

	isArray: function( obj ) {
		return toString.call(obj) === "[object Array]";
	},

	// check if an element is in a (or is an) XML document
	isXMLDoc: function( elem ) {
		return elem.nodeType === 9 && elem.documentElement.nodeName !== "HTML" ||
			!!elem.ownerDocument && jQuery.isXMLDoc( elem.ownerDocument );
	},

	// Evalulates a script in a global context
	globalEval: function( data ) {
		if ( data && /\S/.test(data) ) {
			// Inspired by code by Andrea Giammarchi
			// http://webreflection.blogspot.com/2007/08/global-scope-evaluation-and-dom.html
			var head = document.getElementsByTagName("head")[0] || document.documentElement,
				script = document.createElement("script");

			script.type = "text/javascript";
			if ( jQuery.support.scriptEval )
				script.appendChild( document.createTextNode( data ) );
			else
				script.text = data;

			// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
			// This arises when a base node is used (#2709).
			head.insertBefore( script, head.firstChild );
			head.removeChild( script );
		}
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toUpperCase() == name.toUpperCase();
	},

	// args is for internal usage only
	each: function( object, callback, args ) {
		var name, i = 0, length = object.length;

		if ( args ) {
			if ( length === undefined ) {
				for ( name in object )
					if ( callback.apply( object[ name ], args ) === false )
						break;
			} else
				for ( ; i < length; )
					if ( callback.apply( object[ i++ ], args ) === false )
						break;

		// A special, fast, case for the most common use of each
		} else {
			if ( length === undefined ) {
				for ( name in object )
					if ( callback.call( object[ name ], name, object[ name ] ) === false )
						break;
			} else
				for ( var value = object[0];
					i < length && callback.call( value, i, value ) !== false; value = object[++i] ){}
		}

		return object;
	},

	prop: function( elem, value, type, i, name ) {
		// Handle executable functions
		if ( jQuery.isFunction( value ) )
			value = value.call( elem, i );

		// Handle passing in a number to a CSS property
		return typeof value === "number" && type == "curCSS" && !exclude.test( name ) ?
			value + "px" :
			value;
	},

	className: {
		// internal only, use addClass("class")
		add: function( elem, classNames ) {
			jQuery.each((classNames || "").split(/\s+/), function(i, className){
				if ( elem.nodeType == 1 && !jQuery.className.has( elem.className, className ) )
					elem.className += (elem.className ? " " : "") + className;
			});
		},

		// internal only, use removeClass("class")
		remove: function( elem, classNames ) {
			if (elem.nodeType == 1)
				elem.className = classNames !== undefined ?
					jQuery.grep(elem.className.split(/\s+/), function(className){
						return !jQuery.className.has( classNames, className );
					}).join(" ") :
					"";
		},

		// internal only, use hasClass("class")
		has: function( elem, className ) {
			return elem && jQuery.inArray( className, (elem.className || elem).toString().split(/\s+/) ) > -1;
		}
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var old = {};
		// Remember the old values, and insert the new ones
		for ( var name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		callback.call( elem );

		// Revert the old values
		for ( var name in options )
			elem.style[ name ] = old[ name ];
	},

	css: function( elem, name, force, extra ) {
		if ( name == "width" || name == "height" ) {
			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = name == "width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ];

			function getWH() {
				val = name == "width" ? elem.offsetWidth : elem.offsetHeight;

				if ( extra === "border" )
					return;

				jQuery.each( which, function() {
					if ( !extra )
						val -= parseFloat(jQuery.curCSS( elem, "padding" + this, true)) || 0;
					if ( extra === "margin" )
						val += parseFloat(jQuery.curCSS( elem, "margin" + this, true)) || 0;
					else
						val -= parseFloat(jQuery.curCSS( elem, "border" + this + "Width", true)) || 0;
				});
			}

			if ( elem.offsetWidth !== 0 )
				getWH();
			else
				jQuery.swap( elem, props, getWH );

			return Math.max(0, Math.round(val));
		}

		return jQuery.curCSS( elem, name, force );
	},

	curCSS: function( elem, name, force ) {
		var ret, style = elem.style;

		// We need to handle opacity special in IE
		if ( name == "opacity" && !jQuery.support.opacity ) {
			ret = jQuery.attr( style, "opacity" );

			return ret == "" ?
				"1" :
				ret;
		}

		// Make sure we're using the right name for getting the float value
		if ( name.match( /float/i ) )
			name = styleFloat;

		if ( !force && style && style[ name ] )
			ret = style[ name ];

		else if ( defaultView.getComputedStyle ) {

			// Only "float" is needed here
			if ( name.match( /float/i ) )
				name = "float";

			name = name.replace( /([A-Z])/g, "-$1" ).toLowerCase();

			var computedStyle = defaultView.getComputedStyle( elem, null );

			if ( computedStyle )
				ret = computedStyle.getPropertyValue( name );

			// We should always get a number back from opacity
			if ( name == "opacity" && ret == "" )
				ret = "1";

		} else if ( elem.currentStyle ) {
			var camelCase = name.replace(/\-(\w)/g, function(all, letter){
				return letter.toUpperCase();
			});

			ret = elem.currentStyle[ name ] || elem.currentStyle[ camelCase ];

			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			if ( !/^\d+(px)?$/i.test( ret ) && /^\d/.test( ret ) ) {
				// Remember the original values
				var left = style.left, rsLeft = elem.runtimeStyle.left;

				// Put in the new values to get a computed value out
				elem.runtimeStyle.left = elem.currentStyle.left;
				style.left = ret || 0;
				ret = style.pixelLeft + "px";

				// Revert the changed values
				style.left = left;
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret;
	},

	clean: function( elems, context, fragment ) {
		context = context || document;

		// !context.createElement fails in IE with an error but returns typeof 'object'
		if ( typeof context.createElement === "undefined" )
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;

		// If a single string is passed in and it's a single tag
		// just do a createElement and skip the rest
		if ( !fragment && elems.length === 1 && typeof elems[0] === "string" ) {
			var match = /^<(\w+)\s*\/?>$/.exec(elems[0]);
			if ( match )
				return [ context.createElement( match[1] ) ];
		}

		var ret = [], scripts = [], div = context.createElement("div");

		jQuery.each(elems, function(i, elem){
			if ( typeof elem === "number" )
				elem += '';

			if ( !elem )
				return;

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				// Fix "XHTML"-style tags in all browsers
				elem = elem.replace(/(<(\w+)[^>]*?)\/>/g, function(all, front, tag){
					return tag.match(/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$/i) ?
						all :
						front + "></" + tag + ">";
				});

				// Trim whitespace, otherwise indexOf won't work as expected
				var tags = elem.replace(/^\s+/, "").substring(0, 10).toLowerCase();

				var wrap =
					// option or optgroup
					!tags.indexOf("<opt") &&
					[ 1, "<select multiple='multiple'>", "</select>" ] ||

					!tags.indexOf("<leg") &&
					[ 1, "<fieldset>", "</fieldset>" ] ||

					tags.match(/^<(thead|tbody|tfoot|colg|cap)/) &&
					[ 1, "<table>", "</table>" ] ||

					!tags.indexOf("<tr") &&
					[ 2, "<table><tbody>", "</tbody></table>" ] ||

				 	// <thead> matched above
					(!tags.indexOf("<td") || !tags.indexOf("<th")) &&
					[ 3, "<table><tbody><tr>", "</tr></tbody></table>" ] ||

					!tags.indexOf("<col") &&
					[ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ] ||

					// IE can't serialize <link> and <script> tags normally
					!jQuery.support.htmlSerialize &&
					[ 1, "div<div>", "</div>" ] ||

					[ 0, "", "" ];

				// Go to html and back, then peel off extra wrappers
				div.innerHTML = wrap[1] + elem + wrap[2];

				// Move to the right depth
				while ( wrap[0]-- )
					div = div.lastChild;

				// Remove IE's autoinserted <tbody> from table fragments
				if ( !jQuery.support.tbody ) {

					// String was a <table>, *may* have spurious <tbody>
					var hasBody = /<tbody/i.test(elem),
						tbody = !tags.indexOf("<table") && !hasBody ?
							div.firstChild && div.firstChild.childNodes :

						// String was a bare <thead> or <tfoot>
						wrap[1] == "<table>" && !hasBody ?
							div.childNodes :
							[];

					for ( var j = tbody.length - 1; j >= 0 ; --j )
						if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length )
							tbody[ j ].parentNode.removeChild( tbody[ j ] );

					}

				// IE completely kills leading whitespace when innerHTML is used
				if ( !jQuery.support.leadingWhitespace && /^\s/.test( elem ) )
					div.insertBefore( context.createTextNode( elem.match(/^\s*/)[0] ), div.firstChild );
				
				elem = jQuery.makeArray( div.childNodes );
			}

			if ( elem.nodeType )
				ret.push( elem );
			else
				ret = jQuery.merge( ret, elem );

		});

		if ( fragment ) {
			for ( var i = 0; ret[i]; i++ ) {
				if ( jQuery.nodeName( ret[i], "script" ) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript") ) {
					scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( ret[i] ) : ret[i] );
				} else {
					if ( ret[i].nodeType === 1 )
						ret.splice.apply( ret, [i + 1, 0].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))) );
					fragment.appendChild( ret[i] );
				}
			}
			
			return scripts;
		}

		return ret;
	},

	attr: function( elem, name, value ) {
		// don't set attributes on text and comment nodes
		if (!elem || elem.nodeType == 3 || elem.nodeType == 8)
			return undefined;

		var notxml = !jQuery.isXMLDoc( elem ),
			// Whether we are setting (or getting)
			set = value !== undefined;

		// Try to normalize/fix the name
		name = notxml && jQuery.props[ name ] || name;

		// Only do all the following if this is a node (faster for style)
		// IE elem.getAttribute passes even for style
		if ( elem.tagName ) {

			// These attributes require special treatment
			var special = /href|src|style/.test( name );

			// Safari mis-reports the default selected property of a hidden option
			// Accessing the parent's selectedIndex property fixes it
			if ( name == "selected" && elem.parentNode )
				elem.parentNode.selectedIndex;

			// If applicable, access the attribute via the DOM 0 way
			if ( name in elem && notxml && !special ) {
				if ( set ){
					// We can't allow the type property to be changed (since it causes problems in IE)
					if ( name == "type" && jQuery.nodeName( elem, "input" ) && elem.parentNode )
						throw "type property can't be changed";

					elem[ name ] = value;
				}

				// browsers index elements by id/name on forms, give priority to attributes.
				if( jQuery.nodeName( elem, "form" ) && elem.getAttributeNode(name) )
					return elem.getAttributeNode( name ).nodeValue;

				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				if ( name == "tabIndex" ) {
					var attributeNode = elem.getAttributeNode( "tabIndex" );
					return attributeNode && attributeNode.specified
						? attributeNode.value
						: elem.nodeName.match(/(button|input|object|select|textarea)/i)
							? 0
							: elem.nodeName.match(/^(a|area)$/i) && elem.href
								? 0
								: undefined;
				}

				return elem[ name ];
			}

			if ( !jQuery.support.style && notxml &&  name == "style" )
				return jQuery.attr( elem.style, "cssText", value );

			if ( set )
				// convert the value to a string (all browsers do this but IE) see #1070
				elem.setAttribute( name, "" + value );

			var attr = !jQuery.support.hrefNormalized && notxml && special
					// Some attributes require a special call on IE
					? elem.getAttribute( name, 2 )
					: elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return attr === null ? undefined : attr;
		}

		// elem is actually elem.style ... set the style

		// IE uses filters for opacity
		if ( !jQuery.support.opacity && name == "opacity" ) {
			if ( set ) {
				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				elem.zoom = 1;

				// Set the alpha filter to set the opacity
				elem.filter = (elem.filter || "").replace( /alpha\([^)]*\)/, "" ) +
					(parseInt( value ) + '' == "NaN" ? "" : "alpha(opacity=" + value * 100 + ")");
			}

			return elem.filter && elem.filter.indexOf("opacity=") >= 0 ?
				(parseFloat( elem.filter.match(/opacity=([^)]*)/)[1] ) / 100) + '':
				"";
		}

		name = name.replace(/-([a-z])/ig, function(all, letter){
			return letter.toUpperCase();
		});

		if ( set )
			elem[ name ] = value;

		return elem[ name ];
	},

	trim: function( text ) {
		return (text || "").replace( /^\s+|\s+$/g, "" );
	},

	makeArray: function( array ) {
		var ret = [];

		if( array != null ){
			var i = array.length;
			// The window, strings (and functions) also have 'length'
			if( i == null || typeof array === "string" || jQuery.isFunction(array) || array.setInterval )
				ret[0] = array;
			else
				while( i )
					ret[--i] = array[i];
		}

		return ret;
	},

	inArray: function( elem, array ) {
		for ( var i = 0, length = array.length; i < length; i++ )
		// Use === because on IE, window == document
			if ( array[ i ] === elem )
				return i;

		return -1;
	},

	merge: function( first, second ) {
		// We have to loop this way because IE & Opera overwrite the length
		// expando of getElementsByTagName
		var i = 0, elem, pos = first.length;
		// Also, we need to make sure that the correct elements are being returned
		// (IE returns comment nodes in a '*' query)
		if ( !jQuery.support.getAll ) {
			while ( (elem = second[ i++ ]) != null )
				if ( elem.nodeType != 8 )
					first[ pos++ ] = elem;

		} else
			while ( (elem = second[ i++ ]) != null )
				first[ pos++ ] = elem;

		return first;
	},

	unique: function( array ) {
		var ret = [], done = {};

		try {

			for ( var i = 0, length = array.length; i < length; i++ ) {
				var id = jQuery.data( array[ i ] );

				if ( !done[ id ] ) {
					done[ id ] = true;
					ret.push( array[ i ] );
				}
			}

		} catch( e ) {
			ret = array;
		}

		return ret;
	},

	grep: function( elems, callback, inv ) {
		var ret = [];

		// Go through the array, only saving the items
		// that pass the validator function
		for ( var i = 0, length = elems.length; i < length; i++ )
			if ( !inv != !callback( elems[ i ], i ) )
				ret.push( elems[ i ] );

		return ret;
	},

	map: function( elems, callback ) {
		var ret = [];

		// Go through the array, translating each of the items to their
		// new value (or values).
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			var value = callback( elems[ i ], i );

			if ( value != null )
				ret[ ret.length ] = value;
		}

		return ret.concat.apply( [], ret );
	}
});

// Use of jQuery.browser is deprecated.
// It's included for backwards compatibility and plugins,
// although they should work to migrate away.

var userAgent = navigator.userAgent.toLowerCase();

// Figure out what browser is being used
jQuery.browser = {
	version: (userAgent.match( /.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/ ) || [0,'0'])[1],
	safari: /webkit/.test( userAgent ),
	opera: /opera/.test( userAgent ),
	msie: /msie/.test( userAgent ) && !/opera/.test( userAgent ),
	mozilla: /mozilla/.test( userAgent ) && !/(compatible|webkit)/.test( userAgent )
};

jQuery.each({
	parent: function(elem){return elem.parentNode;},
	parents: function(elem){return jQuery.dir(elem,"parentNode");},
	next: function(elem){return jQuery.nth(elem,2,"nextSibling");},
	prev: function(elem){return jQuery.nth(elem,2,"previousSibling");},
	nextAll: function(elem){return jQuery.dir(elem,"nextSibling");},
	prevAll: function(elem){return jQuery.dir(elem,"previousSibling");},
	siblings: function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},
	children: function(elem){return jQuery.sibling(elem.firstChild);},
	contents: function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.makeArray(elem.childNodes);}
}, function(name, fn){
	jQuery.fn[ name ] = function( selector ) {
		var ret = jQuery.map( this, fn );

		if ( selector && typeof selector == "string" )
			ret = jQuery.multiFilter( selector, ret );

		return this.pushStack( jQuery.unique( ret ), name, selector );
	};
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function(name, original){
	jQuery.fn[ name ] = function( selector ) {
		var ret = [], insert = jQuery( selector );

		for ( var i = 0, l = insert.length; i < l; i++ ) {
			var elems = (i > 0 ? this.clone(true) : this).get();
			jQuery.fn[ original ].apply( jQuery(insert[i]), elems );
			ret = ret.concat( elems );
		}

		return this.pushStack( ret, name, selector );
	};
});

jQuery.each({
	removeAttr: function( name ) {
		jQuery.attr( this, name, "" );
		if (this.nodeType == 1)
			this.removeAttribute( name );
	},

	addClass: function( classNames ) {
		jQuery.className.add( this, classNames );
	},

	removeClass: function( classNames ) {
		jQuery.className.remove( this, classNames );
	},

	toggleClass: function( classNames, state ) {
		if( typeof state !== "boolean" )
			state = !jQuery.className.has( this, classNames );
		jQuery.className[ state ? "add" : "remove" ]( this, classNames );
	},

	remove: function( selector ) {
		if ( !selector || jQuery.filter( selector, [ this ] ).length ) {
			// Prevent memory leaks
			jQuery( "*", this ).add([this]).each(function(){
				jQuery.event.remove(this);
				jQuery.removeData(this);
			});
			if (this.parentNode)
				this.parentNode.removeChild( this );
		}
	},

	empty: function() {
		// Remove element nodes and prevent memory leaks
		jQuery(this).children().remove();

		// Remove any remaining nodes
		while ( this.firstChild )
			this.removeChild( this.firstChild );
	}
}, function(name, fn){
	jQuery.fn[ name ] = function(){
		return this.each( fn, arguments );
	};
});

// Helper function used by the dimensions and offset modules
function num(elem, prop) {
	return elem[0] && parseInt( jQuery.curCSS(elem[0], prop, true), 10 ) || 0;
}
var expando = "jQuery" + now(), uuid = 0, windowData = {};

jQuery.extend({
	cache: {},

	data: function( elem, name, data ) {
		elem = elem == window ?
			windowData :
			elem;

		var id = elem[ expando ];

		// Compute a unique ID for the element
		if ( !id )
			id = elem[ expando ] = ++uuid;

		// Only generate the data cache if we're
		// trying to access or manipulate it
		if ( name && !jQuery.cache[ id ] )
			jQuery.cache[ id ] = {};

		// Prevent overriding the named cache with undefined values
		if ( data !== undefined )
			jQuery.cache[ id ][ name ] = data;

		// Return the named cache data, or the ID for the element
		return name ?
			jQuery.cache[ id ][ name ] :
			id;
	},

	removeData: function( elem, name ) {
		elem = elem == window ?
			windowData :
			elem;

		var id = elem[ expando ];

		// If we want to remove a specific section of the element's data
		if ( name ) {
			if ( jQuery.cache[ id ] ) {
				// Remove the section of cache data
				delete jQuery.cache[ id ][ name ];

				// If we've removed all the data, remove the element's cache
				name = "";

				for ( name in jQuery.cache[ id ] )
					break;

				if ( !name )
					jQuery.removeData( elem );
			}

		// Otherwise, we want to remove all of the element's data
		} else {
			// Clean up the element expando
			try {
				delete elem[ expando ];
			} catch(e){
				// IE has trouble directly removing the expando
				// but it's ok with using removeAttribute
				if ( elem.removeAttribute )
					elem.removeAttribute( expando );
			}

			// Completely remove the data cache
			delete jQuery.cache[ id ];
		}
	},
	queue: function( elem, type, data ) {
		if ( elem ){
	
			type = (type || "fx") + "queue";
	
			var q = jQuery.data( elem, type );
	
			if ( !q || jQuery.isArray(data) )
				q = jQuery.data( elem, type, jQuery.makeArray(data) );
			else if( data )
				q.push( data );
	
		}
		return q;
	},

	dequeue: function( elem, type ){
		var queue = jQuery.queue( elem, type ),
			fn = queue.shift();
		
		if( !type || type === "fx" )
			fn = queue[0];
			
		if( fn !== undefined )
			fn.call(elem);
	}
});

jQuery.fn.extend({
	data: function( key, value ){
		var parts = key.split(".");
		parts[1] = parts[1] ? "." + parts[1] : "";

		if ( value === undefined ) {
			var data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);

			if ( data === undefined && this.length )
				data = jQuery.data( this[0], key );

			return data === undefined && parts[1] ?
				this.data( parts[0] ) :
				data;
		} else
			return this.trigger("setData" + parts[1] + "!", [parts[0], value]).each(function(){
				jQuery.data( this, key, value );
			});
	},

	removeData: function( key ){
		return this.each(function(){
			jQuery.removeData( this, key );
		});
	},
	queue: function(type, data){
		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
		}

		if ( data === undefined )
			return jQuery.queue( this[0], type );

		return this.each(function(){
			var queue = jQuery.queue( this, type, data );
			
			 if( type == "fx" && queue.length == 1 )
				queue[0].call(this);
		});
	},
	dequeue: function(type){
		return this.each(function(){
			jQuery.dequeue( this, type );
		});
	}
});/*!
 * Sizzle CSS Selector Engine - v0.9.3
 *  Copyright 2009, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?/g,
	done = 0,
	toString = Object.prototype.toString;

var Sizzle = function(selector, context, results, seed) {
	results = results || [];
	context = context || document;

	if ( context.nodeType !== 1 && context.nodeType !== 9 )
		return [];
	
	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var parts = [], m, set, checkSet, check, mode, extra, prune = true;
	
	// Reset the position of the chunker regexp (start from head)
	chunker.lastIndex = 0;
	
	while ( (m = chunker.exec(selector)) !== null ) {
		parts.push( m[1] );
		
		if ( m[2] ) {
			extra = RegExp.rightContext;
			break;
		}
	}

	if ( parts.length > 1 && origPOS.exec( selector ) ) {
		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context );
		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] )
					selector += parts.shift();

				set = posProcess( selector, set );
			}
		}
	} else {
		var ret = seed ?
			{ expr: parts.pop(), set: makeArray(seed) } :
			Sizzle.find( parts.pop(), parts.length === 1 && context.parentNode ? context.parentNode : context, isXML(context) );
		set = Sizzle.filter( ret.expr, ret.set );

		if ( parts.length > 0 ) {
			checkSet = makeArray(set);
		} else {
			prune = false;
		}

		while ( parts.length ) {
			var cur = parts.pop(), pop = cur;

			if ( !Expr.relative[ cur ] ) {
				cur = "";
			} else {
				pop = parts.pop();
			}

			if ( pop == null ) {
				pop = context;
			}

			Expr.relative[ cur ]( checkSet, pop, isXML(context) );
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		throw "Syntax error, unrecognized expression: " + (cur || selector);
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );
		} else if ( context.nodeType === 1 ) {
			for ( var i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}
		} else {
			for ( var i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}
	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, context, results, seed );

		if ( sortOrder ) {
			hasDuplicate = false;
			results.sort(sortOrder);

			if ( hasDuplicate ) {
				for ( var i = 1; i < results.length; i++ ) {
					if ( results[i] === results[i-1] ) {
						results.splice(i--, 1);
					}
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function(expr, set){
	return Sizzle(expr, null, null, set);
};

Sizzle.find = function(expr, context, isXML){
	var set, match;

	if ( !expr ) {
		return [];
	}

	for ( var i = 0, l = Expr.order.length; i < l; i++ ) {
		var type = Expr.order[i], match;
		
		if ( (match = Expr.match[ type ].exec( expr )) ) {
			var left = RegExp.leftContext;

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace(/\\/g, "");
				set = Expr.find[ type ]( match, context, isXML );
				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = context.getElementsByTagName("*");
	}

	return {set: set, expr: expr};
};

Sizzle.filter = function(expr, set, inplace, not){
	var old = expr, result = [], curLoop = set, match, anyFound,
		isXMLFilter = set && set[0] && isXML(set[0]);

	while ( expr && set.length ) {
		for ( var type in Expr.filter ) {
			if ( (match = Expr.match[ type ].exec( expr )) != null ) {
				var filter = Expr.filter[ type ], found, item;
				anyFound = false;

				if ( curLoop == result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;
					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( var i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							var pass = not ^ !!found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;
								} else {
									curLoop[i] = false;
								}
							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr == old ) {
			if ( anyFound == null ) {
				throw "Syntax error, unrecognized expression: " + expr;
			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],
	match: {
		ID: /#((?:[\w\u00c0-\uFFFF_-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF_-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF_-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF_-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*_-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF_-]|\\.)+)(?:\((['"]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/
	},
	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},
	attrHandle: {
		href: function(elem){
			return elem.getAttribute("href");
		}
	},
	relative: {
		"+": function(checkSet, part, isXML){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !/\W/.test(part),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag && !isXML ) {
				part = part.toUpperCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},
		">": function(checkSet, part, isXML){
			var isPartStr = typeof part === "string";

			if ( isPartStr && !/\W/.test(part) ) {
				part = isXML ? part : part.toUpperCase();

				for ( var i = 0, l = checkSet.length; i < l; i++ ) {
					var elem = checkSet[i];
					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName === part ? parent : false;
					}
				}
			} else {
				for ( var i = 0, l = checkSet.length; i < l; i++ ) {
					var elem = checkSet[i];
					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},
		"": function(checkSet, part, isXML){
			var doneName = done++, checkFn = dirCheck;

			if ( !part.match(/\W/) ) {
				var nodeCheck = part = isXML ? part : part.toUpperCase();
				checkFn = dirNodeCheck;
			}

			checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
		},
		"~": function(checkSet, part, isXML){
			var doneName = done++, checkFn = dirCheck;

			if ( typeof part === "string" && !part.match(/\W/) ) {
				var nodeCheck = part = isXML ? part : part.toUpperCase();
				checkFn = dirNodeCheck;
			}

			checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
		}
	},
	find: {
		ID: function(match, context, isXML){
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				return m ? [m] : [];
			}
		},
		NAME: function(match, context, isXML){
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [], results = context.getElementsByName(match[1]);

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},
		TAG: function(match, context){
			return context.getElementsByTagName(match[1]);
		}
	},
	preFilter: {
		CLASS: function(match, curLoop, inplace, result, not, isXML){
			match = " " + match[1].replace(/\\/g, "") + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").indexOf(match) >= 0) ) {
						if ( !inplace )
							result.push( elem );
					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},
		ID: function(match){
			return match[1].replace(/\\/g, "");
		},
		TAG: function(match, curLoop){
			for ( var i = 0; curLoop[i] === false; i++ ){}
			return curLoop[i] && isXML(curLoop[i]) ? match[1] : match[1].toUpperCase();
		},
		CHILD: function(match){
			if ( match[1] == "nth" ) {
				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(
					match[2] == "even" && "2n" || match[2] == "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},
		ATTR: function(match, curLoop, inplace, result, not, isXML){
			var name = match[1].replace(/\\/g, "");
			
			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},
		PSEUDO: function(match, curLoop, inplace, result, not){
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( match[3].match(chunker).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);
				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
					if ( !inplace ) {
						result.push.apply( result, ret );
					}
					return false;
				}
			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}
			
			return match;
		},
		POS: function(match){
			match.unshift( true );
			return match;
		}
	},
	filters: {
		enabled: function(elem){
			return elem.disabled === false && elem.type !== "hidden";
		},
		disabled: function(elem){
			return elem.disabled === true;
		},
		checked: function(elem){
			return elem.checked === true;
		},
		selected: function(elem){
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			elem.parentNode.selectedIndex;
			return elem.selected === true;
		},
		parent: function(elem){
			return !!elem.firstChild;
		},
		empty: function(elem){
			return !elem.firstChild;
		},
		has: function(elem, i, match){
			return !!Sizzle( match[3], elem ).length;
		},
		header: function(elem){
			return /h\d/i.test( elem.nodeName );
		},
		text: function(elem){
			return "text" === elem.type;
		},
		radio: function(elem){
			return "radio" === elem.type;
		},
		checkbox: function(elem){
			return "checkbox" === elem.type;
		},
		file: function(elem){
			return "file" === elem.type;
		},
		password: function(elem){
			return "password" === elem.type;
		},
		submit: function(elem){
			return "submit" === elem.type;
		},
		image: function(elem){
			return "image" === elem.type;
		},
		reset: function(elem){
			return "reset" === elem.type;
		},
		button: function(elem){
			return "button" === elem.type || elem.nodeName.toUpperCase() === "BUTTON";
		},
		input: function(elem){
			return /input|select|textarea|button/i.test(elem.nodeName);
		}
	},
	setFilters: {
		first: function(elem, i){
			return i === 0;
		},
		last: function(elem, i, match, array){
			return i === array.length - 1;
		},
		even: function(elem, i){
			return i % 2 === 0;
		},
		odd: function(elem, i){
			return i % 2 === 1;
		},
		lt: function(elem, i, match){
			return i < match[3] - 0;
		},
		gt: function(elem, i, match){
			return i > match[3] - 0;
		},
		nth: function(elem, i, match){
			return match[3] - 0 == i;
		},
		eq: function(elem, i, match){
			return match[3] - 0 == i;
		}
	},
	filter: {
		PSEUDO: function(elem, match, i, array){
			var name = match[1], filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || "").indexOf(match[3]) >= 0;
			} else if ( name === "not" ) {
				var not = match[3];

				for ( var i = 0, l = not.length; i < l; i++ ) {
					if ( not[i] === elem ) {
						return false;
					}
				}

				return true;
			}
		},
		CHILD: function(elem, match){
			var type = match[1], node = elem;
			switch (type) {
				case 'only':
				case 'first':
					while (node = node.previousSibling)  {
						if ( node.nodeType === 1 ) return false;
					}
					if ( type == 'first') return true;
					node = elem;
				case 'last':
					while (node = node.nextSibling)  {
						if ( node.nodeType === 1 ) return false;
					}
					return true;
				case 'nth':
					var first = match[2], last = match[3];

					if ( first == 1 && last == 0 ) {
						return true;
					}
					
					var doneName = match[0],
						parent = elem.parentNode;
	
					if ( parent && (parent.sizcache !== doneName || !elem.nodeIndex) ) {
						var count = 0;
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						} 
						parent.sizcache = doneName;
					}
					
					var diff = elem.nodeIndex - last;
					if ( first == 0 ) {
						return diff == 0;
					} else {
						return ( diff % first == 0 && diff / first >= 0 );
					}
			}
		},
		ID: function(elem, match){
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},
		TAG: function(elem, match){
			return (match === "*" && elem.nodeType === 1) || elem.nodeName === match;
		},
		CLASS: function(elem, match){
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},
		ATTR: function(elem, match){
			var name = match[1],
				result = Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value != check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},
		POS: function(elem, match, i, array){
			var name = match[2], filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS;

for ( var type in Expr.match ) {
	Expr.match[ type ] = RegExp( Expr.match[ type ].source + /(?![^\[]*\])(?![^\(]*\))/.source );
}

var makeArray = function(array, results) {
	array = Array.prototype.slice.call( array );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}
	
	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
try {
	Array.prototype.slice.call( document.documentElement.childNodes );

// Provide a fallback method if it does not work
} catch(e){
	makeArray = function(array, results) {
		var ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );
		} else {
			if ( typeof array.length === "number" ) {
				for ( var i = 0, l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}
			} else {
				for ( var i = 0; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		var ret = a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
} else if ( "sourceIndex" in document.documentElement ) {
	sortOrder = function( a, b ) {
		var ret = a.sourceIndex - b.sourceIndex;
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
} else if ( document.createRange ) {
	sortOrder = function( a, b ) {
		var aRange = a.ownerDocument.createRange(), bRange = b.ownerDocument.createRange();
		aRange.selectNode(a);
		aRange.collapse(true);
		bRange.selectNode(b);
		bRange.collapse(true);
		var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
}

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("form"),
		id = "script" + (new Date).getTime();
	form.innerHTML = "<input name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	var root = document.documentElement;
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( !!document.getElementById( id ) ) {
		Expr.find.ID = function(match, context, isXML){
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
			}
		};

		Expr.filter.ID = function(elem, match){
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function(match, context){
			var results = context.getElementsByTagName(match[1]);

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";
	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {
		Expr.attrHandle.href = function(elem){
			return elem.getAttribute("href", 2);
		};
	}
})();

if ( document.querySelectorAll ) (function(){
	var oldSizzle = Sizzle, div = document.createElement("div");
	div.innerHTML = "<p class='TEST'></p>";

	// Safari can't handle uppercase or unicode characters when
	// in quirks mode.
	if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
		return;
	}
	
	Sizzle = function(query, context, extra, seed){
		context = context || document;

		// Only use querySelectorAll on non-XML documents
		// (ID selectors don't work in non-HTML documents)
		if ( !seed && context.nodeType === 9 && !isXML(context) ) {
			try {
				return makeArray( context.querySelectorAll(query), extra );
			} catch(e){}
		}
		
		return oldSizzle(query, context, extra, seed);
	};

	Sizzle.find = oldSizzle.find;
	Sizzle.filter = oldSizzle.filter;
	Sizzle.selectors = oldSizzle.selectors;
	Sizzle.matches = oldSizzle.matches;
})();

if ( document.getElementsByClassName && document.documentElement.getElementsByClassName ) (function(){
	var div = document.createElement("div");
	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	if ( div.getElementsByClassName("e").length === 0 )
		return;

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 )
		return;

	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function(match, context, isXML) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	var sibDir = dir == "previousSibling" && !isXML;
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			if ( sibDir && elem.nodeType === 1 ){
				elem.sizcache = doneName;
				elem.sizset = i;
			}
			elem = elem[dir];
			var match = false;

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem.sizcache = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	var sibDir = dir == "previousSibling" && !isXML;
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			if ( sibDir && elem.nodeType === 1 ) {
				elem.sizcache = doneName;
				elem.sizset = i;
			}
			elem = elem[dir];
			var match = false;

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem.sizcache = doneName;
						elem.sizset = i;
					}
					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

var contains = document.compareDocumentPosition ?  function(a, b){
	return a.compareDocumentPosition(b) & 16;
} : function(a, b){
	return a !== b && (a.contains ? a.contains(b) : true);
};

var isXML = function(elem){
	return elem.nodeType === 9 && elem.documentElement.nodeName !== "HTML" ||
		!!elem.ownerDocument && isXML( elem.ownerDocument );
};

var posProcess = function(selector, context){
	var tmpSet = [], later = "", match,
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE
jQuery.find = Sizzle;
jQuery.filter = Sizzle.filter;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;

Sizzle.selectors.filters.hidden = function(elem){
	return elem.offsetWidth === 0 || elem.offsetHeight === 0;
};

Sizzle.selectors.filters.visible = function(elem){
	return elem.offsetWidth > 0 || elem.offsetHeight > 0;
};

Sizzle.selectors.filters.animated = function(elem){
	return jQuery.grep(jQuery.timers, function(fn){
		return elem === fn.elem;
	}).length;
};

jQuery.multiFilter = function( expr, elems, not ) {
	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return Sizzle.matches(expr, elems);
};

jQuery.dir = function( elem, dir ){
	var matched = [], cur = elem[dir];
	while ( cur && cur != document ) {
		if ( cur.nodeType == 1 )
			matched.push( cur );
		cur = cur[dir];
	}
	return matched;
};

jQuery.nth = function(cur, result, dir, elem){
	result = result || 1;
	var num = 0;

	for ( ; cur; cur = cur[dir] )
		if ( cur.nodeType == 1 && ++num == result )
			break;

	return cur;
};

jQuery.sibling = function(n, elem){
	var r = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType == 1 && n != elem )
			r.push( n );
	}

	return r;
};

return;

window.Sizzle = Sizzle;

})();
/*
 * A number of helper functions used for managing events.
 * Many of the ideas behind this code originated from
 * Dean Edwards' addEvent library.
 */
jQuery.event = {

	// Bind an event to an element
	// Original by Dean Edwards
	add: function(elem, types, handler, data) {
		if ( elem.nodeType == 3 || elem.nodeType == 8 )
			return;

		// For whatever reason, IE has trouble passing the window object
		// around, causing it to be cloned in the process
		if ( elem.setInterval && elem != window )
			elem = window;

		// Make sure that the function being executed has a unique ID
		if ( !handler.guid )
			handler.guid = this.guid++;

		// if data is passed, bind to handler
		if ( data !== undefined ) {
			// Create temporary function pointer to original handler
			var fn = handler;

			// Create unique handler function, wrapped around original handler
			handler = this.proxy( fn );

			// Store data in unique handler
			handler.data = data;
		}

		// Init the element's event structure
		var events = jQuery.data(elem, "events") || jQuery.data(elem, "events", {}),
			handle = jQuery.data(elem, "handle") || jQuery.data(elem, "handle", function(){
				// Handle the second event of a trigger and when
				// an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && !jQuery.event.triggered ?
					jQuery.event.handle.apply(arguments.callee.elem, arguments) :
					undefined;
			});
		// Add elem as a property of the handle function
		// This is to prevent a memory leak with non-native
		// event in IE.
		handle.elem = elem;

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		jQuery.each(types.split(/\s+/), function(index, type) {
			// Namespaced event handlers
			var namespaces = type.split(".");
			type = namespaces.shift();
			handler.type = namespaces.slice().sort().join(".");

			// Get the current list of functions bound to this event
			var handlers = events[type];
			
			if ( jQuery.event.specialAll[type] )
				jQuery.event.specialAll[type].setup.call(elem, data, namespaces);

			// Init the event handler queue
			if (!handlers) {
				handlers = events[type] = {};

				// Check for a special event handler
				// Only use addEventListener/attachEvent if the special
				// events handler returns false
				if ( !jQuery.event.special[type] || jQuery.event.special[type].setup.call(elem, data, namespaces) === false ) {
					// Bind the global event handler to the element
					if (elem.addEventListener)
						elem.addEventListener(type, handle, false);
					else if (elem.attachEvent)
						elem.attachEvent("on" + type, handle);
				}
			}

			// Add the function to the element's handler list
			handlers[handler.guid] = handler;

			// Keep track of which events have been used, for global triggering
			jQuery.event.global[type] = true;
		});

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	guid: 1,
	global: {},

	// Detach an event or set of events from an element
	remove: function(elem, types, handler) {
		// don't do events on text and comment nodes
		if ( elem.nodeType == 3 || elem.nodeType == 8 )
			return;

		var events = jQuery.data(elem, "events"), ret, index;

		if ( events ) {
			// Unbind all events for the element
			if ( types === undefined || (typeof types === "string" && types.charAt(0) == ".") )
				for ( var type in events )
					this.remove( elem, type + (types || "") );
			else {
				// types is actually an event object here
				if ( types.type ) {
					handler = types.handler;
					types = types.type;
				}

				// Handle multiple events seperated by a space
				// jQuery(...).unbind("mouseover mouseout", fn);
				jQuery.each(types.split(/\s+/), function(index, type){
					// Namespaced event handlers
					var namespaces = type.split(".");
					type = namespaces.shift();
					var namespace = RegExp("(^|\\.)" + namespaces.slice().sort().join(".*\\.") + "(\\.|$)");

					if ( events[type] ) {
						// remove the given handler for the given type
						if ( handler )
							delete events[type][handler.guid];

						// remove all handlers for the given type
						else
							for ( var handle in events[type] )
								// Handle the removal of namespaced events
								if ( namespace.test(events[type][handle].type) )
									delete events[type][handle];
									
						if ( jQuery.event.specialAll[type] )
							jQuery.event.specialAll[type].teardown.call(elem, namespaces);

						// remove generic event handler if no more handlers exist
						for ( ret in events[type] ) break;
						if ( !ret ) {
							if ( !jQuery.event.special[type] || jQuery.event.special[type].teardown.call(elem, namespaces) === false ) {
								if (elem.removeEventListener)
									elem.removeEventListener(type, jQuery.data(elem, "handle"), false);
								else if (elem.detachEvent)
									elem.detachEvent("on" + type, jQuery.data(elem, "handle"));
							}
							ret = null;
							delete events[type];
						}
					}
				});
			}

			// Remove the expando if it's no longer used
			for ( ret in events ) break;
			if ( !ret ) {
				var handle = jQuery.data( elem, "handle" );
				if ( handle ) handle.elem = null;
				jQuery.removeData( elem, "events" );
				jQuery.removeData( elem, "handle" );
			}
		}
	},

	// bubbling is internal
	trigger: function( event, data, elem, bubbling ) {
		// Event object or event type
		var type = event.type || event;

		if( !bubbling ){
			event = typeof event === "object" ?
				// jQuery.Event object
				event[expando] ? event :
				// Object literal
				jQuery.extend( jQuery.Event(type), event ) :
				// Just the event type (string)
				jQuery.Event(type);

			if ( type.indexOf("!") >= 0 ) {
				event.type = type = type.slice(0, -1);
				event.exclusive = true;
			}

			// Handle a global trigger
			if ( !elem ) {
				// Don't bubble custom events when global (to avoid too much overhead)
				event.stopPropagation();
				// Only trigger if we've ever bound an event for it
				if ( this.global[type] )
					jQuery.each( jQuery.cache, function(){
						if ( this.events && this.events[type] )
							jQuery.event.trigger( event, data, this.handle.elem );
					});
			}

			// Handle triggering a single element

			// don't do events on text and comment nodes
			if ( !elem || elem.nodeType == 3 || elem.nodeType == 8 )
				return undefined;
			
			// Clean up in case it is reused
			event.result = undefined;
			event.target = elem;
			
			// Clone the incoming data, if any
			data = jQuery.makeArray(data);
			data.unshift( event );
		}

		event.currentTarget = elem;

		// Trigger the event, it is assumed that "handle" is a function
		var handle = jQuery.data(elem, "handle");
		if ( handle )
			handle.apply( elem, data );

		// Handle triggering native .onfoo handlers (and on links since we don't call .click() for links)
		if ( (!elem[type] || (jQuery.nodeName(elem, 'a') && type == "click")) && elem["on"+type] && elem["on"+type].apply( elem, data ) === false )
			event.result = false;

		// Trigger the native events (except for clicks on links)
		if ( !bubbling && elem[type] && !event.isDefaultPrevented() && !(jQuery.nodeName(elem, 'a') && type == "click") ) {
			this.triggered = true;
			try {
				elem[ type ]();
			// prevent IE from throwing an error for some hidden elements
			} catch (e) {}
		}

		this.triggered = false;

		if ( !event.isPropagationStopped() ) {
			var parent = elem.parentNode || elem.ownerDocument;
			if ( parent )
				jQuery.event.trigger(event, data, parent, true);
		}
	},

	handle: function(event) {
		// returned undefined or false
		var all, handlers;

		event = arguments[0] = jQuery.event.fix( event || window.event );
		event.currentTarget = this;
		
		// Namespaced event handlers
		var namespaces = event.type.split(".");
		event.type = namespaces.shift();

		// Cache this now, all = true means, any handler
		all = !namespaces.length && !event.exclusive;
		
		var namespace = RegExp("(^|\\.)" + namespaces.slice().sort().join(".*\\.") + "(\\.|$)");

		handlers = ( jQuery.data(this, "events") || {} )[event.type];

		for ( var j in handlers ) {
			var handler = handlers[j];

			// Filter the functions by class
			if ( all || namespace.test(handler.type) ) {
				// Pass in a reference to the handler function itself
				// So that we can later remove it
				event.handler = handler;
				event.data = handler.data;

				var ret = handler.apply(this, arguments);

				if( ret !== undefined ){
					event.result = ret;
					if ( ret === false ) {
						event.preventDefault();
						event.stopPropagation();
					}
				}

				if( event.isImmediatePropagationStopped() )
					break;

			}
		}
	},

	props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode metaKey newValue originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),

	fix: function(event) {
		if ( event[expando] )
			return event;

		// store a copy of the original event object
		// and "clone" to set read-only properties
		var originalEvent = event;
		event = jQuery.Event( originalEvent );

		for ( var i = this.props.length, prop; i; ){
			prop = this.props[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary
		if ( !event.target )
			event.target = event.srcElement || document; // Fixes #1925 where srcElement might not be defined either

		// check if target is a textnode (safari)
		if ( event.target.nodeType == 3 )
			event.target = event.target.parentNode;

		// Add relatedTarget, if necessary
		if ( !event.relatedTarget && event.fromElement )
			event.relatedTarget = event.fromElement == event.target ? event.toElement : event.fromElement;

		// Calculate pageX/Y if missing and clientX/Y available
		if ( event.pageX == null && event.clientX != null ) {
			var doc = document.documentElement, body = document.body;
			event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc.clientLeft || 0);
			event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc.clientTop || 0);
		}

		// Add which for key events
		if ( !event.which && ((event.charCode || event.charCode === 0) ? event.charCode : event.keyCode) )
			event.which = event.charCode || event.keyCode;

		// Add metaKey to non-Mac browsers (use ctrl for PC's and Meta for Macs)
		if ( !event.metaKey && event.ctrlKey )
			event.metaKey = event.ctrlKey;

		// Add which for click: 1 == left; 2 == middle; 3 == right
		// Note: button is not normalized, so don't use it
		if ( !event.which && event.button )
			event.which = (event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( event.button & 4 ? 2 : 0 ) ));

		return event;
	},

	proxy: function( fn, proxy ){
		proxy = proxy || function(){ return fn.apply(this, arguments); };
		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || proxy.guid || this.guid++;
		// So proxy can be declared as an argument
		return proxy;
	},

	special: {
		ready: {
			// Make sure the ready event is setup
			setup: bindReady,
			teardown: function() {}
		}
	},
	
	specialAll: {
		live: {
			setup: function( selector, namespaces ){
				jQuery.event.add( this, namespaces[0], liveHandler );
			},
			teardown:  function( namespaces ){
				if ( namespaces.length ) {
					var remove = 0, name = RegExp("(^|\\.)" + namespaces[0] + "(\\.|$)");
					
					jQuery.each( (jQuery.data(this, "events").live || {}), function(){
						if ( name.test(this.type) )
							remove++;
					});
					
					if ( remove < 1 )
						jQuery.event.remove( this, namespaces[0], liveHandler );
				}
			}
		}
	}
};

jQuery.Event = function( src ){
	// Allow instantiation without the 'new' keyword
	if( !this.preventDefault )
		return new jQuery.Event(src);
	
	// Event object
	if( src && src.type ){
		this.originalEvent = src;
		this.type = src.type;
	// Event type
	}else
		this.type = src;

	// timeStamp is buggy for some events on Firefox(#3843)
	// So we won't rely on the native value
	this.timeStamp = now();
	
	// Mark it as fixed
	this[expando] = true;
};

function returnFalse(){
	return false;
}
function returnTrue(){
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if( !e )
			return;
		// if preventDefault exists run it on the original event
		if (e.preventDefault)
			e.preventDefault();
		// otherwise set the returnValue property of the original event to false (IE)
		e.returnValue = false;
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if( !e )
			return;
		// if stopPropagation exists run it on the original event
		if (e.stopPropagation)
			e.stopPropagation();
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation:function(){
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};
// Checks if an event happened on an element within another element
// Used in jQuery.event.special.mouseenter and mouseleave handlers
var withinElement = function(event) {
	// Check if mouse(over|out) are still within the same parent element
	var parent = event.relatedTarget;
	// Traverse up the tree
	while ( parent && parent != this )
		try { parent = parent.parentNode; }
		catch(e) { parent = this; }
	
	if( parent != this ){
		// set the correct event type
		event.type = event.data;
		// handle event if we actually just moused on to a non sub-element
		jQuery.event.handle.apply( this, arguments );
	}
};
	
jQuery.each({ 
	mouseover: 'mouseenter', 
	mouseout: 'mouseleave'
}, function( orig, fix ){
	jQuery.event.special[ fix ] = {
		setup: function(){
			jQuery.event.add( this, orig, withinElement, fix );
		},
		teardown: function(){
			jQuery.event.remove( this, orig, withinElement );
		}
	};			   
});

jQuery.fn.extend({
	bind: function( type, data, fn ) {
		return type == "unload" ? this.one(type, data, fn) : this.each(function(){
			jQuery.event.add( this, type, fn || data, fn && data );
		});
	},

	one: function( type, data, fn ) {
		var one = jQuery.event.proxy( fn || data, function(event) {
			jQuery(this).unbind(event, one);
			return (fn || data).apply( this, arguments );
		});
		return this.each(function(){
			jQuery.event.add( this, type, one, fn && data);
		});
	},

	unbind: function( type, fn ) {
		return this.each(function(){
			jQuery.event.remove( this, type, fn );
		});
	},

	trigger: function( type, data ) {
		return this.each(function(){
			jQuery.event.trigger( type, data, this );
		});
	},

	triggerHandler: function( type, data ) {
		if( this[0] ){
			var event = jQuery.Event(type);
			event.preventDefault();
			event.stopPropagation();
			jQuery.event.trigger( event, data, this[0] );
			return event.result;
		}		
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments, i = 1;

		// link all the functions, so any of them can unbind this click handler
		while( i < args.length )
			jQuery.event.proxy( fn, args[i++] );

		return this.click( jQuery.event.proxy( fn, function(event) {
			// Figure out which function to execute
			this.lastToggle = ( this.lastToggle || 0 ) % i;

			// Make sure that clicks stop
			event.preventDefault();

			// and execute the function
			return args[ this.lastToggle++ ].apply( this, arguments ) || false;
		}));
	},

	hover: function(fnOver, fnOut) {
		return this.mouseenter(fnOver).mouseleave(fnOut);
	},

	ready: function(fn) {
		// Attach the listeners
		bindReady();

		// If the DOM is already ready
		if ( jQuery.isReady )
			// Execute the function immediately
			fn.call( document, jQuery );

		// Otherwise, remember the function for later
		else
			// Add the function to the wait list
			jQuery.readyList.push( fn );

		return this;
	},
	
	live: function( type, fn ){
		var proxy = jQuery.event.proxy( fn );
		proxy.guid += this.selector + type;

		jQuery(document).bind( liveConvert(type, this.selector), this.selector, proxy );

		return this;
	},
	
	die: function( type, fn ){
		jQuery(document).unbind( liveConvert(type, this.selector), fn ? { guid: fn.guid + this.selector + type } : null );
		return this;
	}
});

function liveHandler( event ){
	var check = RegExp("(^|\\.)" + event.type + "(\\.|$)"),
		stop = true,
		elems = [];

	jQuery.each(jQuery.data(this, "events").live || [], function(i, fn){
		if ( check.test(fn.type) ) {
			var elem = jQuery(event.target).closest(fn.data)[0];
			if ( elem )
				elems.push({ elem: elem, fn: fn });
		}
	});

	elems.sort(function(a,b) {
		return jQuery.data(a.elem, "closest") - jQuery.data(b.elem, "closest");
	});
	
	jQuery.each(elems, function(){
		if ( this.fn.call(this.elem, event, this.fn.data) === false )
			return (stop = false);
	});

	return stop;
}

function liveConvert(type, selector){
	return ["live", type, selector.replace(/\./g, "`").replace(/ /g, "|")].join(".");
}

jQuery.extend({
	isReady: false,
	readyList: [],
	// Handle when the DOM is ready
	ready: function() {
		// Make sure that the DOM is not already loaded
		if ( !jQuery.isReady ) {
			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If there are functions bound, to execute
			if ( jQuery.readyList ) {
				// Execute all of them
				jQuery.each( jQuery.readyList, function(){
					this.call( document, jQuery );
				});

				// Reset the list of functions
				jQuery.readyList = null;
			}

			// Trigger any bound ready events
			jQuery(document).triggerHandler("ready");
		}
	}
});

var readyBound = false;

function bindReady(){
	if ( readyBound ) return;
	readyBound = true;

	// Mozilla, Opera and webkit nightlies currently support this event
	if ( document.addEventListener ) {
		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", function(){
			document.removeEventListener( "DOMContentLoaded", arguments.callee, false );
			jQuery.ready();
		}, false );

	// If IE event model is used
	} else if ( document.attachEvent ) {
		// ensure firing before onload,
		// maybe late but safe also for iframes
		document.attachEvent("onreadystatechange", function(){
			if ( document.readyState === "complete" ) {
				document.detachEvent( "onreadystatechange", arguments.callee );
				jQuery.ready();
			}
		});

		// If IE and not an iframe
		// continually check to see if the document is ready
		if ( document.documentElement.doScroll && window == window.top ) (function(){
			if ( jQuery.isReady ) return;

			try {
				// If IE is used, use the trick by Diego Perini
				// http://javascript.nwbox.com/IEContentLoaded/
				document.documentElement.doScroll("left");
			} catch( error ) {
				setTimeout( arguments.callee, 0 );
				return;
			}

			// and execute any waiting functions
			jQuery.ready();
		})();
	}

	// A fallback to window.onload, that will always work
	jQuery.event.add( window, "load", jQuery.ready );
}

jQuery.each( ("blur,focus,load,resize,scroll,unload,click,dblclick," +
	"mousedown,mouseup,mousemove,mouseover,mouseout,mouseenter,mouseleave," +
	"change,select,submit,keydown,keypress,keyup,error").split(","), function(i, name){

	// Handle event binding
	jQuery.fn[name] = function(fn){
		return fn ? this.bind(name, fn) : this.trigger(name);
	};
});

// Prevent memory leaks in IE
// And prevent errors on refresh with events like mouseover in other browsers
// Window isn't included so as not to unbind existing unload events
jQuery( window ).bind( 'unload', function(){ 
	for ( var id in jQuery.cache )
		// Skip the window
		if ( id != 1 && jQuery.cache[ id ].handle )
			jQuery.event.remove( jQuery.cache[ id ].handle.elem );
}); 
(function(){

	jQuery.support = {};

	var root = document.documentElement,
		script = document.createElement("script"),
		div = document.createElement("div"),
		id = "script" + (new Date).getTime();

	//div.style.display = "none";
	div.innerHTML = '   <link/><table></table><a href="/a" style="color:red;float:left;opacity:.5;">a</a><select><option>text</option></select><object><param/></object>';

	var all = div.getElementsByTagName("*"),
		a = div.getElementsByTagName("a")[0];

	// Can't get basic test support
	if ( !all || !all.length || !a ) {
		return;
	}

	jQuery.support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType == 3,
		
		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,
		
		// Make sure that you can get all elements in an <object> element
		// IE 7 always returns no results
		objectAll: !!div.getElementsByTagName("object")[0]
			.getElementsByTagName("*").length,
		
		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,
		
		// Get the style information from getAttribute
		// (IE uses .cssText insted)
		style: /red/.test( a.getAttribute("style") ),
		
		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",
		
		// Make sure that element opacity exists
		// (IE uses filter instead)
		opacity: a.style.opacity === "0.5",
		
		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Will be defined later
		scriptEval: false,
		noCloneEvent: true,
		boxModel: null
	};
	
	script.type = "text/javascript";
	try {
		script.appendChild( document.createTextNode( "window." + id + "=1;" ) );
	} catch(e){}

	root.insertBefore( script, root.firstChild );
	
	// Make sure that the execution of code works by injecting a script
	// tag with appendChild/createTextNode
	// (IE doesn't support this, fails, and uses .text instead)
	if ( window[ id ] ) {
		jQuery.support.scriptEval = true;
		delete window[ id ];
	}

	root.removeChild( script );

	if ( div.attachEvent && div.fireEvent ) {
		div.attachEvent("onclick", function(){
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			jQuery.support.noCloneEvent = false;
			div.detachEvent("onclick", arguments.callee);
		});
		div.cloneNode(true).fireEvent("onclick");
	}

	// Figure out if the W3C box model works as expected
	// document.body must exist before we can do this
	jQuery(function(){
		var div = document.createElement("div");
		div.style.width = div.style.paddingLeft = "1px";

		document.body.appendChild( div );
		jQuery.boxModel = jQuery.support.boxModel = div.offsetWidth === 2;
		document.body.removeChild( div ).style.display = 'none';
	});
})();

var styleFloat = jQuery.support.cssFloat ? "cssFloat" : "styleFloat";

jQuery.props = {
	"for": "htmlFor",
	"class": "className",
	"float": styleFloat,
	cssFloat: styleFloat,
	styleFloat: styleFloat,
	readonly: "readOnly",
	maxlength: "maxLength",
	cellspacing: "cellSpacing",
	rowspan: "rowSpan",
	tabindex: "tabIndex"
};
jQuery.fn.extend({
	// Keep a copy of the old load
	_load: jQuery.fn.load,

	load: function( url, params, callback ) {
		if ( typeof url !== "string" )
			return this._load( url );

		var off = url.indexOf(" ");
		if ( off >= 0 ) {
			var selector = url.slice(off, url.length);
			url = url.slice(0, off);
		}

		// Default to a GET request
		var type = "GET";

		// If the second parameter was provided
		if ( params )
			// If it's a function
			if ( jQuery.isFunction( params ) ) {
				// We assume that it's the callback
				callback = params;
				params = null;

			// Otherwise, build a param string
			} else if( typeof params === "object" ) {
				params = jQuery.param( params );
				type = "POST";
			}

		var self = this;

		// Request the remote document
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			complete: function(res, status){
				// If successful, inject the HTML into all the matched elements
				if ( status == "success" || status == "notmodified" )
					// See if a selector was specified
					self.html( selector ?
						// Create a dummy div to hold the results
						jQuery("<div/>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(res.responseText.replace(/<script(.|\s)*?\/script>/g, ""))

							// Locate the specified elements
							.find(selector) :

						// If not, just inject the full result
						res.responseText );

				if( callback )
					self.each( callback, [res.responseText, status, res] );
			}
		});
		return this;
	},

	serialize: function() {
		return jQuery.param(this.serializeArray());
	},
	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray(this.elements) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				(this.checked || /select|textarea/i.test(this.nodeName) ||
					/text|hidden|password|search/i.test(this.type));
		})
		.map(function(i, elem){
			var val = jQuery(this).val();
			return val == null ? null :
				jQuery.isArray(val) ?
					jQuery.map( val, function(val, i){
						return {name: elem.name, value: val};
					}) :
					{name: elem.name, value: val};
		}).get();
	}
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart,ajaxStop,ajaxComplete,ajaxError,ajaxSuccess,ajaxSend".split(","), function(i,o){
	jQuery.fn[o] = function(f){
		return this.bind(o, f);
	};
});

var jsc = now();

jQuery.extend({
  
	get: function( url, data, callback, type ) {
		// shift arguments if data argument was ommited
		if ( jQuery.isFunction( data ) ) {
			callback = data;
			data = null;
		}

		return jQuery.ajax({
			type: "GET",
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	},

	getScript: function( url, callback ) {
		return jQuery.get(url, null, callback, "script");
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get(url, data, callback, "json");
	},

	post: function( url, data, callback, type ) {
		if ( jQuery.isFunction( data ) ) {
			callback = data;
			data = {};
		}

		return jQuery.ajax({
			type: "POST",
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	},

	ajaxSetup: function( settings ) {
		jQuery.extend( jQuery.ajaxSettings, settings );
	},

	ajaxSettings: {
		url: location.href,
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		username: null,
		password: null,
		*/
		// Create the request object; Microsoft failed to properly
		// implement the XMLHttpRequest in IE7, so we use the ActiveXObject when it is available
		// This function can be overriden by calling jQuery.ajaxSetup
		xhr:function(){
			return window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();
		},
		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			script: "text/javascript, application/javascript",
			json: "application/json, text/javascript",
			text: "text/plain",
			_default: "*/*"
		}
	},

	// Last-Modified header cache for next request
	lastModified: {},

	ajax: function( s ) {
		// Extend the settings, but re-extend 's' so that it can be
		// checked again later (in the test suite, specifically)
		s = jQuery.extend(true, s, jQuery.extend(true, {}, jQuery.ajaxSettings, s));

		var jsonp, jsre = /=\?(&|$)/g, status, data,
			type = s.type.toUpperCase();

		// convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" )
			s.data = jQuery.param(s.data);

		// Handle JSONP Parameter Callbacks
		if ( s.dataType == "jsonp" ) {
			if ( type == "GET" ) {
				if ( !s.url.match(jsre) )
					s.url += (s.url.match(/\?/) ? "&" : "?") + (s.jsonp || "callback") + "=?";
			} else if ( !s.data || !s.data.match(jsre) )
				s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?";
			s.dataType = "json";
		}

		// Build temporary JSONP function
		if ( s.dataType == "json" && (s.data && s.data.match(jsre) || s.url.match(jsre)) ) {
			jsonp = "jsonp" + jsc++;

			// Replace the =? sequence both in the query string and the data
			if ( s.data )
				s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1");
			s.url = s.url.replace(jsre, "=" + jsonp + "$1");

			// We need to make sure
			// that a JSONP style response is executed properly
			s.dataType = "script";

			// Handle JSONP-style loading
			window[ jsonp ] = function(tmp){
				data = tmp;
				success();
				complete();
				// Garbage collect
				window[ jsonp ] = undefined;
				try{ delete window[ jsonp ]; } catch(e){}
				if ( head )
					head.removeChild( script );
			};
		}

		if ( s.dataType == "script" && s.cache == null )
			s.cache = false;

		if ( s.cache === false && type == "GET" ) {
			var ts = now();
			// try replacing _= if it is there
			var ret = s.url.replace(/(\?|&)_=.*?(&|$)/, "$1_=" + ts + "$2");
			// if nothing was replaced, add timestamp to the end
			s.url = ret + ((ret == s.url) ? (s.url.match(/\?/) ? "&" : "?") + "_=" + ts : "");
		}

		// If data is available, append data to url for get requests
		if ( s.data && type == "GET" ) {
			s.url += (s.url.match(/\?/) ? "&" : "?") + s.data;

			// IE likes to send both get and post data, prevent this
			s.data = null;
		}

		// Watch for a new set of requests
		if ( s.global && ! jQuery.active++ )
			jQuery.event.trigger( "ajaxStart" );

		// Matches an absolute URL, and saves the domain
		var parts = /^(\w+:)?\/\/([^\/?#]+)/.exec( s.url );

		// If we're requesting a remote document
		// and trying to load JSON or Script with a GET
		if ( s.dataType == "script" && type == "GET" && parts
			&& ( parts[1] && parts[1] != location.protocol || parts[2] != location.host )){

			var head = document.getElementsByTagName("head")[0];
			var script = document.createElement("script");
			script.src = s.url;
			if (s.scriptCharset)
				script.charset = s.scriptCharset;

			// Handle Script loading
			if ( !jsonp ) {
				var done = false;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function(){
					if ( !done && (!this.readyState ||
							this.readyState == "loaded" || this.readyState == "complete") ) {
						done = true;
						success();
						complete();

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;
						head.removeChild( script );
					}
				};
			}

			head.appendChild(script);

			// We handle everything using the script element injection
			return undefined;
		}

		var requestDone = false;

		// Create the request object
		var xhr = s.xhr();

		// Open the socket
		// Passing null username, generates a login popup on Opera (#2865)
		if( s.username )
			xhr.open(type, s.url, s.async, s.username, s.password);
		else
			xhr.open(type, s.url, s.async);

		// Need an extra try/catch for cross domain requests in Firefox 3
		try {
			// Set the correct header, if data is being sent
			if ( s.data )
				xhr.setRequestHeader("Content-Type", s.contentType);

			// Set the If-Modified-Since header, if ifModified mode.
			if ( s.ifModified )
				xhr.setRequestHeader("If-Modified-Since",
					jQuery.lastModified[s.url] || "Thu, 01 Jan 1970 00:00:00 GMT" );

			// Set header so the called script knows that it's an XMLHttpRequest
			xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");

			// Set the Accepts header for the server, depending on the dataType
			xhr.setRequestHeader("Accept", s.dataType && s.accepts[ s.dataType ] ?
				s.accepts[ s.dataType ] + ", */*" :
				s.accepts._default );
		} catch(e){}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && s.beforeSend(xhr, s) === false ) {
			// Handle the global AJAX counter
			if ( s.global && ! --jQuery.active )
				jQuery.event.trigger( "ajaxStop" );
			// close opended socket
			xhr.abort();
			return false;
		}

		if ( s.global )
			jQuery.event.trigger("ajaxSend", [xhr, s]);

		// Wait for a response to come back
		var onreadystatechange = function(isTimeout){
			// The request was aborted, clear the interval and decrement jQuery.active
			if (xhr.readyState == 0) {
				if (ival) {
					// clear poll interval
					clearInterval(ival);
					ival = null;
					// Handle the global AJAX counter
					if ( s.global && ! --jQuery.active )
						jQuery.event.trigger( "ajaxStop" );
				}
			// The transfer is complete and the data is available, or the request timed out
			} else if ( !requestDone && xhr && (xhr.readyState == 4 || isTimeout == "timeout") ) {
				requestDone = true;

				// clear poll interval
				if (ival) {
					clearInterval(ival);
					ival = null;
				}

				status = isTimeout == "timeout" ? "timeout" :
					!jQuery.httpSuccess( xhr ) ? "error" :
					s.ifModified && jQuery.httpNotModified( xhr, s.url ) ? "notmodified" :
					"success";

				if ( status == "success" ) {
					// Watch for, and catch, XML document parse errors
					try {
						// process the data (runs the xml through httpData regardless of callback)
						data = jQuery.httpData( xhr, s.dataType, s );
					} catch(e) {
						status = "parsererror";
					}
				}

				// Make sure that the request was successful or notmodified
				if ( status == "success" ) {
					// Cache Last-Modified header, if ifModified mode.
					var modRes;
					try {
						modRes = xhr.getResponseHeader("Last-Modified");
					} catch(e) {} // swallow exception thrown by FF if header is not available

					if ( s.ifModified && modRes )
						jQuery.lastModified[s.url] = modRes;

					// JSONP handles its own success callback
					if ( !jsonp )
						success();
				} else
					jQuery.handleError(s, xhr, status);

				// Fire the complete handlers
				complete();

				if ( isTimeout )
					xhr.abort();

				// Stop memory leaks
				if ( s.async )
					xhr = null;
			}
		};

		if ( s.async ) {
			// don't attach the handler to the request, just poll it instead
			var ival = setInterval(onreadystatechange, 13);

			// Timeout checker
			if ( s.timeout > 0 )
				setTimeout(function(){
					// Check to see if the request is still happening
					if ( xhr && !requestDone )
						onreadystatechange( "timeout" );
				}, s.timeout);
		}

		// Send the data
		try {
			xhr.send(s.data);
		} catch(e) {
			jQuery.handleError(s, xhr, null, e);
		}

		// firefox 1.5 doesn't fire statechange for sync requests
		if ( !s.async )
			onreadystatechange();

		function success(){
			// If a local callback was specified, fire it and pass it the data
			if ( s.success )
				s.success( data, status );

			// Fire the global callback
			if ( s.global )
				jQuery.event.trigger( "ajaxSuccess", [xhr, s] );
		}

		function complete(){
			// Process result
			if ( s.complete )
				s.complete(xhr, status);

			// The request was completed
			if ( s.global )
				jQuery.event.trigger( "ajaxComplete", [xhr, s] );

			// Handle the global AJAX counter
			if ( s.global && ! --jQuery.active )
				jQuery.event.trigger( "ajaxStop" );
		}

		// return XMLHttpRequest to allow aborting the request etc.
		return xhr;
	},

	handleError: function( s, xhr, status, e ) {
		// If a local callback was specified, fire it
		if ( s.error ) s.error( xhr, status, e );

		// Fire the global callback
		if ( s.global )
			jQuery.event.trigger( "ajaxError", [xhr, s, e] );
	},

	// Counter for holding the number of active queries
	active: 0,

	// Determines if an XMLHttpRequest was successful or not
	httpSuccess: function( xhr ) {
		try {
			// IE error sometimes returns 1223 when it should be 204 so treat it as success, see #1450
			return !xhr.status && location.protocol == "file:" ||
				( xhr.status >= 200 && xhr.status < 300 ) || xhr.status == 304 || xhr.status == 1223;
		} catch(e){}
		return false;
	},

	// Determines if an XMLHttpRequest returns NotModified
	httpNotModified: function( xhr, url ) {
		try {
			var xhrRes = xhr.getResponseHeader("Last-Modified");

			// Firefox always returns 200. check Last-Modified date
			return xhr.status == 304 || xhrRes == jQuery.lastModified[url];
		} catch(e){}
		return false;
	},

	httpData: function( xhr, type, s ) {
		var ct = xhr.getResponseHeader("content-type"),
			xml = type == "xml" || !type && ct && ct.indexOf("xml") >= 0,
			data = xml ? xhr.responseXML : xhr.responseText;

		if ( xml && data.documentElement.tagName == "parsererror" )
			throw "parsererror";
			
		// Allow a pre-filtering function to sanitize the response
		// s != null is checked to keep backwards compatibility
		if( s && s.dataFilter )
			data = s.dataFilter( data, type );

		// The filter can actually parse the response
		if( typeof data === "string" ){

			// If the type is "script", eval it in global context
			if ( type == "script" )
				jQuery.globalEval( data );

			// Get the JavaScript object, if JSON is used.
			if ( type == "json" )
				data = window["eval"]("(" + data + ")");
		}
		
		return data;
	},

	// Serialize an array of form elements or a set of
	// key/values into a query string
	param: function( a ) {
		var s = [ ];

		function add( key, value ){
			s[ s.length ] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
		};

		// If an array was passed in, assume that it is an array
		// of form elements
		if ( jQuery.isArray(a) || a.jquery )
			// Serialize the form elements
			jQuery.each( a, function(){
				add( this.name, this.value );
			});

		// Otherwise, assume that it's an object of key/value pairs
		else
			// Serialize the key/values
			for ( var j in a )
				// If the value is an array then the key names need to be repeated
				if ( jQuery.isArray(a[j]) )
					jQuery.each( a[j], function(){
						add( j, this );
					});
				else
					add( j, jQuery.isFunction(a[j]) ? a[j]() : a[j] );

		// Return the resulting serialization
		return s.join("&").replace(/%20/g, "+");
	}

});
var elemdisplay = {},
	timerId,
	fxAttrs = [
		// height animations
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
		// width animations
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
		// opacity animations
		[ "opacity" ]
	];

function genFx( type, num ){
	var obj = {};
	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice(0,num)), function(){
		obj[ this ] = type;
	});
	return obj;
}

jQuery.fn.extend({
	show: function(speed,callback){
		if ( speed ) {
			return this.animate( genFx("show", 3), speed, callback);
		} else {
			for ( var i = 0, l = this.length; i < l; i++ ){
				var old = jQuery.data(this[i], "olddisplay");
				
				this[i].style.display = old || "";
				
				if ( jQuery.css(this[i], "display") === "none" ) {
					var tagName = this[i].tagName, display;
					
					if ( elemdisplay[ tagName ] ) {
						display = elemdisplay[ tagName ];
					} else {
						var elem = jQuery("<" + tagName + " />").appendTo("body");
						
						display = elem.css("display");
						if ( display === "none" )
							display = "block";
						
						elem.remove();
						
						elemdisplay[ tagName ] = display;
					}
					
					jQuery.data(this[i], "olddisplay", display);
				}
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( var i = 0, l = this.length; i < l; i++ ){
				this[i].style.display = jQuery.data(this[i], "olddisplay") || "";
			}
			
			return this;
		}
	},

	hide: function(speed,callback){
		if ( speed ) {
			return this.animate( genFx("hide", 3), speed, callback);
		} else {
			for ( var i = 0, l = this.length; i < l; i++ ){
				var old = jQuery.data(this[i], "olddisplay");
				if ( !old && old !== "none" )
					jQuery.data(this[i], "olddisplay", jQuery.css(this[i], "display"));
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( var i = 0, l = this.length; i < l; i++ ){
				this[i].style.display = "none";
			}

			return this;
		}
	},

	// Save the old toggle function
	_toggle: jQuery.fn.toggle,

	toggle: function( fn, fn2 ){
		var bool = typeof fn === "boolean";

		return jQuery.isFunction(fn) && jQuery.isFunction(fn2) ?
			this._toggle.apply( this, arguments ) :
			fn == null || bool ?
				this.each(function(){
					var state = bool ? fn : jQuery(this).is(":hidden");
					jQuery(this)[ state ? "show" : "hide" ]();
				}) :
				this.animate(genFx("toggle", 3), fn, fn2);
	},

	fadeTo: function(speed,to,callback){
		return this.animate({opacity: to}, speed, callback);
	},

	animate: function( prop, speed, easing, callback ) {
		var optall = jQuery.speed(speed, easing, callback);

		return this[ optall.queue === false ? "each" : "queue" ](function(){
		
			var opt = jQuery.extend({}, optall), p,
				hidden = this.nodeType == 1 && jQuery(this).is(":hidden"),
				self = this;
	
			for ( p in prop ) {
				if ( prop[p] == "hide" && hidden || prop[p] == "show" && !hidden )
					return opt.complete.call(this);

				if ( ( p == "height" || p == "width" ) && this.style ) {
					// Store display property
					opt.display = jQuery.css(this, "display");

					// Make sure that nothing sneaks out
					opt.overflow = this.style.overflow;
				}
			}

			if ( opt.overflow != null )
				this.style.overflow = "hidden";

			opt.curAnim = jQuery.extend({}, prop);

			jQuery.each( prop, function(name, val){
				var e = new jQuery.fx( self, opt, name );

				if ( /toggle|show|hide/.test(val) )
					e[ val == "toggle" ? hidden ? "show" : "hide" : val ]( prop );
				else {
					var parts = val.toString().match(/^([+-]=)?([\d+-.]+)(.*)$/),
						start = e.cur(true) || 0;

					if ( parts ) {
						var end = parseFloat(parts[2]),
							unit = parts[3] || "px";

						// We need to compute starting value
						if ( unit != "px" ) {
							self.style[ name ] = (end || 1) + unit;
							start = ((end || 1) / e.cur(true)) * start;
							self.style[ name ] = start + unit;
						}

						// If a +=/-= token was provided, we're doing a relative animation
						if ( parts[1] )
							end = ((parts[1] == "-=" ? -1 : 1) * end) + start;

						e.custom( start, end, unit );
					} else
						e.custom( start, val, "" );
				}
			});

			// For JS strict compliance
			return true;
		});
	},

	stop: function(clearQueue, gotoEnd){
		var timers = jQuery.timers;

		if (clearQueue)
			this.queue([]);

		this.each(function(){
			// go in reverse order so anything added to the queue during the loop is ignored
			for ( var i = timers.length - 1; i >= 0; i-- )
				if ( timers[i].elem == this ) {
					if (gotoEnd)
						// force the next step to be the last
						timers[i](true);
					timers.splice(i, 1);
				}
		});

		// start the next in the queue if the last step wasn't forced
		if (!gotoEnd)
			this.dequeue();

		return this;
	}

});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show", 1),
	slideUp: genFx("hide", 1),
	slideToggle: genFx("toggle", 1),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" }
}, function( name, props ){
	jQuery.fn[ name ] = function( speed, callback ){
		return this.animate( props, speed, callback );
	};
});

jQuery.extend({

	speed: function(speed, easing, fn) {
		var opt = typeof speed === "object" ? speed : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			jQuery.fx.speeds[opt.duration] || jQuery.fx.speeds._default;

		// Queueing
		opt.old = opt.complete;
		opt.complete = function(){
			if ( opt.queue !== false )
				jQuery(this).dequeue();
			if ( jQuery.isFunction( opt.old ) )
				opt.old.call( this );
		};

		return opt;
	},

	easing: {
		linear: function( p, n, firstNum, diff ) {
			return firstNum + diff * p;
		},
		swing: function( p, n, firstNum, diff ) {
			return ((-Math.cos(p*Math.PI)/2) + 0.5) * diff + firstNum;
		}
	},

	timers: [],

	fx: function( elem, options, prop ){
		this.options = options;
		this.elem = elem;
		this.prop = prop;

		if ( !options.orig )
			options.orig = {};
	}

});

jQuery.fx.prototype = {

	// Simple function for setting a style value
	update: function(){
		if ( this.options.step )
			this.options.step.call( this.elem, this.now, this );

		(jQuery.fx.step[this.prop] || jQuery.fx.step._default)( this );

		// Set display property to block for height/width animations
		if ( ( this.prop == "height" || this.prop == "width" ) && this.elem.style )
			this.elem.style.display = "block";
	},

	// Get the current size
	cur: function(force){
		if ( this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null) )
			return this.elem[ this.prop ];

		var r = parseFloat(jQuery.css(this.elem, this.prop, force));
		return r && r > -10000 ? r : parseFloat(jQuery.curCSS(this.elem, this.prop)) || 0;
	},

	// Start an animation from one number to another
	custom: function(from, to, unit){
		this.startTime = now();
		this.start = from;
		this.end = to;
		this.unit = unit || this.unit || "px";
		this.now = this.start;
		this.pos = this.state = 0;

		var self = this;
		function t(gotoEnd){
			return self.step(gotoEnd);
		}

		t.elem = this.elem;

		if ( t() && jQuery.timers.push(t) && !timerId ) {
			timerId = setInterval(function(){
				var timers = jQuery.timers;

				for ( var i = 0; i < timers.length; i++ )
					if ( !timers[i]() )
						timers.splice(i--, 1);

				if ( !timers.length ) {
					clearInterval( timerId );
					timerId = undefined;
				}
			}, 13);
		}
	},

	// Simple 'show' function
	show: function(){
		// Remember where we started, so that we can go back to it later
		this.options.orig[this.prop] = jQuery.attr( this.elem.style, this.prop );
		this.options.show = true;

		// Begin the animation
		// Make sure that we start at a small width/height to avoid any
		// flash of content
		this.custom(this.prop == "width" || this.prop == "height" ? 1 : 0, this.cur());

		// Start by showing the element
		jQuery(this.elem).show();
	},

	// Simple 'hide' function
	hide: function(){
		// Remember where we started, so that we can go back to it later
		this.options.orig[this.prop] = jQuery.attr( this.elem.style, this.prop );
		this.options.hide = true;

		// Begin the animation
		this.custom(this.cur(), 0);
	},

	// Each step of an animation
	step: function(gotoEnd){
		var t = now();

		if ( gotoEnd || t >= this.options.duration + this.startTime ) {
			this.now = this.end;
			this.pos = this.state = 1;
			this.update();

			this.options.curAnim[ this.prop ] = true;

			var done = true;
			for ( var i in this.options.curAnim )
				if ( this.options.curAnim[i] !== true )
					done = false;

			if ( done ) {
				if ( this.options.display != null ) {
					// Reset the overflow
					this.elem.style.overflow = this.options.overflow;

					// Reset the display
					this.elem.style.display = this.options.display;
					if ( jQuery.css(this.elem, "display") == "none" )
						this.elem.style.display = "block";
				}

				// Hide the element if the "hide" operation was done
				if ( this.options.hide )
					jQuery(this.elem).hide();

				// Reset the properties, if the item has been hidden or shown
				if ( this.options.hide || this.options.show )
					for ( var p in this.options.curAnim )
						jQuery.attr(this.elem.style, p, this.options.orig[p]);
					
				// Execute the complete function
				this.options.complete.call( this.elem );
			}

			return false;
		} else {
			var n = t - this.startTime;
			this.state = n / this.options.duration;

			// Perform the easing function, defaults to swing
			this.pos = jQuery.easing[this.options.easing || (jQuery.easing.swing ? "swing" : "linear")](this.state, n, 0, 1, this.options.duration);
			this.now = this.start + ((this.end - this.start) * this.pos);

			// Perform the next step of the animation
			this.update();
		}

		return true;
	}

};

jQuery.extend( jQuery.fx, {
	speeds:{
		slow: 600,
 		fast: 200,
 		// Default speed
 		_default: 400
	},
	step: {

		opacity: function(fx){
			jQuery.attr(fx.elem.style, "opacity", fx.now);
		},

		_default: function(fx){
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null )
				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
			else
				fx.elem[ fx.prop ] = fx.now;
		}
	}
});
if ( document.documentElement["getBoundingClientRect"] )
	jQuery.fn.offset = function() {
		if ( !this[0] ) return { top: 0, left: 0 };
		if ( this[0] === this[0].ownerDocument.body ) return jQuery.offset.bodyOffset( this[0] );
		var box  = this[0].getBoundingClientRect(), doc = this[0].ownerDocument, body = doc.body, docElem = doc.documentElement,
			clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,
			top  = box.top  + (self.pageYOffset || jQuery.boxModel && docElem.scrollTop  || body.scrollTop ) - clientTop,
			left = box.left + (self.pageXOffset || jQuery.boxModel && docElem.scrollLeft || body.scrollLeft) - clientLeft;
		return { top: top, left: left };
	};
else 
	jQuery.fn.offset = function() {
		if ( !this[0] ) return { top: 0, left: 0 };
		if ( this[0] === this[0].ownerDocument.body ) return jQuery.offset.bodyOffset( this[0] );
		jQuery.offset.initialized || jQuery.offset.initialize();

		var elem = this[0], offsetParent = elem.offsetParent, prevOffsetParent = elem,
			doc = elem.ownerDocument, computedStyle, docElem = doc.documentElement,
			body = doc.body, defaultView = doc.defaultView,
			prevComputedStyle = defaultView.getComputedStyle(elem, null),
			top = elem.offsetTop, left = elem.offsetLeft;

		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
			computedStyle = defaultView.getComputedStyle(elem, null);
			top -= elem.scrollTop, left -= elem.scrollLeft;
			if ( elem === offsetParent ) {
				top += elem.offsetTop, left += elem.offsetLeft;
				if ( jQuery.offset.doesNotAddBorder && !(jQuery.offset.doesAddBorderForTableAndCells && /^t(able|d|h)$/i.test(elem.tagName)) )
					top  += parseInt( computedStyle.borderTopWidth,  10) || 0,
					left += parseInt( computedStyle.borderLeftWidth, 10) || 0;
				prevOffsetParent = offsetParent, offsetParent = elem.offsetParent;
			}
			if ( jQuery.offset.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" )
				top  += parseInt( computedStyle.borderTopWidth,  10) || 0,
				left += parseInt( computedStyle.borderLeftWidth, 10) || 0;
			prevComputedStyle = computedStyle;
		}

		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" )
			top  += body.offsetTop,
			left += body.offsetLeft;

		if ( prevComputedStyle.position === "fixed" )
			top  += Math.max(docElem.scrollTop, body.scrollTop),
			left += Math.max(docElem.scrollLeft, body.scrollLeft);

		return { top: top, left: left };
	};

jQuery.offset = {
	initialize: function() {
		if ( this.initialized ) return;
		var body = document.body, container = document.createElement('div'), innerDiv, checkDiv, table, td, rules, prop, bodyMarginTop = body.style.marginTop,
			html = '<div style="position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;"><div></div></div><table style="position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;" cellpadding="0" cellspacing="0"><tr><td></td></tr></table>';

		rules = { position: 'absolute', top: 0, left: 0, margin: 0, border: 0, width: '1px', height: '1px', visibility: 'hidden' };
		for ( prop in rules ) container.style[prop] = rules[prop];

		container.innerHTML = html;
		body.insertBefore(container, body.firstChild);
		innerDiv = container.firstChild, checkDiv = innerDiv.firstChild, td = innerDiv.nextSibling.firstChild.firstChild;

		this.doesNotAddBorder = (checkDiv.offsetTop !== 5);
		this.doesAddBorderForTableAndCells = (td.offsetTop === 5);

		innerDiv.style.overflow = 'hidden', innerDiv.style.position = 'relative';
		this.subtractsBorderForOverflowNotVisible = (checkDiv.offsetTop === -5);

		body.style.marginTop = '1px';
		this.doesNotIncludeMarginInBodyOffset = (body.offsetTop === 0);
		body.style.marginTop = bodyMarginTop;

		body.removeChild(container);
		this.initialized = true;
	},

	bodyOffset: function(body) {
		jQuery.offset.initialized || jQuery.offset.initialize();
		var top = body.offsetTop, left = body.offsetLeft;
		if ( jQuery.offset.doesNotIncludeMarginInBodyOffset )
			top  += parseInt( jQuery.curCSS(body, 'marginTop',  true), 10 ) || 0,
			left += parseInt( jQuery.curCSS(body, 'marginLeft', true), 10 ) || 0;
		return { top: top, left: left };
	}
};


jQuery.fn.extend({
	position: function() {
		var left = 0, top = 0, results;

		if ( this[0] ) {
			// Get *real* offsetParent
			var offsetParent = this.offsetParent(),

			// Get correct offsets
			offset       = this.offset(),
			parentOffset = /^body|html$/i.test(offsetParent[0].tagName) ? { top: 0, left: 0 } : offsetParent.offset();

			// Subtract element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft 
			// are the same in Safari causing offset.left to incorrectly be 0
			offset.top  -= num( this, 'marginTop'  );
			offset.left -= num( this, 'marginLeft' );

			// Add offsetParent borders
			parentOffset.top  += num( offsetParent, 'borderTopWidth'  );
			parentOffset.left += num( offsetParent, 'borderLeftWidth' );

			// Subtract the two offsets
			results = {
				top:  offset.top  - parentOffset.top,
				left: offset.left - parentOffset.left
			};
		}

		return results;
	},

	offsetParent: function() {
		var offsetParent = this[0].offsetParent || document.body;
		while ( offsetParent && (!/^body|html$/i.test(offsetParent.tagName) && jQuery.css(offsetParent, 'position') == 'static') )
			offsetParent = offsetParent.offsetParent;
		return jQuery(offsetParent);
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( ['Left', 'Top'], function(i, name) {
	var method = 'scroll' + name;
	
	jQuery.fn[ method ] = function(val) {
		if (!this[0]) return null;

		return val !== undefined ?

			// Set the scroll offset
			this.each(function() {
				this == window || this == document ?
					window.scrollTo(
						!i ? val : jQuery(window).scrollLeft(),
						 i ? val : jQuery(window).scrollTop()
					) :
					this[ method ] = val;
			}) :

			// Return the scroll offset
			this[0] == window || this[0] == document ?
				self[ i ? 'pageYOffset' : 'pageXOffset' ] ||
					jQuery.boxModel && document.documentElement[ method ] ||
					document.body[ method ] :
				this[0][ method ];
	};
});
// Create innerHeight, innerWidth, outerHeight and outerWidth methods
jQuery.each([ "Height", "Width" ], function(i, name){

	var tl = i ? "Left"  : "Top",  // top or left
		br = i ? "Right" : "Bottom", // bottom or right
		lower = name.toLowerCase();

	// innerHeight and innerWidth
	jQuery.fn["inner" + name] = function(){
		return this[0] ?
			jQuery.css( this[0], lower, false, "padding" ) :
			null;
	};

	// outerHeight and outerWidth
	jQuery.fn["outer" + name] = function(margin) {
		return this[0] ?
			jQuery.css( this[0], lower, false, margin ? "margin" : "border" ) :
			null;
	};
	
	var type = name.toLowerCase();

	jQuery.fn[ type ] = function( size ) {
		// Get window width or height
		return this[0] == window ?
			// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode
			document.compatMode == "CSS1Compat" && document.documentElement[ "client" + name ] ||
			document.body[ "client" + name ] :

			// Get document width or height
			this[0] == document ?
				// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
				Math.max(
					document.documentElement["client" + name],
					document.body["scroll" + name], document.documentElement["scroll" + name],
					document.body["offset" + name], document.documentElement["offset" + name]
				) :

				// Get or set width or height on the element
				size === undefined ?
					// Get width or height on the element
					(this.length ? jQuery.css( this[0], type ) : null) :

					// Set the width or height on the element (default to pixels if value is unitless)
					this.css( type, typeof size === "string" ? size : size + "px" );
	};

});
})();

]]></script>
<script type="text/javascript"><![CDATA[
/* http://keith-wood.name/svg.html
   SVG for jQuery v1.4.2.
   Written by Keith Wood (kbwood{at}iinet.com.au) August 2007.
   Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and 
   MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses. 
   Please attribute the author if you use it. */

(function($) { // Hide scope, no $ conflict

/* SVG manager.
   Use the singleton instance of this class, $.svg, 
   to interact with the SVG functionality. */
function SVGManager() {
	this._settings = []; // Settings to be remembered per SVG object
	this._extensions = []; // List of SVG extensions added to SVGWrapper
		// for each entry [0] is extension name, [1] is extension class (function)
		// the function takes one parameter - the SVGWrapper instance
	this.regional = []; // Localisations, indexed by language, '' for default (English)
	this.regional[''] = {errorLoadingText: 'Error loading',
		notSupportedText: 'This browser does not support SVG'};
	this.local = this.regional['']; // Current localisation
	this._uuid = new Date().getTime();
	this._renesis = detectActiveX('RenesisX.RenesisCtrl');
}

/* Determine whether a given ActiveX control is available.
   @param  classId  (string) the ID for the ActiveX control
   @return  (boolean) true if found, false if not */
function detectActiveX(classId) {
	try {
		return !!(window.ActiveXObject && new ActiveXObject(classId));
	}
	catch (e) {
		return false;
	}
}

var PROP_NAME = 'svgwrapper';

$.extend(SVGManager.prototype, {
	/* Class name added to elements to indicate already configured with SVG. */
	markerClassName: 'hasSVG',

	/* SVG namespace. */
	svgNS: 'http://www.w3.org/2000/svg',
	/* XLink namespace. */
	xlinkNS: 'http://www.w3.org/1999/xlink',

	/* SVG wrapper class. */
	_wrapperClass: SVGWrapper,

	/* Camel-case versions of attribute names containing dashes or are reserved words. */
	_attrNames: {class_: 'class', in_: 'in',
		alignmentBaseline: 'alignment-baseline', baselineShift: 'baseline-shift',
		clipPath: 'clip-path', clipRule: 'clip-rule',
		colorInterpolation: 'color-interpolation',
		colorInterpolationFilters: 'color-interpolation-filters',
		colorRendering: 'color-rendering', dominantBaseline: 'dominant-baseline',
		enableBackground: 'enable-background', fillOpacity: 'fill-opacity',
		fillRule: 'fill-rule', floodColor: 'flood-color',
		floodOpacity: 'flood-opacity', fontFamily: 'font-family',
		fontSize: 'font-size', fontSizeAdjust: 'font-size-adjust',
		fontStretch: 'font-stretch', fontStyle: 'font-style',
		fontVariant: 'font-variant', fontWeight: 'font-weight',
		glyphOrientationHorizontal: 'glyph-orientation-horizontal',
		glyphOrientationVertical: 'glyph-orientation-vertical',
		horizAdvX: 'horiz-adv-x', horizOriginX: 'horiz-origin-x',
		imageRendering: 'image-rendering', letterSpacing: 'letter-spacing',
		lightingColor: 'lighting-color', markerEnd: 'marker-end',
		markerMid: 'marker-mid', markerStart: 'marker-start',
		stopColor: 'stop-color', stopOpacity: 'stop-opacity',
		strikethroughPosition: 'strikethrough-position',
		strikethroughThickness: 'strikethrough-thickness',
		strokeDashArray: 'stroke-dasharray', strokeDashOffset: 'stroke-dashoffset',
		strokeLineCap: 'stroke-linecap', strokeLineJoin: 'stroke-linejoin',
		strokeMiterLimit: 'stroke-miterlimit', strokeOpacity: 'stroke-opacity',
		strokeWidth: 'stroke-width', textAnchor: 'text-anchor',
		textDecoration: 'text-decoration', textRendering: 'text-rendering',
		underlinePosition: 'underline-position', underlineThickness: 'underline-thickness',
		vertAdvY: 'vert-adv-y', vertOriginY: 'vert-origin-y',
		wordSpacing: 'word-spacing', writingMode: 'writing-mode'},

	/* Add the SVG object to its container. */
	_attachSVG: function(container, settings) {
		if ($(container).hasClass(this.markerClassName)) {
			return;
		}
		if (typeof settings == 'string') {
			settings = {loadURL: settings};
		}
		else if (typeof settings == 'function') {
			settings = {onLoad: settings};
		}
		$(container).addClass(this.markerClassName);
		try {
			var svg = document.createElementNS(this.svgNS, 'svg');
			svg.setAttribute('version', '1.1');
			svg.setAttribute('width', container.clientWidth);
			svg.setAttribute('height', container.clientHeight);
			container.appendChild(svg);
			this._afterLoad(container, svg, settings);
		}
		catch (e) {
			if ($.browser.msie) {
				if (!container.id) {
					container.id = 'svg' + (this._uuid++);
				}
				this._settings[container.id] = settings;
				container.innerHTML = '<embed type="image/svg+xml" width="100%" ' +
					'height="100%" src="' + (settings.initPath || '') + 'blank.svg"/>';
			}
			else {
				container.innerHTML = '<p class="svg_error">' +
					this.local.notSupportedText + '</p>';
			}
		}
	},

	/* SVG callback after loading - register SVG root. */
	_registerSVG: function() {
		for (var i = 0; i < document.embeds.length; i++) { // Check all
			var container = document.embeds[i].parentNode;
			if (!$(container).hasClass($.svg.markerClassName) || // Not SVG
					$.data(container, PROP_NAME)) { // Already done
				continue;
			}
			var svg = null;
			try {
				svg = document.embeds[i].getSVGDocument();
			}
			catch(e) {
				setTimeout($.svg._registerSVG, 250); // Renesis takes longer to load
				return;
			}
			svg = (svg ? svg.documentElement : null);
			if (svg) {
				$.svg._afterLoad(container, svg);
			}
		}
	},

	/* Post-processing once loaded. */
	_afterLoad: function(container, svg, settings) {
		var settings = settings || this._settings[container.id];
		this._settings[container.id] = null;
		var wrapper = new this._wrapperClass(svg, container);
		$.data(container, PROP_NAME, wrapper);
		try {
			if (settings.loadURL) { // Load URL
				wrapper.load(settings.loadURL, settings);
			}
			if (settings.settings) { // Additional settings
				wrapper.configure(settings.settings);
			}
			if (settings.onLoad && !settings.loadURL) { // Onload callback
				settings.onLoad.apply(container, [wrapper]);
			}
		}
		catch (e) {
			alert(e);
		}
	},

	/* Return the SVG wrapper created for a given container.
	   @param  container  (string) selector for the container or
	                      (element) the container for the SVG object or
	                      jQuery collection - first entry is the container
	   @return  (SVGWrapper) the corresponding SVG wrapper element, or null if not attached */
	_getSVG: function(container) {
		container = (typeof container == 'string' ? $(container)[0] :
			(container.jquery ? container[0] : container));
		return $.data(container, PROP_NAME);
	},

	/* Remove the SVG functionality from a div.
	   @param  container  (element) the container for the SVG object */
	_destroySVG: function(container) {
		var $container = $(container);
		if (!$container.hasClass(this.markerClassName)) {
			return;
		}
		$container.removeClass(this.markerClassName).empty();
		$.removeData(container, PROP_NAME);
	},

	/* Extend the SVGWrapper object with an embedded class.
	   The constructor function must take a single parameter that is
	   a reference to the owning SVG root object. This allows the 
	   extension to access the basic SVG functionality.
	   @param  name      (string) the name of the SVGWrapper attribute to access the new class
	   @param  extClass  (function) the extension class constructor */
	addExtension: function(name, extClass) {
		this._extensions.push([name, extClass]);
	}
});

/* The main SVG interface, which encapsulates the SVG element.
   Obtain a reference from $().svg('get') */
function SVGWrapper(svg, container) {
	this._svg = svg; // The SVG root node
	this._container = container; // The containing div
	for (var i = 0; i < $.svg._extensions.length; i++) {
		var extension = $.svg._extensions[i];
		this[extension[0]] = new extension[1](this);
	}
}

$.extend(SVGWrapper.prototype, {

	/* Retrieve the width of the SVG object. */
	_width: function() {
		return this._container.clientWidth;
	},

	/* Retrieve the height of the SVG object. */
	_height: function() {
		return this._container.clientHeight;
	},

	/* Retrieve the root SVG element.
	   @return  the top-level SVG element */
	root: function() {
		return this._svg;
	},

	/* Configure the SVG root.
	   @param  settings  (object) additional settings for the root
	   @param  clear     (boolean) true to remove existing attributes first,
	                     false to add to what is already there (optional)
	   @return  (SVGWrapper) this root */
	configure: function(settings, clear) {
		if (clear) {
			for (var i = this._svg.attributes.length - 1; i >= 0; i--) {
				var attr = this._svg.attributes.item(i);
				if (!(attr.nodeName == 'onload' || attr.nodeName == 'version' || 
						attr.nodeName.substring(0, 5) == 'xmlns')) {
					this._svg.attributes.removeNamedItem(attr.nodeName);
				}
			}
		}
		for (var attrName in settings) {
			this._svg.setAttribute(attrName, settings[attrName]);
		}
		return this;
	},

	/* Locate a specific element in the SVG document.
	   @param  id  (string) the element's identifier
	   @return  (element) the element reference, or null if not found */
	getElementById: function(id) {
		return this._svg.ownerDocument.getElementById(id);
	},

	/* Change the attributes for a SVG node.
	   @param  element   (SVG element) the node to change
	   @param  settings  (object) the new settings
	   @return  (SVGWrapper) this root */
	change: function(element, settings) {
		if (element) {
			for (var name in settings) {
				if (settings[name] == null) {
					element.removeAttribute(name);
				}
				else {
					element.setAttribute(name, settings[name]);
				}
			}
		}
		return this;
	},

	/* Check for parent being absent and adjust arguments accordingly. */
	_args: function(values, names, optSettings) {
		names.splice(0, 0, 'parent');
		names.splice(names.length, 0, 'settings');
		var args = {};
		var offset = 0;
		if (values[0] != null && (typeof values[0] != 'object' || !values[0].nodeName)) {
			args['parent'] = null;
			offset = 1;
		}
		for (var i = 0; i < values.length; i++) {
			args[names[i + offset]] = values[i];
		}
		if (optSettings) {
			$.each(optSettings, function(i, value) {
				if (typeof args[value] == 'object') {
					args.settings = args[value];
					args[value] = null;
				}
			});
		}
		return args;
	},

	/* Add a title.
	   @param  parent    (element) the parent node for the new title (optional)
	   @param  text      (string) the text of the title
	   @param  settings  (object) additional settings for the title (optional)
	   @return  (element) the new title node */
	title: function(parent, text, settings) {
		var args = this._args(arguments, ['text']);
		var node = this._makeNode(args.parent, 'title', args.settings || {});
		node.appendChild(this._svg.ownerDocument.createTextNode(args.text));
		return node;
	},

	/* Add a description.
	   @param  parent    (element) the parent node for the new description (optional)
	   @param  text      (string) the text of the description
	   @param  settings  (object) additional settings for the description (optional)
	   @return  (element) the new description node */
	describe: function(parent, text, settings) {
		var args = this._args(arguments, ['text']);
		var node = this._makeNode(args.parent, 'desc', args.settings || {});
		node.appendChild(this._svg.ownerDocument.createTextNode(args.text));
		return node;
	},

	/* Add a definitions node.
	   @param  parent    (element) the parent node for the new definitions (optional)
	   @param  id        (string) the ID of this definitions (optional)
	   @param  settings  (object) additional settings for the definitions (optional)
	   @return  (element) the new definitions node */
	defs: function(parent, id, settings) {
		var args = this._args(arguments, ['id'], ['id']);
		return this._makeNode(args.parent, 'defs', $.extend(
			(args.id ? {id: args.id} : {}), args.settings || {}));
	},

	/* Add a symbol definition.
	   @param  parent    (element) the parent node for the new symbol (optional)
	   @param  id        (string) the ID of this symbol
	   @param  x1        (number) the left coordinate for this symbol
	   @param  y1        (number) the top coordinate for this symbol
	   @param  x2        (number) the right coordinate for this symbol
	   @param  y2        (number) the bottom coordinate for this symbol
	   @param  settings  (object) additional settings for the symbol (optional)
	   @return  (element) the new symbol node */
	symbol: function(parent, id, x1, y1, x2, y2, settings) {
		var args = this._args(arguments, ['id', 'x1', 'y1', 'x2', 'y2']);
		return this._makeNode(args.parent, 'symbol', $.extend(
			{id: args.id, viewBox: args.x1 + ' ' + args.y1 + ' ' + args.x2 + ' ' + args.y2},
			args.settings || {}));
	},

	/* Add a marker definition.
	   @param  parent    (element) the parent node for the new marker (optional)
	   @param  id        (string) the ID of this marker
	   @param  refX      (number) the x-coordinate for the reference point
	   @param  refY      (number) the y-coordinate for the reference point
	   @param  mWidth    (number) the marker viewport width
	   @param  mHeight   (number) the marker viewport height
	   @param  orient    (string or int) 'auto' or angle (degrees) (optional)
	   @param  settings  (object) additional settings for the marker (optional)
	   @return  (element) the new marker node */
	marker: function(parent, id, refX, refY, mWidth, mHeight, orient, settings) {
		var args = this._args(arguments, ['id', 'refX', 'refY',
			'mWidth', 'mHeight', 'orient'], ['orient']);
		return this._makeNode(args.parent, 'marker', $.extend(
			{id: args.id, refX: args.refX, refY: args.refY, markerWidth: args.mWidth, 
			markerHeight: args.mHeight, orient: args.orient || 'auto'}, args.settings || {}));
	},

	/* Add a style node.
	   @param  parent    (element) the parent node for the new node (optional)
	   @param  styles    (string) the CSS styles
	   @param  settings  (object) additional settings for the node (optional)
	   @return  (element) the new style node */
	style: function(parent, styles, settings) {
		var args = this._args(arguments, ['styles']);
		var node = this._makeNode(args.parent, 'style', $.extend(
			{type: 'text/css'}, args.settings || {}));
		node.appendChild(this._svg.ownerDocument.createTextNode(args.styles));
		if ($.browser.opera) {
			$('head').append('<style type="text/css">' + args.styles + '</style>');
		}
		return node;
	},

	/* Add a script node.
	   @param  parent    (element) the parent node for the new node (optional)
	   @param  script    (string) the JavaScript code
	   @param  type      (string) the MIME type for the code (optional, default 'text/javascript')
	   @param  settings  (object) additional settings for the node (optional)
	   @return  (element) the new script node */
	script: function(parent, script, type, settings) {
		var args = this._args(arguments, ['script', 'type'], ['type']);
		var node = this._makeNode(args.parent, 'script', $.extend(
			{type: args.type || 'text/javascript'}, args.settings || {}));
		node.appendChild(this._svg.ownerDocument.createTextNode(this._escapeXML(args.script)));
		if (!$.browser.mozilla) {
			$.globalEval(args.script);
		}
		return node;
	},

	/* Add a linear gradient definition.
	   Specify all of x1, y1, x2, y2 or none of them.
	   @param  parent    (element) the parent node for the new gradient (optional)
	   @param  id        (string) the ID for this gradient
	   @param  stops     (string[][]) the gradient stops, each entry is
	                     [0] is offset (0.0-1.0 or 0%-100%), [1] is colour, 
						 [2] is opacity (optional)
	   @param  x1        (number) the x-coordinate of the gradient start (optional)
	   @param  y1        (number) the y-coordinate of the gradient start (optional)
	   @param  x2        (number) the x-coordinate of the gradient end (optional)
	   @param  y2        (number) the y-coordinate of the gradient end (optional)
	   @param  settings  (object) additional settings for the gradient (optional)
	   @return  (element) the new gradient node */
	linearGradient: function(parent, id, stops, x1, y1, x2, y2, settings) {
		var args = this._args(arguments,
			['id', 'stops', 'x1', 'y1', 'x2', 'y2'], ['x1']);
		var sets = $.extend({id: args.id}, 
			(args.x1 != null ? {x1: args.x1, y1: args.y1, x2: args.x2, y2: args.y2} : {}));
		return this._gradient(args.parent, 'linearGradient', 
			$.extend(sets, args.settings || {}), args.stops);
	},

	/* Add a radial gradient definition.
	   Specify all of cx, cy, r, fx, fy or none of them.
	   @param  parent    (element) the parent node for the new gradient (optional)
	   @param  id        (string) the ID for this gradient
	   @param  stops     (string[][]) the gradient stops, each entry
	                     [0] is offset, [1] is colour, [2] is opacity (optional)
	   @param  cx        (number) the x-coordinate of the largest circle centre (optional)
	   @param  cy        (number) the y-coordinate of the largest circle centre (optional)
	   @param  r         (number) the radius of the largest circle (optional)
	   @param  fx        (number) the x-coordinate of the gradient focus (optional)
	   @param  fy        (number) the y-coordinate of the gradient focus (optional)
	   @param  settings  (object) additional settings for the gradient (optional)
	   @return  (element) the new gradient node */
	radialGradient: function(parent, id, stops, cx, cy, r, fx, fy, settings) {
		var args = this._args(arguments,
			['id', 'stops', 'cx', 'cy', 'r', 'fx', 'fy'], ['cx']);
		var sets = $.extend({id: args.id}, (args.cx != null ?
			{cx: args.cx, cy: args.cy, r: args.r, fx: args.fx, fy: args.fy} : {}));
		return this._gradient(args.parent, 'radialGradient', 
			$.extend(sets, args.settings || {}), args.stops);
	},

	/* Add a gradient node. */
	_gradient: function(parent, name, settings, stops) {
		var node = this._makeNode(parent, name, settings);
		for (var i = 0; i < stops.length; i++) {
			var stop = stops[i];
			this._makeNode(node, 'stop', $.extend(
				{offset: stop[0], stopColor: stop[1]}, 
				(stop[2] != null ? {stopOpacity: stop[2]} : {})));
		}
		return node;
	},

	/* Add a pattern definition.
	   Specify all of vx, vy, xwidth, vheight or none of them.
	   @param  parent    (element) the parent node for the new pattern (optional)
	   @param  id        (string) the ID for this pattern
	   @param  x         (number) the x-coordinate for the left edge of the pattern
	   @param  y         (number) the y-coordinate for the top edge of the pattern
	   @param  width     (number) the width of the pattern
	   @param  height    (number) the height of the pattern
	   @param  vx        (number) the minimum x-coordinate for view box (optional)
	   @param  vy        (number) the minimum y-coordinate for the view box (optional)
	   @param  vwidth    (number) the width of the view box (optional)
	   @param  vheight   (number) the height of the view box (optional)
	   @param  settings  (object) additional settings for the pattern (optional)
	   @return  (element) the new pattern node */
	pattern: function(parent, id, x, y, width, height, vx, vy, vwidth, vheight, settings) {
		var args = this._args(arguments, ['id', 'x', 'y', 'width', 'height',
			'vx', 'vy', 'vwidth', 'vheight'], ['vx']);
		var sets = $.extend({id: args.id, x: args.x, y: args.y,
			width: args.width, height: args.height}, (args.vx != null ?
			{viewBox: args.vx + ' ' + args.vy + ' ' + args.vwidth + ' ' + args.vheight} : {}));
		return this._makeNode(args.parent, 'pattern', $.extend(sets, args.settings || {}));
	},

	/* Add a mask definition.
	   @param  parent    (element) the parent node for the new mask (optional)
	   @param  id        (string) the ID for this mask
	   @param  x         (number) the x-coordinate for the left edge of the mask
	   @param  y         (number) the y-coordinate for the top edge of the mask
	   @param  width     (number) the width of the mask
	   @param  height    (number) the height of the mask
	   @param  settings  (object) additional settings for the mask (optional)
	   @return  (element) the new mask node */
	mask: function(parent, id, x, y, width, height, settings) {
		var args = this._args(arguments, ['id', 'x', 'y', 'width', 'height']);
		return this._makeNode(args.parent, 'mask', $.extend(
			{id: args.id, x: args.x, y: args.y, width: args.width, height: args.height},
			args.settings || {}));
	},

	/* Create a new path object.
	   @return  (SVGPath) a new path object */
	createPath: function() {
		return new SVGPath();
	},

	/* Create a new text object.
	   @return  (SVGText) a new text object */
	createText: function() {
		return new SVGText();
	},

	/* Add an embedded SVG element.
	   Specify all of vx, vy, vwidth, vheight or none of them.
	   @param  parent    (element) the parent node for the new node (optional)
	   @param  x         (number) the x-coordinate for the left edge of the node
	   @param  y         (number) the y-coordinate for the top edge of the node
	   @param  width     (number) the width of the node
	   @param  height    (number) the height of the node
	   @param  vx        (number) the minimum x-coordinate for view box (optional)
	   @param  vy        (number) the minimum y-coordinate for the view box (optional)
	   @param  vwidth    (number) the width of the view box (optional)
	   @param  vheight   (number) the height of the view box (optional)
	   @param  settings  (object) additional settings for the node (optional)
	   @return  (element) the new node */
	svg: function(parent, x, y, width, height, vx, vy, vwidth, vheight, settings) {
		var args = this._args(arguments, ['x', 'y', 'width', 'height',
			'vx', 'vy', 'vwidth', 'vheight'], ['vx']);
		var sets = $.extend({x: args.x, y: args.y, width: args.width, height: args.height}, 
			(args.vx != null ? {viewBox: args.vx + ' ' + args.vy + ' ' +
			args.vwidth + ' ' + args.vheight} : {}));
		return this._makeNode(args.parent, 'svg', $.extend(sets, args.settings || {}));
	},

	/* Create a group.
	   @param  parent    (element) the parent node for the new group (optional)
	   @param  id        (string) the ID of this group (optional)
	   @param  settings  (object) additional settings for the group (optional)
	   @return  (element) the new group node */
	group: function(parent, id, settings) {
		var args = this._args(arguments, ['id'], ['id']);
		return this._makeNode(args.parent, 'g', $.extend({id: args.id}, args.settings || {}));
	},

	/* Add a usage reference.
	   Specify all of x, y, width, height or none of them.
	   @param  parent    (element) the parent node for the new node (optional)
	   @param  x         (number) the x-coordinate for the left edge of the node (optional)
	   @param  y         (number) the y-coordinate for the top edge of the node (optional)
	   @param  width     (number) the width of the node (optional)
	   @param  height    (number) the height of the node (optional)
	   @param  ref       (string) the ID of the definition node
	   @param  settings  (object) additional settings for the node (optional)
	   @return  (element) the new node */
	use: function(parent, x, y, width, height, ref, settings) {
		var args = this._args(arguments, ['x', 'y', 'width', 'height', 'ref']);
		if (typeof args.x == 'string') {
			args.ref = args.x;
			args.settings = args.y;
			args.x = args.y = args.width = args.height = null;
		}
		var node = this._makeNode(args.parent, 'use', $.extend(
			{x: args.x, y: args.y, width: args.width, height: args.height},
			args.settings || {}));
		node.setAttributeNS($.svg.xlinkNS, 'href', args.ref);
		return node;
	},

	/* Add a link, which applies to all child elements.
	   @param  parent    (element) the parent node for the new link (optional)
	   @param  ref       (string) the target URL
	   @param  settings  (object) additional settings for the link (optional)
	   @return  (element) the new link node */
	link: function(parent, ref, settings) {
		var args = this._args(arguments, ['ref']);
		var node = this._makeNode(args.parent, 'a', args.settings);
		node.setAttributeNS($.svg.xlinkNS, 'href', args.ref);
		return node;
	},

	/* Add an image.
	   @param  parent    (element) the parent node for the new image (optional)
	   @param  x         (number) the x-coordinate for the left edge of the image
	   @param  y         (number) the y-coordinate for the top edge of the image
	   @param  width     (number) the width of the image
	   @param  height    (number) the height of the image
	   @param  ref       (string) the path to the image
	   @param  settings  (object) additional settings for the image (optional)
	   @return  (element) the new image node */
	image: function(parent, x, y, width, height, ref, settings) {
		var args = this._args(arguments, ['x', 'y', 'width', 'height', 'ref']);
		var node = this._makeNode(args.parent, 'image', $.extend(
			{x: args.x, y: args.y, width: args.width, height: args.height},
			args.settings || {}));
		node.setAttributeNS($.svg.xlinkNS, 'href', args.ref);
		return node;
	},

	/* Draw a path.
	   @param  parent    (element) the parent node for the new shape (optional)
	   @param  path      (string or SVGPath) the path to draw
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	path: function(parent, path, settings) {
		var args = this._args(arguments, ['path']);
		return this._makeNode(args.parent, 'path', $.extend(
			{d: (args.path.path ? args.path.path() : args.path)}, args.settings || {}));
	},

	/* Draw a rectangle.
	   Specify both of rx and ry or neither.
	   @param  parent    (element) the parent node for the new shape (optional)
	   @param  x         (number) the x-coordinate for the left edge of the rectangle
	   @param  y         (number) the y-coordinate for the top edge of the rectangle
	   @param  width     (number) the width of the rectangle
	   @param  height    (number) the height of the rectangle
	   @param  rx        (number) the x-radius of the ellipse for the rounded corners (optional)
	   @param  ry        (number) the y-radius of the ellipse for the rounded corners (optional)
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	rect: function(parent, x, y, width, height, rx, ry, settings) {
		var args = this._args(arguments, ['x', 'y', 'width', 'height', 'rx', 'ry'], ['rx']);
		return this._makeNode(args.parent, 'rect', $.extend(
			{x: args.x, y: args.y, width: args.width, height: args.height},
			(args.rx ? {rx: args.rx, ry: args.ry} : {}), args.settings || {}));
	},

	/* Draw a circle.
	   @param  parent    (element) the parent node for the new shape (optional)
	   @param  cx        (number) the x-coordinate for the centre of the circle
	   @param  cy        (number) the y-coordinate for the centre of the circle
	   @param  r         (number) the radius of the circle
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	circle: function(parent, cx, cy, r, settings) {
		var args = this._args(arguments, ['cx', 'cy', 'r']);
		return this._makeNode(args.parent, 'circle', $.extend(
			{cx: args.cx, cy: args.cy, r: args.r}, args.settings || {}));
	},

	/* Draw an ellipse.
	   @param  parent    (element) the parent node for the new shape (optional)
	   @param  cx        (number) the x-coordinate for the centre of the ellipse
	   @param  cy        (number) the y-coordinate for the centre of the ellipse
	   @param  rx        (number) the x-radius of the ellipse
	   @param  ry        (number) the y-radius of the ellipse
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	ellipse: function(parent, cx, cy, rx, ry, settings) {
		var args = this._args(arguments, ['cx', 'cy', 'rx', 'ry']);
		return this._makeNode(args.parent, 'ellipse', $.extend(
			{cx: args.cx, cy: args.cy, rx: args.rx, ry: args.ry}, args.settings || {}));
	},

	/* Draw a line.
	   @param  parent    (element) the parent node for the new shape (optional)
	   @param  x1        (number) the x-coordinate for the start of the line
	   @param  y1        (number) the y-coordinate for the start of the line
	   @param  x2        (number) the x-coordinate for the end of the line
	   @param  y2        (number) the y-coordinate for the end of the line
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	line: function(parent, x1, y1, x2, y2, settings) {
		var args = this._args(arguments, ['x1', 'y1', 'x2', 'y2']);
		return this._makeNode(args.parent, 'line', $.extend(
			{x1: args.x1, y1: args.y1, x2: args.x2, y2: args.y2}, args.settings || {}));
	},

	/* Draw a polygonal line.
	   @param  parent    (element) the parent node for the new shape (optional)
	   @param  points    (number[][]) the x-/y-coordinates for the points on the line
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	polyline: function(parent, points, settings) {
		var args = this._args(arguments, ['points']);
		return this._poly(args.parent, 'polyline', args.points, args.settings);
	},

	/* Draw a polygonal shape.
	   @param  parent    (element) the parent node for the new shape (optional)
	   @param  points    (number[][]) the x-/y-coordinates for the points on the shape
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	polygon: function(parent, points, settings) {
		var args = this._args(arguments, ['points']);
		return this._poly(args.parent, 'polygon', args.points, args.settings);
	},

	/* Draw a polygonal line or shape. */
	_poly: function(parent, name, points, settings) {
		var ps = '';
		for (var i = 0; i < points.length; i++) {
			ps += points[i].join() + ' ';
		}
		return this._makeNode(parent, name, $.extend(
			{points: $.trim(ps)}, settings || {}));
	},

	/* Draw text.
	   Specify both of x and y or neither of them.
	   @param  parent    (element) the parent node for the text (optional)
	   @param  x         (number or number[]) the x-coordinate(s) for the text (optional)
	   @param  y         (number or number[]) the y-coordinate(s) for the text (optional)
	   @param  value     (string) the text content or
	                     (SVGText) text with spans and references
	   @param  settings  (object) additional settings for the text (optional)
	   @return  (element) the new text node */
	text: function(parent, x, y, value, settings) {
		var args = this._args(arguments, ['x', 'y', 'value']);
		if (typeof args.x == 'string' && arguments.length < 4) {
			args.value = args.x;
			args.settings = args.y;
			args.x = args.y = null;
		}
		return this._text(args.parent, 'text', args.value, $.extend(
			{x: (args.x && isArray(args.x) ? args.x.join(' ') : args.x),
			y: (args.y && isArray(args.y) ? args.y.join(' ') : args.y)}, 
			args.settings || {}));
	},

	/* Draw text along a path.
	   @param  parent    (element) the parent node for the text (optional)
	   @param  path      (string) the ID of the path
	   @param  value     (string) the text content or
	                     (SVGText) text with spans and references
	   @param  settings  (object) additional settings for the text (optional)
	   @return  (element) the new text node */
	textpath: function(parent, path, value, settings) {
		var args = this._args(arguments, ['path', 'value']);
		var node = this._text(args.parent, 'textPath', args.value, args.settings || {});
		node.setAttributeNS($.svg.xlinkNS, 'href', args.path);
		return node;
	},

	/* Draw text. */
	_text: function(parent, name, value, settings) {
		var node = this._makeNode(parent, name, settings);
		if (typeof value == 'string') {
			node.appendChild(node.ownerDocument.createTextNode(value));
		}
		else {
			for (var i = 0; i < value._parts.length; i++) {
				var part = value._parts[i];
				if (part[0] == 'tspan') {
					var child = this._makeNode(node, part[0], part[2]);
					child.appendChild(node.ownerDocument.createTextNode(part[1]));
					node.appendChild(child);
				}
				else if (part[0] == 'tref') {
					var child = this._makeNode(node, part[0], part[2]);
					child.setAttributeNS($.svg.xlinkNS, 'href', part[1]);
					node.appendChild(child);
				}
				else if (part[0] == 'textpath') {
					var set = $.extend({}, part[2]);
					set.href = null;
					var child = this._makeNode(node, part[0], set);
					child.setAttributeNS($.svg.xlinkNS, 'href', part[2].href);
					child.appendChild(node.ownerDocument.createTextNode(part[1]));
					node.appendChild(child);
				}
				else { // straight text
					node.appendChild(node.ownerDocument.createTextNode(part[1]));
				}
			}
		}
		return node;
	},

	/* Add a custom SVG element.
	   @param  parent    (element) the parent node for the new element (optional)
	   @param  name      (string) the name of the element
	   @param  settings  (object) additional settings for the element (optional)
	   @return  (element) the new title node */
	other: function(parent, name, settings) {
		var args = this._args(arguments, ['name']);
		return this._makeNode(args.parent, args.name, args.settings || {});
	},

	/* Create a shape node with the given settings. */
	_makeNode: function(parent, name, settings) {
		parent = parent || this._svg;
		var node = this._svg.ownerDocument.createElementNS($.svg.svgNS, name);
		for (var name in settings) {
			var value = settings[name];
			if (value != null && value != null && 
					(typeof value != 'string' || value != '')) {
				node.setAttribute($.svg._attrNames[name] || name, value);
			}
		}
		parent.appendChild(node);
		return node;
	},

	/* Add an existing SVG node to the diagram.
	   @param  parent  (element) the parent node for the new node (optional)
	   @param  node    (element) the new node to add or
	                   (string) the jQuery selector for the node or
	                   (jQuery collection) set of nodes to add
	   @return  (SVGWrapper) this wrapper */
	add: function(parent, node) {
		var args = this._args(arguments, ['node']);
		var svg = this;
		args.parent = args.parent || this._svg;
		try {
			if ($.svg._renesis) {
				throw 'Force traversal';
			}
			args.parent.appendChild(args.node.cloneNode(true));
		}
		catch (e) {
			args.node = (args.node.jquery ? args.node : $(args.node));
			args.node.each(function() {
				var child = svg._cloneAsSVG(this);
				if (child) {
					args.parent.appendChild(child);
				}
			});
		}
		return this;
	},

	/* SVG nodes must belong to the SVG namespace, so clone and ensure this is so. */
	_cloneAsSVG: function(node) {
		var newNode = null;
		if (node.nodeType == 1) { // element
			newNode = this._svg.ownerDocument.createElementNS(
				$.svg.svgNS, this._checkName(node.nodeName));
			for (var i = 0; i < node.attributes.length; i++) {
				var attr = node.attributes.item(i);
				if (attr.nodeName != 'xmlns' && attr.nodeValue) {
					if (attr.prefix == 'xlink') {
						newNode.setAttributeNS($.svg.xlinkNS, attr.localName, attr.nodeValue);
					}
					else {
						newNode.setAttribute(this._checkName(attr.nodeName), attr.nodeValue);
					}
				}
			}
			for (var i = 0; i < node.childNodes.length; i++) {
				var child = this._cloneAsSVG(node.childNodes[i]);
				if (child) {
					newNode.appendChild(child);
				}
			}
		}
		else if (node.nodeType == 3) { // text
			if ($.trim(node.nodeValue)) {
				newNode = this._svg.ownerDocument.createTextNode(node.nodeValue);
			}
		}
		else if (node.nodeType == 4) { // CDATA
			if ($.trim(node.nodeValue)) {
				try {
					newNode = this._svg.ownerDocument.createCDATASection(node.nodeValue);
				}
				catch (e) {
					newNode = this._svg.ownerDocument.createTextNode(
						node.nodeValue.replace(/&/g, '&amp;').
						replace(/</g, '&lt;').replace(/>/g, '&gt;'));
				}
			}
		}
		return newNode;
	},

	/* Node names must be lower case and without SVG namespace prefix. */
	_checkName: function(name) {
		name = (name.substring(0, 1) >= 'A' && name.substring(0, 1) <= 'Z' ?
			name.toLowerCase() : name);
		return (name.substring(0, 4) == 'svg:' ? name.substring(4) : name);
	},

	/* Load an external SVG document.
	   @param  url       (string) the location of the SVG document or
	                     the actual SVG content
	   @param  settings  (boolean) see addTo below or
	                     (function) see onLoad below or
	                     (object) additional settings for the load with attributes below:
	                       addTo       (boolean) true to add to what's already there,
	                                   or false to clear the canvas first
						   changeSize  (boolean) true to allow the canvas size to change,
	                                   or false to retain the original
	                       onLoad      (function) callback after the document has loaded,
	                                   'this' is the container, receives SVG object and
	                                   optional error message as a parameter
	   @return  (SVGWrapper) this root */
	load: function(url, settings) {
		settings = (typeof settings == 'boolean'? {addTo: settings} :
			(typeof settings == 'function'? {onLoad: settings} : settings || {}));
		if (!settings.addTo) {
			this.clear(false);
		}
		var size = [this._svg.getAttribute('width'), this._svg.getAttribute('height')];
		var wrapper = this;
		// Report a problem with the load
		var reportError = function(message) {
			message = $.svg.local.errorLoadingText + ': ' + message;
			if (settings.onLoad) {
				settings.onLoad.apply(wrapper._container, [wrapper, message]);
			}
			else {
				wrapper.text(null, 10, 20, message);
			}
		};
		// Create a DOM from SVG content
		var loadXML4IE = function(data) {
			var xml = new ActiveXObject('Microsoft.XMLDOM');
			xml.validateOnParse = false;
			xml.resolveExternals = false;
			xml.async = false;
			xml.loadXML(data);
			if (xml.parseError.errorCode != 0) {
				reportError(xml.parseError.reason);
				return null;
			}
			return xml;
		};
		// Load the SVG DOM
		var loadSVG = function(data) {
			if (!data) {
				return;
			}
			if (data.documentElement.nodeName != 'svg') {
				var errors = data.getElementsByTagName('parsererror');
				var messages = (errors.length ? errors[0].getElementsByTagName('div') : []); // Safari
				reportError(!errors.length ? '???' :
					(messages.length ? messages[0] : errors[0]).firstChild.nodeValue);
				return;
			}
			var attrs = {};
			for (var i = 0; i < data.documentElement.attributes.length; i++) {
				var attr = data.documentElement.attributes.item(i);
				if (!(attr.nodeName == 'version' || attr.nodeName.substring(0, 5) == 'xmlns')) {
					attrs[attr.nodeName] = attr.nodeValue;
				}
			}
			wrapper.configure(attrs, true);
			var nodes = data.documentElement.childNodes;
			for (var i = 0; i < nodes.length; i++) {
				try {
					if ($.svg._renesis) {
						throw 'Force traversal';
					}
					wrapper._svg.appendChild(nodes[i].cloneNode(true));
				}
				catch (e) {
					wrapper.add(null, nodes[i]);
				}
			}
			if (!settings.changeSize) {
				wrapper.configure({width: size[0], height: size[1]});
			}
			if (settings.onLoad) {
				settings.onLoad.apply(wrapper._container, [wrapper]);
			}
		};
		if (url.match('<svg')) { // Inline SVG
			loadSVG($.browser.msie ? loadXML4IE(url) :
				new DOMParser().parseFromString(url, 'text/xml'));
		}
		else { // Remote SVG
			$.ajax({url: url, dataType: ($.browser.msie ? 'text' : 'xml'),
				success: function(xml) {
					loadSVG($.browser.msie ? loadXML4IE(xml) : xml);
				}, error: function(http, message, exc) {
					reportError(message + (exc ? ' ' + exc.message : ''));
				}});
		}
		return this;
	},

	/* Delete a specified node.
	   @param  node  (element) the drawing node to remove
	   @return  (SVGWrapper) this root */
	remove: function(node) {
		node.parentNode.removeChild(node);
		return this;
	},

	/* Delete everything in the current document.
	   @param  attrsToo  (boolean) true to clear any root attributes as well,
	                     false to leave them (optional)
	   @return  (SVGWrapper) this root */
	clear: function(attrsToo) {
		if (attrsToo) {
			this.configure({}, true);
		}
		while (this._svg.firstChild) {
			this._svg.removeChild(this._svg.firstChild);
		}
		return this;
	},

	/* Serialise the current diagram into an SVG text document.
	   @param  node  (SVG element) the starting node (optional)
	   @return  (string) the SVG as text */
	toSVG: function(node) {
		node = node || this._svg;
		return (typeof XMLSerializer == 'undefined' ? this._toSVG(node) :
			new XMLSerializer().serializeToString(node));
	},

	/* Serialise one node in the SVG hierarchy. */
	_toSVG: function(node) {
		var svgDoc = '';
		if (!node) {
			return svgDoc;
		}
		if (node.nodeType == 3) { // Text
			svgDoc = node.nodeValue;
		}
		else if (node.nodeType == 4) { // CDATA
			svgDoc = '<![CDATA[' + node.nodeValue + ']' + ']>';
		}
		else { // Element
			svgDoc = '<' + node.nodeName;
			if (node.attributes) {
				for (var i = 0; i < node.attributes.length; i++) {
					var attr = node.attributes.item(i);
					if (!($.trim(attr.nodeValue) == '' || attr.nodeValue.match(/^\[object/) ||
							attr.nodeValue.match(/^function/))) {
						svgDoc += ' ' + (attr.namespaceURI == $.svg.xlinkNS ? 'xlink:' : '') + 
							attr.nodeName + '="' + attr.nodeValue + '"';
					}
				}
			}	
			if (node.firstChild) {
				svgDoc += '>';
				var child = node.firstChild;
				while (child) {
					svgDoc += this._toSVG(child);
					child = child.nextSibling;
				}
				svgDoc += '</' + node.nodeName + '>';
			}
				else {
				svgDoc += '/>';
			}
		}
		return svgDoc;
	},
	
	/* Escape reserved characters in XML. */
	_escapeXML: function(text) {
		text = text.replace(/&/g, '&amp;');
		text = text.replace(/</g, '&lt;');
		text = text.replace(/>/g, '&gt;');
		return text;
	}
});

/* Helper to generate an SVG path.
   Obtain an instance from the SVGWrapper object.
   String calls together to generate the path and use its value:
   var path = root.createPath();
   root.path(null, path.move(100, 100).line(300, 100).line(200, 300).close(), {fill: 'red'});
   or
   root.path(null, path.move(100, 100).line([[300, 100], [200, 300]]).close(), {fill: 'red'}); */
function SVGPath() {
	this._path = '';
}

$.extend(SVGPath.prototype, {
	/* Prepare to create a new path.
	   @return  (SVGPath) this path */
	reset: function() {
		this._path = '';
		return this;
	},

	/* Move the pointer to a position.
	   @param  x         (number) x-coordinate to move to or
	                     (number[][]) x-/y-coordinates to move to
	   @param  y         (number) y-coordinate to move to (omitted if x is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	                     false for coordinates being absolute
	   @return  (SVGPath) this path */
	move: function(x, y, relative) {
		relative = (isArray(x) ? y : relative);
		return this._coords((relative ? 'm' : 'M'), x, y);
	},

	/* Draw a line to a position.
	   @param  x         (number) x-coordinate to move to or
	                     (number[][]) x-/y-coordinates to move to
	   @param  y         (number) y-coordinate to move to (omitted if x is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	                     false for coordinates being absolute
	   @return  (SVGPath) this path */
	line: function(x, y, relative) {
		relative = (isArray(x) ? y : relative);
		return this._coords((relative ? 'l' : 'L'), x, y);
	},

	/* Draw a horizontal line to a position.
	   @param  x         (number) x-coordinate to draw to or
	                     (number[]) x-coordinates to draw to
	   @param  relative  (boolean) true for coordinates relative to the current point,
	                     false for coordinates being absolute
	   @return  (SVGPath) this path */
	horiz: function(x, relative) {
		this._path += (relative ? 'h' : 'H') + (isArray(x) ? x.join(' ') : x);
		return this;
	},

	/* Draw a vertical line to a position.
	   @param  y         (number) y-coordinate to draw to or
	                     (number[]) y-coordinates to draw to
	   @param  relative  (boolean) true for coordinates relative to the current point,
	                     false for coordinates being absolute
	   @return  (SVGPath) this path */
	vert: function(y, relative) {
		this._path += (relative ? 'v' : 'V') + (isArray(y) ? y.join(' ') : y);
		return this;
	},

	/* Draw a cubic Bézier curve.
	   @param  x1        (number) x-coordinate of beginning control point or
	                     (number[][]) x-/y-coordinates of control and end points to draw to
	   @param  y1        (number) y-coordinate of beginning control point (omitted if x1 is array)
	   @param  x2        (number) x-coordinate of ending control point (omitted if x1 is array)
	   @param  y2        (number) y-coordinate of ending control point (omitted if x1 is array)
	   @param  x         (number) x-coordinate of curve end (omitted if x1 is array)
	   @param  y         (number) y-coordinate of curve end (omitted if x1 is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	                     false for coordinates being absolute
	   @return  (SVGPath) this path */
	curveC: function(x1, y1, x2, y2, x, y, relative) {
		relative = (isArray(x1) ? y1 : relative);
		return this._coords((relative ? 'c' : 'C'), x1, y1, x2, y2, x, y);
	},

	/* Continue a cubic Bézier curve.
	   Starting control point is the reflection of the previous end control point.
	   @param  x2        (number) x-coordinate of ending control point or
	                     (number[][]) x-/y-coordinates of control and end points to draw to
	   @param  y2        (number) y-coordinate of ending control point (omitted if x2 is array)
	   @param  x         (number) x-coordinate of curve end (omitted if x2 is array)
	   @param  y         (number) y-coordinate of curve end (omitted if x2 is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	                     false for coordinates being absolute
	   @return  (SVGPath) this path */
	smoothC: function(x2, y2, x, y, relative) {
		relative = (isArray(x2) ? y2 : relative);
		return this._coords((relative ? 's' : 'S'), x2, y2, x, y);
	},

	/* Draw a quadratic Bézier curve.
	   @param  x1        (number) x-coordinate of control point or
	                     (number[][]) x-/y-coordinates of control and end points to draw to
	   @param  y1        (number) y-coordinate of control point (omitted if x1 is array)
	   @param  x         (number) x-coordinate of curve end (omitted if x1 is array)
	   @param  y         (number) y-coordinate of curve end (omitted if x1 is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	                     false for coordinates being absolute
	   @return  (SVGPath) this path */
	curveQ: function(x1, y1, x, y, relative) {
		relative = (isArray(x1) ? y1 : relative);
		return this._coords((relative ? 'q' : 'Q'), x1, y1, x, y);
	},

	/* Continue a quadratic Bézier curve.
	   Control point is the reflection of the previous control point.
	   @param  x         (number) x-coordinate of curve end or
	                     (number[][]) x-/y-coordinates of points to draw to
	   @param  y         (number) y-coordinate of curve end (omitted if x is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	                     false for coordinates being absolute
	   @return  (SVGPath) this path */
	smoothQ: function(x, y, relative) {
		relative = (isArray(x) ? y : relative);
		return this._coords((relative ? 't' : 'T'), x, y);
	},

	/* Generate a path command with (a list of) coordinates. */
	_coords: function(cmd, x1, y1, x2, y2, x3, y3) {
		if (isArray(x1)) {
			for (var i = 0; i < x1.length; i++) {
				var cs = x1[i];
				this._path += (i == 0 ? cmd : ' ') + cs[0] + ',' + cs[1] +
					(cs.length < 4 ? '' : ' ' + cs[2] + ',' + cs[3] +
					(cs.length < 6 ? '': ' ' + cs[4] + ',' + cs[5]));
			}
		}
		else {
			this._path += cmd + x1 + ',' + y1 + 
				(x2 == null ? '' : ' ' + x2 + ',' + y2 +
				(x3 == null ? '' : ' ' + x3 + ',' + y3));
		}
		return this;
	},

	/* Draw an arc to a position.
	   @param  rx         (number) x-radius of arc or
	                      (number/boolean[][]) x-/y-coordinates and flags for points to draw to
	   @param  ry         (number) y-radius of arc (omitted if rx is array)
	   @param  xRotate    (number) x-axis rotation (degrees, clockwise) (omitted if rx is array)
	   @param  large      (boolean) true to draw the large part of the arc,
	                      false to draw the small part (omitted if rx is array)
	   @param  clockwise  (boolean) true to draw the clockwise arc,
	                      false to draw the anti-clockwise arc (omitted if rx is array)
	   @param  x          (number) x-coordinate of arc end (omitted if rx is array)
	   @param  y          (number) y-coordinate of arc end (omitted if rx is array)
	   @param  relative   (boolean) true for coordinates relative to the current point,
	                      false for coordinates being absolute
	   @return  (SVGPath) this path */
	arc: function(rx, ry, xRotate, large, clockwise, x, y, relative) {
		relative = (isArray(rx) ? ry : relative);
		this._path += (relative ? 'a' : 'A');
		if (isArray(rx)) {
			for (var i = 0; i < rx.length; i++) {
				var cs = rx[i];
				this._path += (i == 0 ? '' : ' ') + cs[0] + ',' + cs[1] + ' ' +
					cs[2] + ' ' + (cs[3] ? '1' : '0') + ',' +
					(cs[4] ? '1' : '0') + ' ' + cs[5] + ',' + cs[6];
			}
		}
		else {
			this._path += rx + ',' + ry + ' ' + xRotate + ' ' +
				(large ? '1' : '0') + ',' + (clockwise ? '1' : '0') + ' ' + x + ',' + y;
		}
		return this;
	},

	/* Close the current path.
	   @return  (SVGPath) this path */
	close: function() {
		this._path += 'z';
		return this;
	},

	/* Return the string rendering of the specified path.
	   @return  (string) stringified path */
	path: function() {
		return this._path;
	}
});

SVGPath.prototype.moveTo = SVGPath.prototype.move;
SVGPath.prototype.lineTo = SVGPath.prototype.line;
SVGPath.prototype.horizTo = SVGPath.prototype.horiz;
SVGPath.prototype.vertTo = SVGPath.prototype.vert;
SVGPath.prototype.curveCTo = SVGPath.prototype.curveC;
SVGPath.prototype.smoothCTo = SVGPath.prototype.smoothC;
SVGPath.prototype.curveQTo = SVGPath.prototype.curveQ;
SVGPath.prototype.smoothQTo = SVGPath.prototype.smoothQ;
SVGPath.prototype.arcTo = SVGPath.prototype.arc;

/* Helper to generate an SVG text object.
   Obtain an instance from the SVGWrapper object.
   String calls together to generate the text and use its value:
   var text = root.createText();
   root.text(null, x, y, text.string('This is ').
     span('red', {fill: 'red'}).string('!'), {fill: 'blue'}); */
function SVGText() {
	this._parts = []; // The components of the text object
}

$.extend(SVGText.prototype, {
	/* Prepare to create a new text object.
	   @return  (SVGText) this text */
	reset: function() {
		this._parts = [];
		return this;
	},

	/* Add a straight string value.
	   @param  value  (string) the actual text
	   @return  (SVGText) this text object */
	string: function(value) {
		this._parts[this._parts.length] = ['text', value];
		return this;
	},

	/* Add a separate text span that has its own settings.
	   @param  value     (string) the actual text
	   @param  settings  (object) the settings for this text
	   @return  (SVGText) this text object */
	span: function(value, settings) {
		this._parts[this._parts.length] = ['tspan', value, settings];
		return this;
	},

	/* Add a reference to a previously defined text string.
	   @param  id        (string) the ID of the actual text
	   @param  settings  (object) the settings for this text
	   @return  (SVGText) this text object */
	ref: function(id, settings) {
		this._parts[this._parts.length] = ['tref', id, settings];
		return this;
	},

	/* Add text drawn along a path.
	   @param  id        (string) the ID of the path
	   @param  value     (string) the actual text
	   @param  settings  (object) the settings for this text
	   @return  (SVGText) this text object */
	path: function(id, value, settings) {
		this._parts[this._parts.length] = ['textpath', value, 
			$.extend({href: id}, settings || {})];
		return this;
	}
});

/* Attach the SVG functionality to a jQuery selection.
   @param  command  (string) the command to run (optional, default 'attach')
   @param  options  (object) the new settings to use for these SVG instances
   @return jQuery (object) for chaining further calls */
$.fn.svg = function(options) {
	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options == 'string' && options == 'get') {
		return $.svg['_' + options + 'SVG'].apply($.svg, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
		if (typeof options == 'string') {
			$.svg['_' + options + 'SVG'].apply($.svg, [this].concat(otherArgs));
		}
		else {
			$.svg._attachSVG(this, options || {});
		} 
	});
};

/* Determine whether an object is an array. */
function isArray(a) {
	return (a && a.constructor == Array);
}

// Singleton primary SVG interface
$.svg = new SVGManager();

})(jQuery);

]]></script>
<script type="text/javascript"><![CDATA[
/* http://keith-wood.name/svg.html
   SVG/jQuery DOM compatibility for jQuery v1.4.2.
   Written by Keith Wood (kbwood{at}iinet.com.au) April 2009.
   Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and 
   MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses. 
   Please attribute the author if you use it. */

(function($) { // Hide scope, no $ conflict

/* Support adding class names to SVG nodes. */
var origAddClass = $.fn.addClass;

$.fn.addClass = function(classNames) {
	classNames = classNames || '';
	return this.each(function() {
		if (isSVGElem(this)) {
			var node = this;
			$.each(classNames.split(/\s+/), function(i, className) {
				var classes = (node.className ? node.className.baseVal : node.getAttribute('class'));
				if ($.inArray(className, classes.split(/\s+/)) == -1) {
					classes += (classes ? ' ' : '') + className;
					(node.className ? node.className.baseVal = classes :
						node.setAttribute('class',  classes));
				}
			});
		}
		else {
			origAddClass.apply($(this), [classNames]);
		}
	});
};

/* Support removing class names from SVG nodes. */
var origRemoveClass = $.fn.removeClass;

$.fn.removeClass = function(classNames) {
	classNames = classNames || '';
	return this.each(function() {
		if (isSVGElem(this)) {
			var node = this;
			$.each(classNames.split(/\s+/), function(i, className) {
				var classes = (node.className ? node.className.baseVal : node.getAttribute('class'));
				classes = $.grep(classes.split(/\s+/), function(n, i) { return n != className; }).
					join(' ');
				(node.className ? node.className.baseVal = classes :
					node.setAttribute('class', classes));
			});
		}
		else {
			origRemoveClass.apply($(this), [classNames]);
		}
	});
};

/* Support toggling class names on SVG nodes. */
var origToggleClass = $.fn.toggleClass;

$.fn.toggleClass = function(className, state) {
	return this.each(function() {
		if (isSVGElem(this)) {
			if (typeof state !== 'boolean') {
				state = !$(this).hasClass(className);
			}
			$(this)[(state ? 'add' : 'remove') + 'Class'](className);
		}
		else {
			origToggleClass.apply($(this), [className, state]);
		}
	});
};

/* Support checking class names on SVG nodes. */
var origHasClass = $.fn.hasClass;

$.fn.hasClass = function(className) {
	className = className || '';
	var found = false;
	this.each(function() {
		if (isSVGElem(this)) {
			var classes = (this.className ? this.className.baseVal :
				this.getAttribute('class')).split(/\s+/);
			found = ($.inArray(className, classes) > -1);
		}
		else {
			found = (origHasClass.apply($(this), [className]));
		}
		return !found;
	});
	return found;
};

/* Support attributes on SVG nodes. */
var origAttr = $.fn.attr;

$.fn.attr = function(name, value, type) {
	if (typeof name === 'string' && value === undefined) {
		var val = origAttr.apply(this, [name, value, type]);
		return (val && val.baseVal ? val.baseVal.valueAsString : val);
	}
	var options = name;
	if (typeof name === 'string') {
		options = {};
		options[name] = value;
	}
	return this.each(function() {
		if (isSVGElem(this)) {
			for (var n in options) {
				this.setAttribute(n,
					(typeof options[n] == 'function' ? options[n]() : options[n]));
			}
		}
		else {
			origAttr.apply($(this), [name, value, type]);
		}
	});
};

/* Support removing attributes on SVG nodes. */
var origRemoveAttr = $.fn.removeAttr;

$.fn.removeAttr = function(name) {
	return this.each(function() {
		if (isSVGElem(this)) {
			(this[name] && this[name].baseVal ? this[name].baseVal.value = '' :
				this.setAttribute(name, ''));
		}
		else {
			origRemoveAttr.apply($(this), [name]);
		}
	});
};

/* Update Sizzle selectors. */
var origRelativeNext = $.expr.relative['+'];
var origRelativeChild = $.expr.relative['>'];
var origRelativeDescendant = $.expr.relative[''];
var origRelativeSiblings = $.expr.relative['~'];
var origFindId = $.expr.find.ID;
var origFindTag = $.expr.find.TAG;
var origPreFilterClass = $.expr.preFilter.CLASS;
var origFilterClass = $.expr.filter.CLASS;
var origFilterAttr = $.expr.filter.ATTR;

/* Determine if any nodes are SVG nodes. */
function anySVG(checkSet) {
	for (var i = 0; i < checkSet.length; i++) {
		if (checkSet[i].nodeType == 1 && checkSet[i].namespaceURI == $.svg.svgNS) {
			return true;
		}
	}
	return false;
}

$.expr.relative['+'] = function(checkSet, part, isXML) {
	origRelativeNext(checkSet, part, isXML || anySVG(checkSet));
};

$.expr.relative['>'] = function(checkSet, part, isXML) {
	origRelativeChild(checkSet, part, isXML || anySVG(checkSet));
};

$.expr.relative[''] = function(checkSet, part, isXML) {
	origRelativeDescendant(checkSet, part, isXML || anySVG(checkSet));
};

$.expr.relative['~'] = function(checkSet, part, isXML) {
	origRelativeSiblings(checkSet, part, isXML || anySVG(checkSet));
};

$.expr.find.ID = function(match, context, isXML) {
	return (isSVGElem(context) ?
		[context.ownerDocument.getElementById(match[1])] :
		origFindId(match, context, isXML));
};

var div = document.createElement('div');
div.appendChild(document.createComment(''));
if (div.getElementsByTagName('*').length > 0) { // Make sure no comments are found
	$.expr.find.TAG = function(match, context) {
		var results = context.getElementsByTagName(match[1]);
		if (match[1] === '*') { // Filter out possible comments
			var tmp = [];
			for (var i = 0; results[i] || results.item(i); i++) {
				if ((results[i] || results.item(i)).nodeType === 1) {
					tmp.push(results[i] || results.item(i));
				}
			}
			results = tmp;
		}
		return results;
	};
}

$.expr.preFilter.CLASS = function(match, curLoop, inplace, result, not, isXML) {
	match = ' ' + match[1].replace(/\\/g, '') + ' ';
	if (isXML) {
		return match;
	}
	for (var i = 0, elem = {}; elem != null; i++) {
		elem = curLoop[i];
		if (!elem) {
			try {
				elem = curLoop.item(i);
			}
			catch (e) {
				// Ignore
			}
		}
		if (elem) {
			var className = (!isSVGElem(elem) ? elem.className :
				(elem.className ? elem.className.baseVal : '') || elem.getAttribute('class'));
			if (not ^ (className && (' ' + className + ' ').indexOf(match) > -1)) {
				if (!inplace)
					result.push(elem);
			}
			else if (inplace) {
				curLoop[i] = false;
			}
		}
	}
	return false;
};

$.expr.filter.CLASS = function(elem, match) {
	var className = (!isSVGElem(elem) ? elem.className :
		(elem.className ? elem.className.baseVal : elem.getAttribute('class')));
	return (' ' + className + ' ').indexOf(match) > -1;
};

$.expr.filter.ATTR = function(elem, match) {
	var handler = null;
	if (isSVGElem(elem)) {
		handler = match[1];
		$.expr.attrHandle[handler] = function(elem){
			var attr = elem.getAttribute(handler);
			return attr && attr.baseVal || attr;
		};
	}
	var filter = origFilterAttr(elem, match);
	if (handler) {
		$.expr.attrHandle[handler] = null;
	}
	return filter;
};

/*
	Change Sizzle initialisation (line 1425) in jQuery v1.3.2 base code...
	
	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );
		} else if ( context.nodeType === 1 ) {
			for ( var i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i])) ) {
					results.push( set[i] || set.item(i) ); // Here
				}
			}
		} else {
			for ( var i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] || set.item(i) ); // Here
				}
			}
		}
	}
	
	Change fallback makeArray (line 2076) implementation in jQuery Sizzle...
	
			if ( typeof array.length === "number" ) {
				for ( var i = 0, l = array.length; i < l; i++ ) {
					ret.push( array[i] || array.item(i) ); // Here
				}
			}
*/

/*
	Events management requires changes to jQuery v1.3.2 base code...

	In $.event.add (line 2437)...
	
				if ( !jQuery.event.special[type] || jQuery.event.special[type].setup.call(elem, data, namespaces) === false ) {
					// Bind the global event handler to the element
					try { // Here
						elem.addEventListener(type, handle, false);
					}
					catch(e) {
						if (elem.attachEvent)
							elem.attachEvent("on" + type, handle);
					}
				}

	In $.event.remove (line 2521)...
	
							if ( !jQuery.event.special[type] || jQuery.event.special[type].teardown.call(elem, namespaces) === false ) {
								try { // Here
									elem.removeEventListener(type, jQuery.data(elem, "handle"), false);
								}
								catch (e) {
									if (elem.detachEvent)
										elem.detachEvent("on" + type, jQuery.data(elem, "handle"));
								}
							}
*/

/* Does this node belong to SVG? */
function isSVGElem(node) {
	return (node.nodeType == 1 && node.namespaceURI == $.svg.svgNS);
}

})(jQuery);

]]></script>
<script type="text/javascript"><![CDATA[
const SVG = "http://www.w3.org/2000/svg";
const XLINK = "http://www.w3.org/1999/xlink";

var main_trans = null, cur_trans = null;
var everything = null, marker = null;
var zoom_value = 0;
var ex = 0, ey = 0, mouse_position_in_lumispace = 0;

$(function() {
    // Performed on script load

    c = $("#whole_document")[0];
    c.addEventListener("mousemove", on_mouse_move, false);
    c.addEventListener("mouseup", on_mouse_up, false);
    c.addEventListener("mousedown", on_mouse_down, false);
    
    window.addEventListener("DOMMouseScroll", on_mouse_scroll, false);  
    window.addEventListener("mousewheel", on_mouse_scroll, false);        
    window.onmousewheel = document.onmousewheel = on_mouse_scroll;
    
    everything = $("#everything")[0];
    
    doc = everything.getBBox();
    winw = window.innerWidth; winh = window.innerHeight;
    
    // Set the scale 
    if (winw / winh > doc.width / doc.height)
    {
        everything.vScale = 0.9 * window.innerHeight / doc.height;
    } else
    {
        everything.vScale = 0.9 * window.innerWidth / doc.width;
    }
    
    zoom_value = Math.log(everything.vScale)*20;
    
    // Center the document!
    doc_window_w = everything.vScale * doc.width;
    doc_window_h = everything.vScale * doc.height;
    y = window.innerHeight / 2 - doc_window_h / 2;
    x = window.innerWidth  / 2 - doc_window_w / 2;
    main_trans = everything.vTranslate = [x, y];
    
    update_transform();
    
});


function update_transform() 
{
    trans = everything.vTranslate; scale = everything.vScale;
    everything.setAttribute(
        "transform", 
        "translate(" + trans[0] + ", " + trans[1] + ") " +
        "scale(" + scale + ", " + scale + ")");
}

function on_mouse_scroll(ev) 
{
    if (ev.wheelDelta) delta = ev.wheelDelta / 120 * 3;
    if (ev.detail) delta = -ev.detail;
    update_zoom(delta, ev.clientX, ev.clientY);
    
    // Prevent usual window scrolling
    ev.preventDefault();
}

function update_zoom(scroll, ex, ey) 
{
    s_before = s = everything.vScale;
    new_zoom = zoom_value+scroll;
    
    //if (new_zoom > 55) return; // too far zoomed in
    
    s = Math.exp(new_zoom / 20);
    if (s < 0.01) return; // Too far zoomed out (primitive)
    
    zoom_value += scroll;
    everything.vScale = s;
    
    // Translate canvas to keep mouse stationary with respect to image
    main_trans[0] += (s / s_before - 1)*(main_trans[0] - ex);
    main_trans[1] += (s / s_before - 1)*(main_trans[1] - ey);
    
    update_transform();
}

function on_mouse_down(ev) 
{
    // ignore if something else is already going on
    if (cur_trans != null)
        return;

    cur_trans = { s: everything.vScale, t: everything.vTranslate,
                  x: ev.clientX, y: ev.clientY };
       
    ev.preventDefault();
}

function on_mouse_move(ev) 
{
    if (ev.button != 0)
        alert(ev.button);
    ex = ev.clientX; ey = ev.clientY;
    
    if (!("cur_trans" in window) || cur_trans == null)
    {
        return;
    }

    // If we get here, the mouse is held down.

    main_trans[0] += ex - cur_trans.x; cur_trans.x = ex;
    main_trans[1] += ey - cur_trans.y; cur_trans.y = ey;

    update_transform();
    ev.preventDefault();
}

function on_mouse_up(ev) 
{
    // Transform complete
    cur_trans = null;
    ev.preventDefault();
}

]]></script>


</svg>